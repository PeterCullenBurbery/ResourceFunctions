(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     94003,       1958]
NotebookOptionsPosition[     59509,       1226]
NotebookOutlinePosition[     93175,       1952]
CellTagsIndexPosition[     93132,       1949]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          1 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[1] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 1"|>}, <|"ComparisonMethod" -> "Item"|>, 
          "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            1 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[1] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 1"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              1 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[1] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 1"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {48.708496160991494`, 55.424316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> QuestionObject[
       QuestionInterface[
       "ShortAnswer", <|
        "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
         "What is the next step?", "Range" -> {1, 900}|>], 
       AssessmentFunction[{
         CloudObject[
         "https://www.wolframcloud.com/obj/burbery1/Quizzes/MyQuiz100"], 
         "dd8e29bb-61e2-4b01-8408-1c23d2b6b89a"}], "QuestionID" -> 
       "dd8e29bb-61e2-4b01-8408-1c23d2b6b89a"], "Key" -> Inherited, 
     "QuestionID" -> 
     "dd8e29bb-61e2-4b01-8408-1c23d2b6b89a"}},ExpressionUUID->"435889d7-ce9f-\
4ea3-afc4-591462dfe915"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          2 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[2] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 2"|>}, <|"ComparisonMethod" -> "Item"|>, 
          "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            2 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[2] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 2"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              2 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[2] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 2"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {48.708496160991494`, 55.424316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> QuestionObject[
       QuestionInterface[
       "ShortAnswer", <|
        "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
         "What is the next step?", "Range" -> {1, 900}|>], 
       AssessmentFunction[{
         CloudObject[
         "https://www.wolframcloud.com/obj/burbery1/Quizzes/MyQuiz100"], 
         "b8c2e13e-e2b6-46b5-9c5f-a266fe78f247"}], "QuestionID" -> 
       "b8c2e13e-e2b6-46b5-9c5f-a266fe78f247"], "Key" -> Inherited, 
     "QuestionID" -> 
     "b8c2e13e-e2b6-46b5-9c5f-a266fe78f247"}},ExpressionUUID->"9e63c3a4-af3a-\
412f-92b4-41cf12642fa9"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          3 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[3] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 3"|>}, <|"ComparisonMethod" -> "Item"|>, 
          "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            3 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[3] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 3"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              3 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[3] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 3"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {48.708496160991494`, 55.424316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> QuestionObject[
       QuestionInterface[
       "ShortAnswer", <|
        "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
         "What is the next step?", "Range" -> {1, 900}|>], 
       AssessmentFunction[{
         CloudObject[
         "https://www.wolframcloud.com/obj/burbery1/Quizzes/MyQuiz100"], 
         "15dddbc4-8f18-4fec-8fa7-75690e62b3a5"}], "QuestionID" -> 
       "15dddbc4-8f18-4fec-8fa7-75690e62b3a5"], "Key" -> Inherited, 
     "QuestionID" -> 
     "15dddbc4-8f18-4fec-8fa7-75690e62b3a5"}},ExpressionUUID->"45fd1e19-7d48-\
40f0-b860-cd28340b268a"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          4 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[4] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 4"|>}, <|"ComparisonMethod" -> "Item"|>, 
          "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            4 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[4] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 4"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              4 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[4] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 4"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {48.708496160991494`, 55.424316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> QuestionObject[
       QuestionInterface[
       "ShortAnswer", <|
        "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
         "What is the next step?", "Range" -> {1, 900}|>], 
       AssessmentFunction[{
         CloudObject[
         "https://www.wolframcloud.com/obj/burbery1/Quizzes/MyQuiz100"], 
         "d3914ae2-31ee-4716-a403-cd99903c44b2"}], "QuestionID" -> 
       "d3914ae2-31ee-4716-a403-cd99903c44b2"], "Key" -> Inherited, 
     "QuestionID" -> 
     "d3914ae2-31ee-4716-a403-cd99903c44b2"}},ExpressionUUID->"a57c8135-5b4e-\
4f7f-8590-e01d8d01b5b3"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          5 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[5] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 5"|>}, <|"ComparisonMethod" -> "Item"|>, 
          "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            5 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[5] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 5"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              5 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[5] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 5"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {48.708496160991494`, 55.424316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> QuestionObject[
       QuestionInterface[
       "ShortAnswer", <|
        "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
         "What is the next step?", "Range" -> {1, 900}|>], 
       AssessmentFunction[{
         CloudObject[
         "https://www.wolframcloud.com/obj/burbery1/Quizzes/MyQuiz100"], 
         "eb551796-ca57-4f64-8b32-a22a4ddda3c8"}], "QuestionID" -> 
       "eb551796-ca57-4f64-8b32-a22a4ddda3c8"], "Key" -> Inherited, 
     "QuestionID" -> 
     "eb551796-ca57-4f64-8b32-a22a4ddda3c8"}},ExpressionUUID->"9f782b08-e63f-\
4423-b36c-8dcbaac4c69f"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          10 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[10] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 10"|>}, <|"ComparisonMethod" -> "Item"|>,
           "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            10 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[10] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 10"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              10 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[10] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 10"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {48.708496160991494`, 55.424316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> QuestionObject[
       QuestionInterface[
       "ShortAnswer", <|
        "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
         "What is the next step?", "Range" -> {1, 900}|>], 
       AssessmentFunction[{
         CloudObject[
         "https://www.wolframcloud.com/obj/burbery1/Quizzes/MyQuiz100"], 
         "293d2a38-c380-4d0b-a154-54c774613ea9"}], "QuestionID" -> 
       "293d2a38-c380-4d0b-a154-54c774613ea9"], "Key" -> Inherited, 
     "QuestionID" -> 
     "293d2a38-c380-4d0b-a154-54c774613ea9"}},ExpressionUUID->"1243934c-c43a-\
4b35-9627-ef94e34ea508"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          15 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[15] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 15"|>}, <|"ComparisonMethod" -> "Item"|>,
           "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            15 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[15] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 15"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              15 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[15] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 15"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {48.708496160991494`, 55.424316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> QuestionObject[
       QuestionInterface[
       "ShortAnswer", <|
        "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
         "What is the next step?", "Range" -> {1, 900}|>], 
       AssessmentFunction[{
         CloudObject[
         "https://www.wolframcloud.com/obj/burbery1/Quizzes/MyQuiz100"], 
         "2eda7c40-65c5-4c85-aa8d-f52c7c0812b6"}], "QuestionID" -> 
       "2eda7c40-65c5-4c85-aa8d-f52c7c0812b6"], "Key" -> Inherited, 
     "QuestionID" -> 
     "2eda7c40-65c5-4c85-aa8d-f52c7c0812b6"}},ExpressionUUID->"2cde0b5f-321e-\
4c5e-93e0-dcb6f5df34ca"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          20 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[20] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 20"|>}, <|"ComparisonMethod" -> "Item"|>,
           "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            20 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[20] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 20"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              20 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[20] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 20"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {48.708496160991494`, 55.424316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> QuestionObject[
       QuestionInterface[
       "ShortAnswer", <|
        "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
         "What is the next step?", "Range" -> {1, 900}|>], 
       AssessmentFunction[{
         CloudObject[
         "https://www.wolframcloud.com/obj/burbery1/Quizzes/MyQuiz100"], 
         "ce61b31b-1391-41c3-a790-c4f43379a484"}], "QuestionID" -> 
       "ce61b31b-1391-41c3-a790-c4f43379a484"], "Key" -> Inherited, 
     "QuestionID" -> 
     "ce61b31b-1391-41c3-a790-c4f43379a484"}},ExpressionUUID->"a93731d2-c524-\
426f-bc9a-4874c6b68108"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          25 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[25] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 25"|>}, <|"ComparisonMethod" -> "Item"|>,
           "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            25 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[25] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 25"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              25 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[25] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 25"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {48.708496160991494`, 55.424316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> QuestionObject[
       QuestionInterface[
       "ShortAnswer", <|
        "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
         "What is the next step?", "Range" -> {1, 900}|>], 
       AssessmentFunction[{
         CloudObject[
         "https://www.wolframcloud.com/obj/burbery1/Quizzes/MyQuiz100"], 
         "51183bc7-8a3b-4661-91b3-3584ccc11c7a"}], "QuestionID" -> 
       "51183bc7-8a3b-4661-91b3-3584ccc11c7a"], "Key" -> Inherited, 
     "QuestionID" -> 
     "51183bc7-8a3b-4661-91b3-3584ccc11c7a"}},ExpressionUUID->"e6cd9e38-3aa8-\
4c45-bfd2-1f593a535a4f"]
},
WindowSize->{574.8, 579.6},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   TagBox[
    GridBox[{{
       TagBox[
        GridBox[{{
           StyleBox[
            TagBox[
             GridBox[{{
                ItemBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FormNotebookExpressions", "QANotebookDockedCellIcon"]], 
                 Alignment -> Center, StripOnInput -> False], 
                ItemBox[
                 StyleBox[
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FormNotebookStrings", "QAFormNotebookHeader"], 
                    StandardForm]], FontFamily -> "Source Sans Pro", 
                  FontWeight -> "Medium", FontSize -> 16], Alignment -> 
                 Center, StripOnInput -> False], 
                ItemBox["\"\"", ItemSize -> 0, StripOnInput -> False], 
                ItemBox[
                 StyleBox[
                  DynamicBox[
                   ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FormNotebookStrings", "AuthoringHeader"], StandardForm]],
                   FontFamily -> "Source Sans Pro", FontTracking -> 
                  "SemiCondensed", 
                  FontVariations -> {"CapsType" -> "AllSmallCaps"}, 
                  FontWeight -> "Medium", FontSize -> 19], Alignment -> 
                 Center, StripOnInput -> False]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
              False, GridBoxDividers -> {
               "ColumnsIndexed" -> {4 -> GrayLevel[1]}, "Rows" -> {{None}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"],
             FontColor -> GrayLevel[1], StripOnInput -> False]}}, 
         GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
         AutoDelete -> False, 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]}}, 
     AutoDelete -> False, 
     GridBoxItemSize -> {"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
      BaseStyle -> "FormAuthoringBannerGrid"], "Grid"], Background -> 
   RGBColor[0.28627450980392155`, 0.28627450980392155`, 0.28627450980392155`],
    CellFrameMargins -> {{4, 4}, {2, 2}}, CellFrame -> False], 
  Cell[
   TagBox[
    GridBox[{{
       TagBox[
        DynamicBox[
         ToBoxes[
          FormNotebook`Private`QAformCellMenu[]]], 
        MouseAppearanceTag["LinkHand"]], 
       TagBox[
        DynamicBox[
         ToBoxes[
          FormNotebook`Private`insertExtrasButton[]]], 
        MouseAppearanceTag["LinkHand"]], 
       ItemBox["\"\"", ItemSize -> Fit, StripOnInput -> False], 
       ItemBox[
        TagBox[
         DynamicBox[
          ButtonBox[
           FrameBox[
            If[
             CurrentValue["MouseOver"], 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FormNotebookExpressions", "NotebookSettingsGearWhite"]], 
             DynamicBox[
              FEPrivate`FrontEndResource[
              "FormNotebookExpressions", "NotebookSettingsGear"]]], 
            Background -> Dynamic[
              If[
               CurrentValue["MouseOver"], 
               RGBColor[
               0.28627450980392155`, 0.28627450980392155`, 
                0.28627450980392155`], 
               RGBColor[
               0.8980392156862745, 0.8980392156862745, 0.8980392156862745]]], 
            FrameStyle -> None, ImageMargins -> Automatic, 
            FrameMargins -> {{4, 4}, {0, 0}}, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 24}, BaselinePosition -> Scaled[0.35], 
            StripOnInput -> False], ButtonFunction :> 
           With[{FormNotebook`Private`nb = EvaluationNotebook[]}, 
             FormNotebook`Private`QAsettingsDialog[FormNotebook`Private`nb]], 
           Appearance -> None, BaselinePosition -> Baseline, 
           ImageSize -> {Automatic, 24}, Evaluator -> Automatic, Method -> 
           "Queued"]], 
         MouseAppearanceTag["LinkHand"]], StripOnInput -> False], 
       TagBox[
        ButtonBox[
         DynamicBox[
          ToBoxes[
           If[
            CurrentValue["MouseOver"], 
            Framed[
             Row[{
               Style[
                FormNotebook`Private`tr["GenerateButtonLabel"], 13, 
                FontFamily -> "Source Sans Pro", FontColor -> GrayLevel[1], 
                FontWeight -> Medium], 
               FormNotebook`Private`mouseovergenerateasset}], Background -> 
             RGBColor[
              0.5372549019607843, 0.5372549019607843, 0.5372549019607843], 
             FrameStyle -> None, ImageMargins -> Automatic, RoundingRadius -> 
             2, ImageSize -> {Automatic, 24}, BaselinePosition -> Baseline], 
            Framed[
             Row[{
               Style[
                FormNotebook`Private`tr["GenerateButtonLabel"], 13, 
                FontFamily -> "Source Sans Pro", FontColor -> GrayLevel[1], 
                FontWeight -> Medium], 
               FormNotebook`Private`generatearrowasset}], Background -> 
             RGBColor[
              0.5372549019607843, 0.5372549019607843, 0.5372549019607843], 
             FrameStyle -> None, ImageMargins -> Automatic, RoundingRadius -> 
             2, ImageSize -> {Automatic, 24}, BaselinePosition -> Baseline]], 
           StandardForm]], ButtonFunction :> 
         With[{FormNotebook`Private`nb$ = ButtonNotebook[]}, 
           Switch[
            CurrentValue[
            FormNotebook`Private`nb$, {
             TaggingRules, "FormNotebook", "SubmissionOptions", 
              "AssessmentMethod"}], "Local", 
            FormNotebook`Private`QAgenerateFormNotebookLocal[
            FormNotebook`Private`nb$], "Cloud", 
            FormNotebook`Private`QAgenerateFormNotebookCloud[
            FormNotebook`Private`nb$]]], Appearance -> None, BaselinePosition -> 
         Baseline, Evaluator -> Automatic, Method -> "Queued"], 
        MouseAppearanceTag["LinkHand"]]}}, AutoDelete -> False, 
     GridBoxItemSize -> {
      "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
   Background -> 
   RGBColor[0.8980392156862745, 0.8980392156862745, 0.8980392156862745], 
   CellFrame -> False, CellFrameMargins -> {{8, 8}, {3, 3}}], 
  Cell[
   BoxData[
    DynamicBox[
     ToBoxes[
      Grid[{{
         If[CurrentValue[
            EvaluationNotebook[], {
            "TaggingRules", "FormNotebook", "InsertHistory"}] == <||>, 
          Nothing, 
          Apply[Sequence, 
           Take[
            KeyValueMap[MouseAppearance[
              Button[
               Framed[
                FormNotebook`Private`buttonStyle[#], Background -> Dynamic[
                  If[
                   CurrentValue["MouseOver"], 
                   RGBColor[
                   0.8823529411764706, 0.9490196078431372, 
                    0.9803921568627451], 
                   GrayLevel[1]]], FrameStyle -> 
                RGBColor[
                 0.28627450980392155`, 0.28627450980392155`, 
                  0.28627450980392155`], ImageMargins -> Automatic, 
                RoundingRadius -> 2, ImageSize -> {Automatic, 24}, 
                BaselinePosition -> Baseline], 
               FormNotebook`Private`createQAFormCellBelow[#2, #], Appearance -> 
               None, BaselinePosition -> Baseline], "LinkHand"]& , 
             CurrentValue[
              EvaluationNotebook[], {
              "TaggingRules", "FormNotebook", "InsertHistory"}]], 
            UpTo[3]]]], 
         Item["", ItemSize -> Fit], 
         Item[
          Button[FormNotebook`Private`gear, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "InsertBar"}] = "Closed"; Null, 
           Appearance -> None], ItemSize -> Full]}}, Alignment -> Left], 
      StandardForm]]], LineBreakWithin -> Automatic, LineIndent -> 0, 
   LinebreakAdjustments -> {1., 10, 1, 0, 1}, ShowStringCharacters -> False, 
   Background -> 
   RGBColor[0.8980392156862745, 0.8980392156862745, 0.8980392156862745], 
   CellFrame -> False, CellFrameMargins -> {{8, 8}, {5, 1}}, TaggingRules -> 
   "InsertFlag", CellOpen -> Dynamic[
     Switch[
      CurrentValue[
       EvaluationNotebook[], {TaggingRules, "FormNotebook", "InsertBar"}], 
      "Closed", False, "Open", True]]], 
  Cell[
   BoxData[
    TagBox[
     GridBox[{{
        TagBox[
         ButtonBox[
          FrameBox[
           StyleBox[
            DynamicBox[
             ToBoxes[
              FEPrivate`FrontEndResource[
              "FormNotebookStrings", "InsertInformationBoxButtonLabel"], 
              StandardForm]], 13, FontFamily -> "Source Sans Pro", FontColor -> 
            GrayLevel[0], FontWeight -> Plain, StripOnInput -> False], 
           Background -> Dynamic[
             If[
              CurrentValue["MouseOver"], 
              RGBColor[
              0.8823529411764706, 0.9490196078431372, 0.9803921568627451], 
              GrayLevel[1]]], FrameStyle -> 
           RGBColor[
            0.28627450980392155`, 0.28627450980392155`, 0.28627450980392155`],
            ImageMargins -> Automatic, RoundingRadius -> 2, 
           ImageSize -> {Automatic, 24}, BaselinePosition -> Baseline, 
           StripOnInput -> False], ButtonFunction :> 
          FormNotebook`Private`createHelpOpener[], Appearance -> None, 
          BaselinePosition -> Baseline, Evaluator -> Automatic, Method -> 
          "Preemptive"], 
         MouseAppearanceTag["LinkHand"]], 
        ItemBox[
         TooltipBox[
          TagBox[
           ButtonBox[
            FrameBox[
             StyleBox[
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource[
                "FormNotebookStrings", "InsertAnnotationButtonLabel"], 
                StandardForm]], 13, FontFamily -> "Source Sans Pro", 
              FontColor -> GrayLevel[0], FontWeight -> Plain, StripOnInput -> 
              False], Background -> Dynamic[
               If[
                CurrentValue["MouseOver"], 
                RGBColor[
                0.8823529411764706, 0.9490196078431372, 0.9803921568627451], 
                GrayLevel[1]]], FrameStyle -> 
             RGBColor[
              0.28627450980392155`, 0.28627450980392155`, 
               0.28627450980392155`], ImageMargins -> Automatic, 
             RoundingRadius -> 2, ImageSize -> {Automatic, 24}, 
             BaselinePosition -> Baseline, StripOnInput -> False], 
            ButtonFunction :> FormNotebook`Private`toggleAuthorFlag[], 
            Appearance -> None, BaselinePosition -> Baseline, Evaluator -> 
            Automatic, Method -> "Preemptive"], 
           MouseAppearanceTag["LinkHand"]], 
          DynamicBox[
           ToBoxes[
            FEPrivate`FrontEndResource[
            "FormNotebookStrings", "InsertAnnotationButtonTooltip"], 
            StandardForm]], TooltipDelay -> 0.25, TooltipStyle -> 
          "TextStyling"], ItemSize -> Fit, 
         BaseStyle -> {
          LineBreakWithin -> Automatic, LineIndent -> 0, 
           LinebreakAdjustments -> {1., 10, 1, 0, 1}}, StripOnInput -> False], 
        ItemBox[
         ButtonBox[
          DynamicBox[
           FEPrivate`FrontEndResource[
           "FormNotebookExpressions", "GreyCloserX"]], 
          ButtonFunction :> (CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "ToolsBar"}] = "Closed"; Null), 
          Appearance -> None, Evaluator -> Automatic, Method -> "Preemptive"],
          ItemSize -> Full, StripOnInput -> False]}}, 
      GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
      GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"]], 
   LineBreakWithin -> Automatic, LineIndent -> 0, 
   LinebreakAdjustments -> {1., 10, 1, 0, 1}, TaggingRules -> "ToolsFlag", 
   Background -> 
   RGBColor[0.8980392156862745, 0.8980392156862745, 0.8980392156862745], 
   CellFrame -> False, CellFrameMargins -> {{8, 8}, {5, 1}}, CellOpen -> 
   Dynamic[
     Switch[
      CurrentValue[
       EvaluationNotebook[], {TaggingRules, "FormNotebook", "ToolsBar"}], 
      "Closed", False, "Open", True]]], 
  Cell[
   BoxData[
    StyleBox[
     InterpretationBox[
      StyleBox[
       PaneSelectorBox[{False -> GridBox[{{
             OpenerBox[
              Dynamic[
               CurrentValue[
                EvaluationCell[], {TaggingRules, "StripeOpen"}, False]], 
              Appearance -> Automatic, Enabled -> Automatic, AutoAction -> 
              False, ContinuousAction -> False], 
             TagBox[
              GridBox[{{
                 StyleBox[
                  DynamicBox[
                   ToBoxes[
                    DateString[
                    TimeZoneConvert[
                    DateObject[
                    3.8961960252183044`17.343215788118325*^9, TimeZone -> 
                    0]], {"MonthName", " ", "DayShort", ", ", "Year", " ", 
                    "Hour12Short", ":", "Minute", " ", "AMPMLowerCase"}], 
                    StandardForm], SingleEvaluation -> True, Evaluator -> 
                   "System"], FontSlant -> Italic, FontColor -> 
                  GrayLevel[0.5], FontSize -> 0.9 Inherited, StripOnInput -> 
                  False], "\"   \"", 
                 ItemBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FormNotebookStrings", "QACloudResponseSucceed"], 
                    StandardForm]], "\"\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"], 
                   LineBreakWithin -> Automatic, LineIndent -> 0, 
                   StripOnInput -> False], ItemSize -> Fit, StripOnInput -> 
                  False], 
                 ItemBox[
                  StyleBox[
                  "\"\"", LineBreakWithin -> Automatic, LineIndent -> 0, 
                   StripOnInput -> False], ItemSize -> Fit, StripOnInput -> 
                  False], "\"\"", 
                 TagBox[
                  ButtonBox[
                   TagBox[
                    PaneSelectorBox[{False -> GraphicsBox[{
                    GrayLevel[
                    NCache[
                    Rational[64, 85], 0.7529411764705882]], 
                    
                    PolygonBox[{{-0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, -0.282842712474619}, {0.282842712474619, 
                    0.42426406871192845`}, {0.42426406871192845`, 
                    0.282842712474619}}], 
                    
                    PolygonBox[{{0.42426406871192845`, -0.282842712474619}, {
                    0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, 0.282842712474619}, {-0.282842712474619, 
                    0.42426406871192845`}}]}, ImageSize -> 18, 
                    PlotRangePadding -> 0, PlotRange -> 0.7, Background -> 
                    None], True -> GraphicsBox[{
                    GrayLevel[
                    NCache[
                    Rational[128, 255], 0.5019607843137255]], 
                    
                    PolygonBox[{{-0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, -0.282842712474619}, {0.282842712474619, 
                    0.42426406871192845`}, {0.42426406871192845`, 
                    0.282842712474619}}], 
                    
                    PolygonBox[{{0.42426406871192845`, -0.282842712474619}, {
                    0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, 0.282842712474619}, {-0.282842712474619, 
                    0.42426406871192845`}}]}, ImageSize -> 18, 
                    PlotRangePadding -> 0, PlotRange -> 0.7, Background -> 
                    None]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], 
                    MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
                   With[{DefinitionNotebookClient`Stripes`PackagePrivate`nbo$ = 
                    EvaluationNotebook[]}, 
                    CurrentValue[
                    DefinitionNotebookClient`Stripes`PackagePrivate`nbo$, 
                    DockedCells] = If[
                    TrueQ[
                    MemberQ[
                    CurrentValue["ModifierKeys"], "Control"]], 
                    DeleteCases[
                    Flatten[{
                    CurrentValue[
                    DefinitionNotebookClient`Stripes`PackagePrivate`nbo$, 
                    DockedCells]}], 
                    Cell[
                    Blank[], "StripeCell", 
                    BlankNullSequence[]]], 
                    DeleteCases[
                    Flatten[{
                    CurrentValue[
                    DefinitionNotebookClient`Stripes`PackagePrivate`nbo$, 
                    DockedCells]}], 
                    Condition[
                    Pattern[
                    DefinitionNotebookClient`Stripes`PackagePrivate`c$, 
                    Blank[Cell]], 
                    Not[
                    FreeQ[
                    DefinitionNotebookClient`Stripes`PackagePrivate`c$, 
                    "08562d41-b72c-4f72-988b-ae8ae76cf57c"]]]]]], Appearance -> 
                   None, BoxID -> "08562d41-b72c-4f72-988b-ae8ae76cf57c", 
                   Evaluator -> Automatic, Method -> "Preemptive"], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Grid"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
           AutoDelete -> False, 
           GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             OpenerBox[
              Dynamic[
               CurrentValue[
                EvaluationCell[], {TaggingRules, "StripeOpen"}, False]], 
              Appearance -> Automatic, Enabled -> Automatic, AutoAction -> 
              False, ContinuousAction -> False], 
             TagBox[
              GridBox[{{
                 StyleBox[
                  DynamicBox[
                   ToBoxes[
                    DateString[
                    TimeZoneConvert[
                    DateObject[
                    3.8961960252183044`17.343215788118325*^9, TimeZone -> 
                    0]], {"MonthName", " ", "DayShort", ", ", "Year", " ", 
                    "Hour12Short", ":", "Minute", " ", "AMPMLowerCase"}], 
                    StandardForm], SingleEvaluation -> True, Evaluator -> 
                   "System"], FontSlant -> Italic, FontColor -> 
                  GrayLevel[0.5], FontSize -> 0.9 Inherited, StripOnInput -> 
                  False], "\"   \"", 
                 ItemBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FormNotebookStrings", "QACloudResponseSucceed"], 
                    StandardForm]], "\"\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"], 
                   LineBreakWithin -> Automatic, LineIndent -> 0, 
                   StripOnInput -> False], ItemSize -> Fit, StripOnInput -> 
                  False], 
                 ItemBox[
                  StyleBox[
                  "\"\"", LineBreakWithin -> Automatic, LineIndent -> 0, 
                   StripOnInput -> False], ItemSize -> Fit, StripOnInput -> 
                  False], "\"\"", 
                 TagBox[
                  ButtonBox[
                   TagBox[
                    PaneSelectorBox[{False -> GraphicsBox[{
                    GrayLevel[
                    NCache[
                    Rational[64, 85], 0.7529411764705882]], 
                    
                    PolygonBox[{{-0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, -0.282842712474619}, {0.282842712474619, 
                    0.42426406871192845`}, {0.42426406871192845`, 
                    0.282842712474619}}], 
                    
                    PolygonBox[{{0.42426406871192845`, -0.282842712474619}, {
                    0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, 0.282842712474619}, {-0.282842712474619, 
                    0.42426406871192845`}}]}, ImageSize -> 18, 
                    PlotRangePadding -> 0, PlotRange -> 0.7, Background -> 
                    None], True -> GraphicsBox[{
                    GrayLevel[
                    NCache[
                    Rational[128, 255], 0.5019607843137255]], 
                    
                    PolygonBox[{{-0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, -0.282842712474619}, {0.282842712474619, 
                    0.42426406871192845`}, {0.42426406871192845`, 
                    0.282842712474619}}], 
                    
                    PolygonBox[{{0.42426406871192845`, -0.282842712474619}, {
                    0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, 0.282842712474619}, {-0.282842712474619, 
                    0.42426406871192845`}}]}, ImageSize -> 18, 
                    PlotRangePadding -> 0, PlotRange -> 0.7, Background -> 
                    None]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], 
                    MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
                   With[{DefinitionNotebookClient`Stripes`PackagePrivate`nbo$ = 
                    EvaluationNotebook[]}, 
                    CurrentValue[
                    DefinitionNotebookClient`Stripes`PackagePrivate`nbo$, 
                    DockedCells] = If[
                    TrueQ[
                    MemberQ[
                    CurrentValue["ModifierKeys"], "Control"]], 
                    DeleteCases[
                    Flatten[{
                    CurrentValue[
                    DefinitionNotebookClient`Stripes`PackagePrivate`nbo$, 
                    DockedCells]}], 
                    Cell[
                    Blank[], "StripeCell", 
                    BlankNullSequence[]]], 
                    DeleteCases[
                    Flatten[{
                    CurrentValue[
                    DefinitionNotebookClient`Stripes`PackagePrivate`nbo$, 
                    DockedCells]}], 
                    Condition[
                    Pattern[
                    DefinitionNotebookClient`Stripes`PackagePrivate`c$, 
                    Blank[Cell]], 
                    Not[
                    FreeQ[
                    DefinitionNotebookClient`Stripes`PackagePrivate`c$, 
                    "08562d41-b72c-4f72-988b-ae8ae76cf57c"]]]]]], Appearance -> 
                   None, BoxID -> "08562d41-b72c-4f72-988b-ae8ae76cf57c", 
                   Evaluator -> Automatic, Method -> "Preemptive"], 
                  MouseAppearanceTag["LinkHand"]]}}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
               False, GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
              "Grid"]}, {"", 
             PaneBox[
              TagBox[
               GridBox[{{"\"\"", 
                  StyleBox[
                   TagBox[
                    GridBox[{{"\"\[FilledVerySmallSquare]\"", 
                    DynamicBox[
                    ToBoxes[
                    FEPrivate`FrontEndResource[
                    "FormNotebookStrings", "QADeployLocationStr"], 
                    StandardForm]], 
                    TemplateBox[{
                    RowBox[{"CloudObject", "[", 
                    
                    TemplateBox[{
                    "\"https://\[Ellipsis]/burbery1/Quizzes/MyQuiz100/quiz\"",
                     "https://www.wolframcloud.com/obj/burbery1/Quizzes/\
MyQuiz100/quiz"}, "HyperlinkURL"], "]"}]}, "ClickToCopy"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {Automatic, Automatic, Fit}, 
                    "Rows" -> {{Automatic}}}], "Grid"], FontColor -> 
                   GrayLevel[0.5], FontSize -> 12, StripOnInput -> False]}}, 
                GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                False, GridBoxDividers -> {
                 "Columns" -> {{None}}, "RowsIndexed" -> {-1 -> GrayLevel[
                    Rational[239, 255]]}}, 
                GridBoxItemSize -> {
                 "Columns" -> {Automatic, Fit}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {1, {}, 1}, "Rows" -> {1, {}, 2}}], "Grid"], 
              ImageMargins -> 0]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> False, 
           GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {"Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[
         TrueQ[
          CurrentValue[
           EvaluationCell[], {TaggingRules, "StripeOpen"}, False]]], 
        Alignment -> Automatic, ImageSize -> Automatic, ImageMargins -> 0, 
        BaseStyle -> {}, DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
        Baseline], Deployed -> False, StripOnInput -> False], 
      OpenerView[{
        Grid[{{
           Style[
            Dynamic[
             DateString[
              TimeZoneConvert[
               DateObject[
               3.8961960252183044`17.343215788118325*^9, TimeZone -> 0]], {
              "MonthName", " ", "DayShort", ", ", "Year", " ", "Hour12Short", 
               ":", "Minute", " ", "AMPMLowerCase"}], SingleEvaluation -> 
             True, Evaluator -> "System"], FontSlant -> Italic, FontColor -> 
            GrayLevel[0.5], FontSize -> 0.9 Inherited], "   ", 
           Item[
            Style[
             Grid[{{
                Dynamic[
                 FEPrivate`FrontEndResource[
                 "FormNotebookStrings", "QACloudResponseSucceed"]], ""}}, 
              Spacings -> 0.25, Alignment -> {Automatic, Baseline}], 
             LineBreakWithin -> Automatic, LineIndent -> 0], ItemSize -> Fit], 
           Item[
            Style["", LineBreakWithin -> Automatic, LineIndent -> 0], 
            ItemSize -> Fit], "", 
           MouseAppearance[
            Button[
             MouseAppearance[
              Mouseover[
               Graphics[{
                 GrayLevel[
                  Rational[64, 85]], 
                 
                 Polygon[{{-0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, -0.282842712474619}, {0.282842712474619, 
                  0.42426406871192845`}, {0.42426406871192845`, 
                  0.282842712474619}}], 
                 
                 Polygon[{{0.42426406871192845`, -0.282842712474619}, {
                  0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, 0.282842712474619}, {-0.282842712474619, 
                  0.42426406871192845`}}]}, ImageSize -> 18, PlotRangePadding -> 
                0, PlotRange -> 0.7, Background -> None], 
               Graphics[{
                 GrayLevel[
                  Rational[128, 255]], 
                 
                 Polygon[{{-0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, -0.282842712474619}, {0.282842712474619, 
                  0.42426406871192845`}, {0.42426406871192845`, 
                  0.282842712474619}}], 
                 
                 Polygon[{{0.42426406871192845`, -0.282842712474619}, {
                  0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, 0.282842712474619}, {-0.282842712474619, 
                  0.42426406871192845`}}]}, ImageSize -> 18, PlotRangePadding -> 
                0, PlotRange -> 0.7, Background -> None]], "LinkHand"], 
             
             With[{DefinitionNotebookClient`Stripes`PackagePrivate`nbo$ = 
               EvaluationNotebook[]}, 
              CurrentValue[
               DefinitionNotebookClient`Stripes`PackagePrivate`nbo$, 
                DockedCells] = If[
                TrueQ[
                 MemberQ[
                  CurrentValue["ModifierKeys"], "Control"]], 
                DeleteCases[
                 Flatten[{
                   CurrentValue[
                   DefinitionNotebookClient`Stripes`PackagePrivate`nbo$, 
                    DockedCells]}], 
                 Cell[
                  Blank[], "StripeCell", 
                  BlankNullSequence[]]], 
                DeleteCases[
                 Flatten[{
                   CurrentValue[
                   DefinitionNotebookClient`Stripes`PackagePrivate`nbo$, 
                    DockedCells]}], 
                 Condition[
                  Pattern[DefinitionNotebookClient`Stripes`PackagePrivate`c$, 
                   Blank[Cell]], 
                  Not[
                   FreeQ[
                   DefinitionNotebookClient`Stripes`PackagePrivate`c$, 
                    "08562d41-b72c-4f72-988b-ae8ae76cf57c"]]]]]], Appearance -> 
             None, BoxID -> "08562d41-b72c-4f72-988b-ae8ae76cf57c"], 
            "LinkHand"]}}, Alignment -> {Left, Baseline}], 
        Grid[{{"", 
           Style[
            Grid[{{"\[FilledVerySmallSquare]", 
               Dynamic[
                FEPrivate`FrontEndResource[
                "FormNotebookStrings", "QADeployLocationStr"]], 
               ClickToCopy[
                RawBoxes[
                 RowBox[{"CloudObject", "[", 
                   
                   TemplateBox[{
                    "\"https://\[Ellipsis]/burbery1/Quizzes/MyQuiz100/quiz\"",
                     "https://www.wolframcloud.com/obj/burbery1/Quizzes/\
MyQuiz100/quiz"}, "HyperlinkURL"], "]"}]]]}}, Alignment -> Left, 
             ItemSize -> {{Automatic, Automatic, Fit}, Automatic}], FontColor -> 
            GrayLevel[0.5], FontSize -> 12]}}, 
         ItemSize -> {{Automatic, Fit}, Automatic}, Alignment -> Left, 
         Dividers -> {None, {-1 -> GrayLevel[
              Rational[239, 255]]}}, Spacings -> {{1, {}, 1}, {1, {}, 2}}]}, 
       Dynamic[
        CurrentValue[
         EvaluationCell[], {TaggingRules, "StripeOpen"}, False]]]], "Text", 
     FontSize -> 12, FontColor -> GrayLevel[0.25], StripOnInput -> False]], 
   "StripeCell", CellFrameMargins -> {{20, 5}, {2, 2}}, 
   CellFrame -> {{0, 0}, {1, 0}}, CellFrameColor -> GrayLevel[0.75]]},
TaggingRules->{
 "FormNotebook" -> {
   "SubmissionOptions" -> {
     "ButtonText" -> "Submit", "ButtonTextColor" -> GrayLevel[1], 
      "ButtonTextBackground" -> 
      RGBColor[0.30980392156862746`, 0.6352941176470588, 0.796078431372549], 
      "DockedCellColor" -> GrayLevel[0.96], "DockedCellText" -> 
      "Generated Form", "DockedCellTextColor" -> GrayLevel[0.2], 
      "WholeNotebookSubmission" -> False, "ResourceCellObject" -> None, 
      "GroupSubmissionFlag" -> True, "AssessmentMethod" -> "Cloud", 
      "DeployLocation" -> 
      CloudObject[
       "https://www.wolframcloud.com/obj/burbery1/Quizzes/MyQuiz100"], 
      "QuizLocation" -> "MyQuiz100"}, "InsertBar" -> "Closed", "ToolsBar" -> 
    "Closed", "InsertHistory" -> <||>, "PreventSettingsDialog" -> False, 
    "InputAssoc" -> <|
     Inherited -> Null, "293d2a38-c380-4d0b-a154-54c774613ea9" -> Null, 
      "2eda7c40-65c5-4c85-aa8d-f52c7c0812b6" -> Null, 
      "ce61b31b-1391-41c3-a790-c4f43379a484" -> Null, 
      "51183bc7-8a3b-4661-91b3-3584ccc11c7a" -> Null, 
      "dd8e29bb-61e2-4b01-8408-1c23d2b6b89a" -> Null, 
      "b8c2e13e-e2b6-46b5-9c5f-a266fe78f247" -> Null, 
      "15dddbc4-8f18-4fec-8fa7-75690e62b3a5" -> Null, 
      "d3914ae2-31ee-4716-a403-cd99903c44b2" -> Null, 
      "eb551796-ca57-4f64-8b32-a22a4ddda3c8" -> Null|>}, "StatusMessage" -> 
  ""},
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (May 18, 2023)",
StyleDefinitions->"Wolfram/QAFormNotebook.nb",
ExpressionUUID->"64bdef31-398f-4459-a237-492cd5c4a09b"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 6543, 132, 119, "FormElementCode",ExpressionUUID->"435889d7-ce9f-4ea3-afc4-591462dfe915"],
Cell[7104, 154, 6543, 132, 119, "FormElementCode",ExpressionUUID->"9e63c3a4-af3a-412f-92b4-41cf12642fa9"],
Cell[13650, 288, 6543, 132, 119, "FormElementCode",ExpressionUUID->"45fd1e19-7d48-40f0-b860-cd28340b268a"],
Cell[20196, 422, 6543, 132, 119, "FormElementCode",ExpressionUUID->"a57c8135-5b4e-4f7f-8590-e01d8d01b5b3"],
Cell[26742, 556, 6543, 132, 119, "FormElementCode",ExpressionUUID->"9f782b08-e63f-4423-b36c-8dcbaac4c69f"],
Cell[33288, 690, 6552, 132, 119, "FormElementCode",ExpressionUUID->"1243934c-c43a-4b35-9627-ef94e34ea508"],
Cell[39843, 824, 6552, 132, 119, "FormElementCode",ExpressionUUID->"2cde0b5f-321e-4c5e-93e0-dcb6f5df34ca"],
Cell[46398, 958, 6552, 132, 119, "FormElementCode",ExpressionUUID->"a93731d2-c524-426f-bc9a-4874c6b68108"],
Cell[52953, 1092, 6552, 132, 119, "FormElementCode",ExpressionUUID->"e6cd9e38-3aa8-4c45-bfd2-1f593a535a4f"]
}
]
*)


Notebook[{

Cell[CellGroupData[{
Cell["ExactDimensionMatches", "Title",
 Deletable->False,
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.859728125977378*^9, 3.859728132200056*^9}},
 CellTags->{"Name", "TabNext", "TemplateCell", "Title"},
 CellID->863144461,ExpressionUUID->"992d1335-efd8-42d2-85a7-9d47227e5398"],

Cell["\<\
Find all physical quantities that share a set of physical dimensions\
\>", "Text",
 Deletable->False,
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.85972813574012*^9, 3.859728151310217*^9}},
 CellTags->{"DefaultContent", "Description", "TabNext", "TemplateCell"},
 CellID->660820806,ExpressionUUID->"208de5c2-95e0-491d-954a-dd6f4d057d66"],

Cell[CellGroupData[{

Cell[TextData[{
 "Definition",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Function", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Define your function using the name you gave in the Title line \
above. You can add input cells and extra code to define additional input \
cases or prerequisites. All definitions, including dependencies, will be \
included in the generated resource function.\n\nThis section should be \
evaluated before creating the Examples section below.", "MoreInfoText"], 
        Background -> GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> 
        GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoFunction"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "966afed3-4c28-4b98-8953-426db0937498"]
}], "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Function"},
 DefaultNewCellStyle->"Input",
 CellTags->{"Definition", "Function", "TemplateCellGroup"},
 CellID->292731158,ExpressionUUID->"1571a286-06df-4bb0-ba2e-7639fcf4a286"],

Cell[BoxData[
 RowBox[{"ClearAll", "[", "ExactDimensionMatches", "]"}]], "Code",
 TaggingRules->{},
 CellChangeTimes->{{3.8597283785230627`*^9, 3.859728417157405*^9}, {
   3.8597286306353593`*^9, 3.8597286385800223`*^9}, {3.859728703387453*^9, 
   3.859728716353443*^9}, {3.8597303917763844`*^9, 3.8597304139828653`*^9}, {
   3.8597304493352113`*^9, 3.859730487422003*^9}, {3.859730592920878*^9, 
   3.859730604180175*^9}, {3.8597306494755063`*^9, 3.8597306565747347`*^9}, {
   3.8597307505356197`*^9, 3.8597309126149735`*^9}, {3.859732552088304*^9, 
   3.8597325531672926`*^9}, {3.8597325869986897`*^9, 
   3.8597327601190248`*^9}, {3.8597328047283096`*^9, 
   3.8597328104213533`*^9}, {3.8597328892012873`*^9, 
   3.8597329280086575`*^9}, {3.895938512816112*^9, 3.8959385571094227`*^9}, {
   3.8959386574649363`*^9, 3.895938678802745*^9}, {3.895938741180122*^9, 
   3.895938826261961*^9}, {3.895938897009237*^9, 3.8959389097115974`*^9}, {
   3.895939116008311*^9, 3.8959391306423993`*^9}, {3.895939176539574*^9, 
   3.8959391873819485`*^9}, {3.8959395134493303`*^9, 
   3.8959395266310177`*^9}, {3.895939576442737*^9, 3.8959395798725166`*^9}, {
   3.895939764704582*^9, 3.8959397736298285`*^9}, {3.8959398177977905`*^9, 
   3.8959398471724606`*^9}, {3.8959402853986073`*^9, 
   3.8959403288150597`*^9}, {3.8959407849268656`*^9, 
   3.8959410349651966`*^9}, {3.8959411209898663`*^9, 3.895941139411333*^9}, {
   3.89594351599197*^9, 3.8959435379831934`*^9}, {3.895957904111412*^9, 
   3.895957931128236*^9}, {3.895957971310895*^9, 3.8959579721704364`*^9}, {
   3.8959580129634027`*^9, 3.895958059644653*^9}, 3.8966148882258987`*^9},
 CellTags->"DefaultContent",
 CellLabel->"In[70]:=",
 CellID->876320555,ExpressionUUID->"55a0ca5a-d241-406b-91fb-9cfbc3318b03"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"ExactDimensionMatches", "::", "usage"}], "=", 
   "\"\<ExactDimensionMatches[{{\!\(\*StyleBox[\"dimensionname1\", \"TI\"]\),\
\!\(\*StyleBox[\"dimensionpower1\", \
\"TI\"]\)},{\!\(\*StyleBox[\"dimensionname2\", \
\"TI\"]\),\!\(\*StyleBox[\"dimensionpower2\", \"TI\"]\)},\[Ellipsis]}] finds \
all physical quantity entities that have the dimensions \
\!\(\*FormBox[SuperscriptBox[StyleBox[\"dimensionname1\", \"TI\"], \
StyleBox[\"dimensionpower1\", \
\"TI\"]],TraditionalForm]\)*\!\(\*FormBox[SuperscriptBox[StyleBox[\"\
dimensionname2\", \"TI\"], StyleBox[\"dimensionpower2\", \
\"TI\"]],TraditionalForm]\)* ... and so on. \
ExactDimensionMatches[<|\!\(\*StyleBox[\"dimensionname1\", \
\"TI\"]\)->\!\(\*StyleBox[\"dimensionpower1\", \
\"TI\"]\),\!\(\*StyleBox[\"dimensionname2\", \
\"TI\"]\)->\!\(\*StyleBox[\"dimensionpower2\", \"TI\"]\),\[Ellipsis]|>] finds \
all physical quantity entities that have the dimensions \
\!\(\*FormBox[SuperscriptBox[StyleBox[\"dimensionname1\", \"TI\"], \
StyleBox[\"dimensionpower1\", \
\"TI\"]],TraditionalForm]\)*\!\(\*FormBox[SuperscriptBox[StyleBox[\"\
dimensionname2\", \"TI\"], StyleBox[\"dimensionpower2\", \
\"TI\"]],TraditionalForm]\)* ... and so on. \
ExactDimensionMatches[\!\(\*StyleBox[\"quantity\", \"TI\"]\)] finds all \
physical quantities with the same dimension as \!\(\*StyleBox[\"quantity\", \
\"TI\"]\). ExactDimensionMatches[\\!\\(\\*StyleBox[\\\"dimensionspec\\\", \
\\\"TI\\\"]\\),\\!\\(\\*StyleBox[\\\"property\\\", \\\"TI\\\"]\\)] computes \
\\!\\(\\*StyleBox[\\\"property\\\", \\\"TI\\\"]\\) for physical dimension \
entities that match \\!\\(\\*StyleBox[\\\"dimensionspec\\\", \\\"TI\\\"]\\). \
ExactDimensionMatches[\!\(\*StyleBox[\"dimensionspec\", \
\"TI\"]\),\!\(\*StyleBox[\"property\", \"TI\"]\)] \
ExactDimensionMatches[\!\(\*StyleBox[\"dimensionspec\", \
\"TI\"]\),\!\(\*StyleBox[\"property\", \"TI\"]\)]\>\""}], ";"}]], "Code",
 TaggingRules->{},
 InitializationCell->False,
 CellChangeTimes->{{3.8597283785230627`*^9, 3.859728417157405*^9}, {
   3.8597286306353593`*^9, 3.8597286385800223`*^9}, {3.859728703387453*^9, 
   3.859728716353443*^9}, {3.8597303917763844`*^9, 3.8597304139828653`*^9}, {
   3.8597304493352113`*^9, 3.859730487422003*^9}, {3.859730592920878*^9, 
   3.859730604180175*^9}, {3.8597306494755063`*^9, 3.8597306565747347`*^9}, {
   3.8597307505356197`*^9, 3.8597309126149735`*^9}, {3.859732552088304*^9, 
   3.8597325531672926`*^9}, {3.8597325869986897`*^9, 
   3.8597327601190248`*^9}, {3.8597328047283096`*^9, 
   3.8597328104213533`*^9}, {3.8597328892012873`*^9, 
   3.8597329280086575`*^9}, {3.895938512816112*^9, 3.8959385571094227`*^9}, {
   3.8959386574649363`*^9, 3.895938678802745*^9}, {3.895938741180122*^9, 
   3.895938826261961*^9}, {3.895938897009237*^9, 3.8959389097115974`*^9}, {
   3.895939116008311*^9, 3.8959391306423993`*^9}, {3.895939176539574*^9, 
   3.8959391873819485`*^9}, {3.8959395134493303`*^9, 
   3.8959395266310177`*^9}, {3.895939576442737*^9, 3.8959395798725166`*^9}, {
   3.895939764704582*^9, 3.8959397736298285`*^9}, {3.8959398177977905`*^9, 
   3.8959398471724606`*^9}, {3.8959402853986073`*^9, 
   3.8959403288150597`*^9}, {3.8959407849268656`*^9, 
   3.8959410349651966`*^9}, {3.8959411209898663`*^9, 3.895941139411333*^9}, {
   3.89594351599197*^9, 3.8959435379831934`*^9}, {3.895957904111412*^9, 
   3.895957931128236*^9}, {3.895957971310895*^9, 3.8959579721704364`*^9}, {
   3.8959580129634027`*^9, 3.895958059644653*^9}, {3.8966148882258987`*^9, 
   3.896614891916271*^9}, {3.8966153422368402`*^9, 3.8966153696893625`*^9}, 
   3.8966159253582826`*^9, 3.8966159661138973`*^9, {3.896616001132474*^9, 
   3.896616021138197*^9}, {3.8966160515543985`*^9, 3.8966161141586294`*^9}, {
   3.8966162444161396`*^9, 3.896616290719019*^9}, 3.8966163243856907`*^9, {
   3.896616431279584*^9, 3.896616432953131*^9}, 3.8966164739305964`*^9},
 CellTags->"DefaultContent",
 CellLabel->"In[78]:=",
 CellID->461229295,ExpressionUUID->"67b99ef4-1910-486a-900b-0b34145d8895"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"ExactDimensionMatches", "[", 
     RowBox[{"dimensions_", "?", 
      RowBox[{"(", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "l", "}"}], ",", 
         RowBox[{"AssociationQ", "[", "l", "]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ")"}]}], "]"}], ":=", 
    RowBox[{"EntityValue", "[", 
     RowBox[{
      RowBox[{"EntityClass", "[", 
       RowBox[{"\"\<PhysicalQuantity\>\"", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<Dimensions\>\"", "->", 
          RowBox[{"ContainsExactly", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"Transpose", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"Keys", "[", "#", "]"}], "/.", 
                 RowBox[{"{", 
                  RowBox[{"x_", ":>", 
                   RowBox[{
                    RowBox[{"StringJoin", "[", 
                    RowBox[{"x", ",", "\"\<Unit\>\""}], "]"}], "/;", 
                    RowBox[{"MemberQ", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "\"\<Time\>\"", ",", "\"\<Mass\>\"", ",", 
                    "\"\<Length\>\"", ",", "\"\<ElectricCurrent\>\"", ",", 
                    "\"\<Temperature\>\"", ",", "\"\<Amount\>\"", ",", 
                    "\"\<LuminousIntensity\>\""}], "}"}], ",", "x"}], 
                    "]"}]}]}], "}"}]}], ",", 
                RowBox[{"Values", "[", "#", "]"}]}], "}"}], "]"}], "&"}], "@", 
            RowBox[{
             RowBox[{"Select", "[", 
              RowBox[{
               RowBox[{"#", "!=", "0"}], "&"}], "]"}], "[", "dimensions", 
             "]"}]}], "]"}]}], "}"}]}], "]"}], ",", "\"\<Entities\>\""}], 
     "]"}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"ExactDimensionMatches", "[", 
     RowBox[{
      RowBox[{"dimensions_", "?", 
       RowBox[{"(", 
        RowBox[{"Function", "[", 
         RowBox[{
          RowBox[{"{", "l", "}"}], ",", 
          RowBox[{"MatchQ", "[", 
           RowBox[{"l", ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{
                RowBox[{"_", "?", "StringQ"}], ",", 
                RowBox[{"_", "?", "RealValuedNumericQ"}]}], "}"}], ".."}], 
             "}"}]}], "]"}], ",", 
          RowBox[{"{", "}"}]}], "]"}], ")"}]}], ",", "\n", 
      RowBox[{"Optional", "[", 
       RowBox[{"property_", ",", "\"\<Entities\>\""}], "]"}], ",", 
      RowBox[{"Optional", "[", 
       RowBox[{"form_", ",", "\"\<List\>\""}], "]"}]}], "]"}], ":=", "\n", 
    RowBox[{"EntityValue", "[", 
     RowBox[{
      RowBox[{"FilteredEntityClass", "[", 
       RowBox[{"\"\<PhysicalQuantity\>\"", ",", "\n", 
        RowBox[{"EntityFunction", "[", 
         RowBox[{"physicalQuantityDimension", ",", 
          RowBox[{
           RowBox[{"ContainsExactly", "[", 
            RowBox[{"MapAt", "[", 
             RowBox[{"Rationalize", ",", 
              RowBox[{"Cases", "[", 
               RowBox[{"dimensions", ",", 
                RowBox[{"{", 
                 RowBox[{"_", ",", 
                  RowBox[{"Except", "[", "0", "]"}]}], "}"}]}], "]"}], ",", 
              "\n", 
              RowBox[{"{", 
               RowBox[{"All", ",", "2"}], "}"}]}], "]"}], "]"}], "[", 
           RowBox[{
           "physicalQuantityDimension", "[", "\"\<Dimensions\>\"", "]"}], 
           "]"}]}], "]"}]}], "]"}], ",", 
      RowBox[{"Sequence", "@@", 
       RowBox[{"{", 
        RowBox[{"property", ",", 
         RowBox[{"Which", "[", 
          RowBox[{
           RowBox[{"form", "===", "\"\<List\>\""}], ",", "Nothing", ",", 
           RowBox[{"form", "=!=", "\"\<List\>\""}], ",", "form"}], "]"}]}], 
        "}"}]}]}], "]"}]}], "\n"}]}]], "Code",
 TaggingRules->{},
 CellChangeTimes->{{3.8597283785230627`*^9, 3.859728417157405*^9}, {
   3.8597286306353593`*^9, 3.8597286385800223`*^9}, {3.859728703387453*^9, 
   3.859728716353443*^9}, {3.8597303917763844`*^9, 3.8597304139828653`*^9}, {
   3.8597304493352113`*^9, 3.859730487422003*^9}, {3.859730592920878*^9, 
   3.859730604180175*^9}, {3.8597306494755063`*^9, 3.8597306565747347`*^9}, {
   3.8597307505356197`*^9, 3.8597309126149735`*^9}, {3.859732552088304*^9, 
   3.8597325531672926`*^9}, {3.8597325869986897`*^9, 
   3.8597327601190248`*^9}, {3.8597328047283096`*^9, 
   3.8597328104213533`*^9}, {3.8597328892012873`*^9, 
   3.8597329280086575`*^9}, {3.895938512816112*^9, 3.8959385571094227`*^9}, {
   3.8959386574649363`*^9, 3.895938678802745*^9}, {3.895938741180122*^9, 
   3.895938826261961*^9}, {3.895938897009237*^9, 3.8959389097115974`*^9}, {
   3.895939116008311*^9, 3.8959391306423993`*^9}, {3.895939176539574*^9, 
   3.8959391873819485`*^9}, {3.8959395134493303`*^9, 
   3.8959395266310177`*^9}, {3.895939576442737*^9, 3.8959395798725166`*^9}, {
   3.895939764704582*^9, 3.8959397736298285`*^9}, {3.8959398177977905`*^9, 
   3.8959398471724606`*^9}, {3.8959402853986073`*^9, 
   3.8959403288150597`*^9}, {3.8959407849268656`*^9, 
   3.8959410349651966`*^9}, {3.8959411209898663`*^9, 3.895941139411333*^9}, {
   3.89594351599197*^9, 3.8959435379831934`*^9}, {3.895957904111412*^9, 
   3.895957931128236*^9}, {3.895957971310895*^9, 3.8959579721704364`*^9}, {
   3.8959580129634027`*^9, 3.895958059644653*^9}, {3.8966148882258987`*^9, 
   3.896614891916271*^9}, {3.8966150232585754`*^9, 3.896615033478524*^9}, {
   3.89661509395923*^9, 3.8966151700272913`*^9}, 3.896615240560953*^9},
 CellTags->"DefaultContent",
 CellLabel->"In[72]:=",
 CellID->36026091,ExpressionUUID->"4354d2b3-c5d4-4f61-9cb7-9616b5f505e0"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"ExactDimensionMatches", "[", 
    RowBox[{
     RowBox[{"dimensions_", "?", 
      RowBox[{"(", 
       RowBox[{"Function", "[", 
        RowBox[{
         RowBox[{"{", "l", "}"}], ",", 
         RowBox[{"AssociationQ", "[", "l", "]"}], ",", 
         RowBox[{"{", "}"}]}], "]"}], ")"}]}], ",", 
     RowBox[{"Optional", "[", 
      RowBox[{"property_", ",", "\"\<Entities\>\""}], "]"}], ",", 
     RowBox[{"Optional", "[", 
      RowBox[{"form_", ",", "\"\<List\>\""}], "]"}]}], "]"}], ":=", "\n", 
   RowBox[{"ExactDimensionMatches", "[", 
    RowBox[{
     RowBox[{"Transpose", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{
          RowBox[{"Keys", "[", "#", "]"}], ",", 
          RowBox[{"Values", "[", "#", "]"}]}], "}"}], "&"}], "[", 
       "dimensions", "]"}], "]"}], ",", "property", ",", "form"}], "]"}]}], 
  RowBox[{"(*", 
   RowBox[{
   "convert", " ", "association", " ", "to", " ", "list", " ", "and", " ", 
    "give", " ", "as", " ", "input"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", "\[IndentingNewLine]", 
   RowBox[{"EntityValue", "[", 
    RowBox[{
     RowBox[{"FilteredEntityClass", "[", 
      RowBox[{"\"\<PhysicalQuantity\>\"", ",", 
       RowBox[{"\"\<Dimensions\>\"", "->", 
        RowBox[{"ContainsExactly", "[", 
         RowBox[{"Cases", "[", 
          RowBox[{"dimensions", ",", 
           RowBox[{"{", 
            RowBox[{"_", ",", 
             RowBox[{"Except", "[", "0", "]"}]}], "}"}]}], "]"}], "]"}]}]}], 
      "]"}], ",", "\"\<Entities\>\""}], "]"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ExactDimensionMatches", "[", 
   RowBox[{
    RowBox[{"unit_", "?", 
     RowBox[{"(", 
      RowBox[{"Function", "[", 
       RowBox[{
        RowBox[{"{", "l", "}"}], ",", 
        RowBox[{"QuantityQ", "[", "l", "]"}], ",", 
        RowBox[{"{", "}"}]}], "]"}], ")"}]}], ",", 
    RowBox[{"Optional", "[", 
     RowBox[{"property_", ",", "\"\<Entities\>\""}], "]"}], ",", 
    RowBox[{"Optional", "[", 
     RowBox[{"form_", ",", "\"\<List\>\""}], "]"}]}], "]"}], ":=", "\n", 
  RowBox[{"ExactDimensionMatches", "[", 
   RowBox[{
    RowBox[{"UnitDimensions", "[", "unit", "]"}], ",", "property", ",", 
    "form"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"ExactDimensionMatches", "[", "args___", "]"}], ":=", 
  RowBox[{"Null", "/;", 
   RowBox[{"CheckArguments", "[", 
    RowBox[{
     RowBox[{"ExactDimensionMatches", "[", "args", "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "3"}], "}"}]}], "]"}]}]}]}], "Code",
 TaggingRules->{},
 CellChangeTimes->CompressedData["
1:eJwdzVsoQwEAh/HThlEOGZPGzG1m1NzbLDWrkXJbS26Z6yGKKOJBMnJJE3uy
J5JLKZQkDyNC3haNWUMKEbYziZTkdv57+Po9ftENHdomFkEQMUzwZUfz59in
VT1+Iq8LxutSWyQ0TJ0KoVczLYYtJQYJjHN8fsH5rr0fSJoTWZeM/oNuH3je
KwiBv4cjPFgpSw6HCoobAS2xVjG8XgvOho1nLL8r/KtEHtUftSQkT9ixUFNs
SoDmviIJfOuMT4d0HiGHJgHf/OzjVlH6hT14cCO1wND1i2M4dbhkh9/1+bdw
pSDKCVuOtlyQp9Z7OxnHJ0s5MFUdREJa3hYAnXVSGSxMtcnhY2KAEi67+jy+
GqbL4KR4sxzqx7J00DL8UAep/VUT/Azhz8C7ZYEd3t/VfMDvVSHhYlyUtLOg
fHcgiWbU9iilcN3ITntnHOJTmfDyrVUBZd0jHtNss0r4N9edC40Kzk+6r1sV
pu33mJP3RGYwcjXJgZC9sRsKq62zEbBgrjwaUjs8EZyo0CXBpe3RFPgPPTsS
sg==
  "],
 CellTags->"DefaultContent",
 CellLabel->"In[73]:=",
 CellID->63410133,ExpressionUUID->"4ccc38a8-3277-4328-8e48-4f1d6d3fb5f2"],

Cell["\<\
I changed several things about the definition. I added a usage message. I \
also added a CheckArguments. I also added support for Quantity inputs. I also \
added a new definition that makes a recursive call for Associations. I \
replaced EntityList with EntityValue and added an option to specify a \
property instead. I added a check with RealValuedNumericQ for 13.3. I guess \
I'll have to wait to publish it.\
\>", "AuthorComment",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      TemplateBox[{
        StyleBox[
        "\"burbery1@marshall.edu\"", ShowStringCharacters -> False, 
         StripOnInput -> False], 3.8959407159676991`17.343187328813148*^9}, 
       "CommentCellLabelTemplate"]], Background -> None]}, {None, None}},
 CellChangeTimes->{{3.8959407171757894`*^9, 3.895940723875411*^9}, 
   3.895940780673694*^9, {3.895941038445817*^9, 3.8959410868257294`*^9}, {
   3.8959411426287975`*^9, 3.895941166493742*^9}, {3.8959431051275625`*^9, 
   3.8959431147991457`*^9}, {3.895958066788058*^9, 3.8959580672770557`*^9}},
 CellTags->{"AuthorComment", "CommentCell"},
 CellID->242089217,ExpressionUUID->"e394cdaf-34ac-46ab-ae6b-02a1fe2090fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Documentation", "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Documentation"},
 CellTags->{"Documentation", "TemplateSection"},
 CellID->337507785,ExpressionUUID->"3d8627dd-0a52-4792-a6e3-a11593372e98"],

Cell[CellGroupData[{

Cell[TextData[{
 "Usage",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Usage", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Document input usage cases by first typing an input structure, \
then pressing ", 
           Cell[
            BoxData[
             StyleBox[
              DynamicBox[
               ToBoxes[
                
                If[$OperatingSystem === "MacOSX", "\[ReturnKey]", 
                 "\[EnterKey]"], StandardForm], SingleEvaluation -> True, 
               Evaluator -> "System"], ShowStringCharacters -> False]]], 
           
           " to add a brief explanation of the function\[CloseCurlyQuote]s \
behavior for that structure. Pressing ", 
           Cell[
            BoxData[
             StyleBox[
              DynamicBox[
               ToBoxes[
                
                If[$OperatingSystem === "MacOSX", "\[ReturnKey]", 
                 "\[EnterKey]"], StandardForm], SingleEvaluation -> True, 
               Evaluator -> "System"], ShowStringCharacters -> False]]], 
           " repeatedly will create new cases as needed. Every input usage \
case defined above should be demonstrated explicitly here.\n\nSee existing \
documentation pages for examples."}], "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoUsage"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "bb2dfb08-8069-46be-ba5a-26c43706166c"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Usage"},
 DefaultNewCellStyle->{"UsageInputs", FontFamily -> "Source Sans Pro"},
 CellTags->{"TemplateCellGroup", "Usage"},
 CellID->38054786,ExpressionUUID->"7590447d-95a0-4c15-b154-7f7fcb6ff8ba"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      StyleBox["dimensionname1", "TI"], ",", 
      StyleBox["dimensionpower1", "TI"]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      StyleBox["dimensionname2", "TI"], ",", 
      StyleBox["dimensionpower2", "TI"]}], "}"}], ",", "\[Ellipsis]"}], "}"}],
   "]"}]], "UsageInputs",
 TaggingRules->{},
 CellChangeTimes->{{3.859728431793954*^9, 3.859728442349612*^9}, 
   3.859908085408732*^9, {3.8940422775595074`*^9, 3.894042277682186*^9}, {
   3.895943441689497*^9, 3.895943456180914*^9}, {3.895943548794731*^9, 
   3.895943551532205*^9}},
 FontFamily->"Source Sans Pro",
 CellTags->{"DefaultContent", "TabNext"},
 CellID->67839508,ExpressionUUID->"fd5b00fb-7296-46ae-aad9-af6cbbe84337"],

Cell[TextData[{
 "finds all physical quantity entities that have the dimensions ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["dimensionname1", "TI"], 
    StyleBox["dimensionpower1", "TI"]], TraditionalForm]],ExpressionUUID->
  "cb90f0ee-ce97-4b23-b2da-7a2498266c56"],
 "*",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["dimensionname2", "TI"], 
    StyleBox["dimensionpower2", "TI"]], TraditionalForm]],ExpressionUUID->
  "c2db6038-5258-4eb4-a511-11f7a24b21aa"],
 "* ... and so on ."
}], "UsageDescription",
 TaggingRules->{},
 CellChangeTimes->{{3.859728447895217*^9, 3.859728472926152*^9}, {
   3.859728747780572*^9, 3.859728750167944*^9}, {3.8599081898230247`*^9, 
   3.8599082143574133`*^9}, 3.894042332489912*^9, {3.895936655309702*^9, 
   3.895936655615513*^9}, {3.895943471085455*^9, 3.895943501265984*^9}, {
   3.8966163446408777`*^9, 3.8966164077012844`*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->746063541,ExpressionUUID->"ad9a0a1f-ed6d-4a65-9081-d5d79159f08c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{
     StyleBox["dimensionname1", "TI"], "->", 
     StyleBox["dimensionpower1", "TI"]}], ",", 
    RowBox[{
     StyleBox["dimensionname2", "TI"], "->", 
     StyleBox["dimensionpower2", "TI"]}], ",", "\[Ellipsis]"}], "|>"}], 
  "]"}]], "UsageInputs",
 TaggingRules->{},
 CellChangeTimes->{{3.859728431793954*^9, 3.859728442349612*^9}, {
  3.8597287335194654`*^9, 3.8597287339995184`*^9}, {3.859908090933958*^9, 
  3.859908116808447*^9}, {3.894042279073943*^9, 3.894042279167719*^9}, {
  3.8959435658995967`*^9, 3.895943583285299*^9}},
 FontFamily->"Source Sans Pro",
 CellTags->{"DefaultContent", "TabNext"},
 CellID->556065507,ExpressionUUID->"b144a103-a954-4c75-83ae-bef53ba4ff57"],

Cell[TextData[{
 "finds all physical quantity entities that have the dimensions ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["dimensionname1", "TI"], 
    StyleBox["dimensionpower1", "TI"]], TraditionalForm]],ExpressionUUID->
  "585d93ab-9454-4747-bb1a-66179aca3f9a"],
 "*",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["dimensionname2", "TI"], 
    StyleBox["dimensionpower2", "TI"]], TraditionalForm]],ExpressionUUID->
  "eb80aec7-00f6-465d-b5b4-6f775b02dbb4"],
 "* ... and so on ."
}], "UsageDescription",
 TaggingRules->{},
 CellChangeTimes->{{3.859728447895217*^9, 3.859728472926152*^9}, {
   3.859728738455164*^9, 3.8597287649587555`*^9}, {3.8599081574617243`*^9, 
   3.8599081759328814`*^9}, {3.8959435984853616`*^9, 3.895943680847926*^9}, 
   3.896616417687084*^9},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->41681685,ExpressionUUID->"4118ed6c-3a87-4502-95ab-8310e6a44cb1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  StyleBox["quantity", "TI"], "]"}]], "UsageInputs",
 TaggingRules->{},
 CellChangeTimes->{{3.859728431793954*^9, 3.859728442349612*^9}, {
  3.8597287335194654`*^9, 3.8597287339995184`*^9}, {3.859908090933958*^9, 
  3.859908116808447*^9}, {3.894042279073943*^9, 3.894042279167719*^9}, {
  3.895941202762395*^9, 3.895941204034844*^9}},
 FontFamily->"Source Sans Pro",
 CellTags->{"DefaultContent", "TabNext"},
 CellID->450533844,ExpressionUUID->"a9b7247c-ea7d-4ce6-8224-ee118643a22b"],

Cell[TextData[{
 "finds all physical quantities with the same dimension as ",
 Cell[BoxData[
  StyleBox["quantity", "TI"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "b90c17ad-a804-4aeb-a910-2b42d5bdec44"]
}], "UsageDescription",
 TaggingRules->{},
 CellChangeTimes->{{3.859728447895217*^9, 3.859728472926152*^9}, {
  3.859728738455164*^9, 3.8597287649587555`*^9}, {3.8599081574617243`*^9, 
  3.8599081759328814`*^9}, {3.8959412166737137`*^9, 3.895941221112141*^9}, {
  3.8966161225643015`*^9, 3.8966161256919513`*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->546967757,ExpressionUUID->"47030f47-7bda-4495-a7a8-38e9a2b86876"]
}, Open  ]],

Cell["This is new.", "AuthorComment",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      TemplateBox[{
        StyleBox[
        "\"burbery1@marshall.edu\"", ShowStringCharacters -> False, 
         StripOnInput -> False], 3.8959436974526505`17.34318766116984*^9}, 
       "CommentCellLabelTemplate"]], Background -> None]}, {None, None}},
 CellChangeTimes->{{3.8959436986431494`*^9, 3.8959437007036877`*^9}},
 CellTags->{"AuthorComment", "CommentCell"},
 CellID->277191277,ExpressionUUID->"ee7b4424-b8fc-434d-9306-a79f64d4562b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{
   StyleBox["dimensionsspec", "TI"], ",", 
   StyleBox["property", "TI"]}], "]"}]], "UsageInputs",
 TaggingRules->{},
 CellChangeTimes->{{3.859728431793954*^9, 3.859728442349612*^9}, {
   3.8597287335194654`*^9, 3.8597287339995184`*^9}, {3.859908090933958*^9, 
   3.859908116808447*^9}, {3.894042279073943*^9, 3.894042279167719*^9}, {
   3.895941202762395*^9, 3.8959412390294256`*^9}, {3.895943120629842*^9, 
   3.895943125056789*^9}, {3.896616498760342*^9, 3.896616499691284*^9}, 
   3.89661656026412*^9},
 FontFamily->"Source Sans Pro",
 CellTags->{"DefaultContent", "TabNext"},
 CellID->232954172,ExpressionUUID->"5d69c104-52c7-4f16-959b-d232f8fe553d"],

Cell[TextData[{
 "gives the list of values of the specified ",
 Cell[BoxData[
  StyleBox["property", "TI"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "ad02c149-1969-4645-b7a5-bb94247b64aa"],
 " for each of the physical quantities that match ",
 Cell[BoxData[
  StyleBox["dimensionsspec", "TI"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "deb6c06b-238d-4ac7-85ee-199bb3f03396"]
}], "UsageDescription",
 TaggingRules->{},
 CellChangeTimes->{{3.859728447895217*^9, 3.859728472926152*^9}, {
  3.859728738455164*^9, 3.8597287649587555`*^9}, {3.8599081574617243`*^9, 
  3.8599081759328814`*^9}, {3.8959412166737137`*^9, 3.895941261204381*^9}, {
  3.89594312859112*^9, 3.895943131089326*^9}, {3.8966164898868384`*^9, 
  3.896616570539112*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->479223188,ExpressionUUID->"1c85d429-f398-4090-abe9-8b452f80d580"]
}, Open  ]],

Cell["This is new.", "AuthorComment",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      TemplateBox[{
        StyleBox[
        "\"burbery1@marshall.edu\"", ShowStringCharacters -> False, 
         StripOnInput -> False], 3.8959437082742854`17.343187662376163*^9}, 
       "CommentCellLabelTemplate"]], Background -> None]}, {None, None}},
 CellChangeTimes->{{3.895943709217106*^9, 3.8959437128742456`*^9}},
 CellTags->{"AuthorComment", "CommentCell"},
 CellID->55676197,ExpressionUUID->"ffeef88c-522d-47ce-8189-c7fa09eccd3a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Details & Options",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Notes", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Give a detailed explanation of how the function is used and \
configured (e.g. acceptable input types, result formats, options \
specifications, background information). This section may include multiple \
cells, bullet lists, tables, hyperlinks and additional styles/structures as \
needed.\n\nAdd any other information that may be relevant, such as when the \
function was first discovered or how and why it is used within a given field. \
Include all relevant background or contextual information related to the \
function, its development, and its usage.", "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoNotes"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "fcb136f6-4abe-4359-afae-c1041d607c2f"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Notes"},
 DefaultNewCellStyle->"Notes",
 CellTags->{"Details & Options", "Notes", "TemplateCellGroup"},
 CellID->447261062,ExpressionUUID->"a09f1466-56d9-49ab-9557-a1860fb0f253"],

Cell["\<\
Is there a reason why this function cannot accept generic units (e.g. Volts) \
and convert to SI base units automatically? It might make this function more \
useful.\
\>", "ReviewerComment",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "Signature" -> 
   "OEM6eJxLYywWcMlMzyxJzAnOTM9LLCktSnVk1w1mCaksSA3mdc3JySwoyUx2Li0qS9UN5gTTfo\
m5qcGcxanJBUamZtmGusG8cK1gXQJ++XkuqSWpRbmZeZnFQN1AFR6JxRmZeem+qSUZ+\
SnBbMEejkC9usGMQU4Kan/ZTzUu61lwm0+3l0H/441Hz/12P/\
mopKTyNWfq9TJhN6CqYCeFzAcP7ga/bm5gTn55LVH30GGOjkDjDquKGwpaStouboL6usGCQanJ+\
WWpRZUBiUVAFwLtd2YEAFoXU7s="},
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      TemplateBox[{
        StyleBox[
         TemplateBox[{"\"pacoj@wolfram.com\""}, 
          "ReviewerCommentLabelTemplate"], ShowStringCharacters -> False, 
         StripOnInput -> False], 3.8959370079108369`17.343186915462553*^9}, 
       "CommentCellLabelTemplate"]], Background -> None]}, {None, None}},
 CellChangeTimes->{{3.8959371630421877`*^9, 3.8959372069637437`*^9}},
 CellTags->{"CommentCell", "ReviewerComment"},
 CellID->181827104,ExpressionUUID->"551ed484-6a7e-4e35-bf5d-e3b101264901"],

Cell["I added support for this.", "AuthorComment",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      TemplateBox[{
        StyleBox[
        "\"burbery1@marshall.edu\"", ShowStringCharacters -> False, 
         StripOnInput -> False], 3.8959411828573999`17.343187380859014*^9}, 
       "CommentCellLabelTemplate"]], Background -> None]}, {None, None}},
 CellChangeTimes->{{3.8959411836922817`*^9, 3.895941188910182*^9}},
 CellTags->{"AuthorComment", "CommentCell"},
 CellID->349612,ExpressionUUID->"f3fde39c-2974-46c5-add1-cb109b69f576"],

Cell["\<\
Please fill out RelatedSymbols and RelatedResources when you submit a new \
function. I have added some below\
\>", "ReviewerComment",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "Signature" -> 
   "OEM6eJxLYywWcMlMzyxJzAnOTM9LLCktSnVk1w1mCaksSA3mdc3JySwoyUx2Li0qS9UN5gTTfo\
m5qcGcxanJBUamZtmGusG8cK1gXQJ++XkuqSWpRbmZeZnFQN1AFR6JxRmZeem+qSUZ+\
SnBbMEejkC9usGMQU4KQsIOt8LFJjjeWGMdM99Tb5Lg8isGtv6eUl91igS1K/\
13AVUFOymwLlWJf3Np1+tIO/al5jPP2FZ9PLvuTN0Nke2K+\
bXXLXbt1w0WDEpNzi9LLaoMSCwCuhBovzMjAEZPUng="},
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      TemplateBox[{
        StyleBox[
         TemplateBox[{"\"pacoj@wolfram.com\""}, 
          "ReviewerCommentLabelTemplate"], ShowStringCharacters -> False, 
         StripOnInput -> False], 3.8959371363478089`17.343186929779897*^9}, 
       "CommentCellLabelTemplate"]], Background -> None]}, {None, None}},
 CellChangeTimes->{{3.895937136905587*^9, 3.895937160960001*^9}},
 CellTags->{"CommentCell", "ReviewerComment"},
 CellID->180240227,ExpressionUUID->"a03d1a55-9045-4156-8f67-4c243a951498"],

Cell["\<\
I added two examples, one for ResourceSymbols and 1 for RelatedResources.\
\>", "AuthorComment",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      TemplateBox[{
        StyleBox[
        "\"burbery1@marshall.edu\"", ShowStringCharacters -> False, 
         StripOnInput -> False], 3.8959437216310604`17.343187663865088*^9}, 
       "CommentCellLabelTemplate"]], Background -> None]}, {None, None}},
 CellChangeTimes->{{3.895943722736272*^9, 3.89594374011718*^9}},
 CellTags->{"AuthorComment", "CommentCell"},
 CellID->474986450,ExpressionUUID->"35426ae6-80fd-4435-8b22-a7f0d087fe1e"],

Cell[TextData[{
 "The ",
 Cell[BoxData[
  StyleBox["array", "TI"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "5574be87-dd8b-4923-b844-20725b18a691"],
 " input should be a list of pairs where the first part is the physical \
dimension, for example \"LengthUnit\", and the second part is the power that \
the physical dimension is raised to."
}], "Notes",
 TaggingRules->{},
 CellChangeTimes->{{3.859728839138297*^9, 3.85972890023685*^9}, {
  3.859908381464984*^9, 3.859908395218628*^9}, {3.8959366713476825`*^9, 
  3.8959367096705093`*^9}},
 CellID->106738823,ExpressionUUID->"724cb8b1-a760-45bd-a93d-8c055c592395"],

Cell["\<\
When the input is an association, basic unit names are specified as keys and \
powers are the corresponding values.\
\>", "Notes",
 TaggingRules->{},
 CellChangeTimes->{{3.85990822951607*^9, 3.8599083392899637`*^9}},
 CellID->1749518562,ExpressionUUID->"e57c25a9-837a-4a94-bf64-652a184b5f29"],

Cell["\<\
The association and list can include zeros; these will be dropped.\
\>", "Notes",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.859728768453798*^9, 3.859728821552747*^9}, {
  3.859908356275126*^9, 3.859908362802683*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->422531486,ExpressionUUID->"e66e6b6c-85cf-4fc9-b20a-842bde514cf0"],

Cell["The output is a list of physical dimension entity objects.", "Notes",
 TaggingRules->{},
 CellChangeTimes->{{3.859728823997075*^9, 3.859728835807453*^9}},
 CellID->578155466,ExpressionUUID->"63fb24b7-04c6-4607-a675-35a86f0de5d0"],

Cell[TextData[{
 "To see the possible dimension types, visit the Details section of the ",
 Cell[BoxData[
  TagBox[
   ButtonBox[
    StyleBox["UnitDimensions", "SymbolsRefLink",
     ShowStringCharacters->True,
     FontFamily->"Source Sans Pro"],
    BaseStyle->Dynamic[
      FEPrivate`If[
       CurrentValue["MouseOver"], {
       "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {"Link"}]],
    ButtonData->"paclet:ref/UnitDimensions",
    ContentPadding->False],
   MouseAppearanceTag["LinkHand"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "202f18c2-6594-4faa-b33e-420bb8dca4bf"],
 " page."
}], "Notes",
 TaggingRules->{},
 CellChangeTimes->{{3.8597289012111764`*^9, 3.8597289086852074`*^9}, {
  3.8597290320007234`*^9, 3.8597290403351135`*^9}, {3.859908445169545*^9, 
  3.859908453611294*^9}},
 CellID->92641558,ExpressionUUID->"2678fe4a-c6ed-41e5-8d05-31997e0b6de5"],

Cell[TextData[{
 "Physical dimensions are:",
 " ",
 Cell[BoxData["\"\<AmountUnit\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "8afd2b20-eddf-4041-b1b4-aa77771e18c0"],
 ", ",
 Cell[BoxData["\"\<ElectricCurrentUnit\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "9aaef14d-9185-421d-b4f0-7428639fcf52"],
 ", ",
 Cell[BoxData["\"\<LengthUnit\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "d8eca396-7bb9-4ef7-a03c-70d84b4ec61f"],
 ", ",
 Cell[BoxData["\"\<LuminousIntensityUnit\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "836351ce-a8e5-4f76-8299-f0c07caa84c3"],
 ", ",
 Cell[BoxData["\"\<MassUnit\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "7eecf690-91c6-4c69-8618-0e3b7cbfde7f"],
 ", ",
 Cell[BoxData["\"\<TemperatureUnit\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "30a6965e-5bce-4763-998c-6f4e40d64a14"],
 ", and ",
 Cell[BoxData["\"\<TimeUnit\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "a6479bf5-d1cb-4583-832d-e330f677ee7a"],
 "."
}], "Notes",
 TaggingRules->{},
 CellID->88966841,ExpressionUUID->"9b3e89a4-8269-4380-9de6-da4fdfa7854c"],

Cell["\<\
These are the seven base dimensions in the International System of Units. \
Here is some information about the physical dimensions:\
\>", "Notes",
 TaggingRules->{},
 CellChangeTimes->{{3.859729116815505*^9, 3.8597291604374914`*^9}},
 CellID->489726026,ExpressionUUID->"2b5c6b8d-d533-49fa-8573-29622167c7bb"],

Cell[BoxData[GridBox[{
   {Cell["Physical Quantity Dimension", "TableText",ExpressionUUID->
     "932a915e-4ae4-4911-917f-a3673510f801"], Cell[
    "Time", "TableText",ExpressionUUID->
     "477b3f0a-149d-49f1-ad42-2bb53f3873ab"], Cell[
    "Length", "TableText",ExpressionUUID->
     "d72c4174-c1c0-4c49-8fb1-0f7fe3dfb129"], Cell[
    "Mass", "TableText",ExpressionUUID->
     "7bedd12f-1038-4bdb-822d-3062e8651acf"], Cell[
    "Electric Current", "TableText",ExpressionUUID->
     "e8918119-c6cd-4db4-b782-d281ee236951"], Cell[
    "Absolute Thermodynamic Temperature", "TableText",ExpressionUUID->
     "28f406e3-62cc-47fb-bfc5-1dfcbed877f8"], Cell[
    "Amount of Substance", "TableText",ExpressionUUID->
     "7e035aa4-a0e7-4ae1-adb9-abdf951c51da"], Cell[
    "Luminous Intensity", "TableText",ExpressionUUID->
     "fe93371a-1d3f-4b6c-b034-c97a65b4121a"]},
   {Cell["SI Base Unit", "TableText",ExpressionUUID->
     "9a0de491-a994-441d-bbd2-edeaa9d74210"], Cell[
    "second", "TableText",ExpressionUUID->
     "37c2c470-7ec8-48a7-af22-2903c82f1926"], Cell[
    "meter", "TableText",ExpressionUUID->
     "78ed40d6-3675-4a0d-952b-145e3150e00b"], Cell[
    "kilogram", "TableText",ExpressionUUID->
     "dcddcb6a-67af-4226-842b-e96772fdb406"], Cell[
    "ampere", "TableText",ExpressionUUID->
     "f8e617f7-1989-4efb-b270-7e8fe6295a0e"], Cell[
    "kelvin", "TableText",ExpressionUUID->
     "44b52c3c-3226-412a-82f8-621c60c90675"], Cell[
    "mole", "TableText",ExpressionUUID->
     "08091dde-3bec-4f34-b23c-a5174c0a1265"], Cell[
    "candela", "TableText",ExpressionUUID->
     "9eed1ede-c621-4d04-a4a1-c80dc8461c0e"]},
   {Cell["SI Base Unit symbol", "TableText",ExpressionUUID->
     "60499ce6-08ed-43c5-97a0-817c27f0e5e6"], Cell[
    "s", "TableText",ExpressionUUID->"2626769b-8a2b-4cd1-9b58-932dea346c21"], 
    Cell["m", "TableText",ExpressionUUID->
     "a777a2cb-b6ac-411d-a17d-aca8429da25c"], Cell[
    "kg", "TableText",ExpressionUUID->"6d22fef5-3e12-413a-8f1a-a2de3326d6ef"],
     Cell["A", "TableText",ExpressionUUID->
     "1160eec2-ab74-48ba-b462-9db9b6f3fcf3"], Cell[
    "K", "TableText",ExpressionUUID->"35e0369b-5eb4-4cba-8c67-47ac430b8a41"], 
    Cell["mol", "TableText",ExpressionUUID->
     "47e70773-d303-4711-a3e6-9d2d92f51c86"], Cell[
    "cd", "TableText",ExpressionUUID->"770a5afd-0fa8-4645-8a7c-a39d3dbe3a6e"]},
   {Cell["BIPM recommended dimension symbol", "TableText",ExpressionUUID->
     "7db7e588-2db3-4ee1-9b1f-5bdc7e95bc80"], Cell[
    "T", "TableText",ExpressionUUID->"fb904acc-dc22-47c0-b51e-ca933f38c497"], 
    Cell["L", "TableText",ExpressionUUID->
     "04f0babf-5c32-4761-b452-ec3132e601e4"], Cell[
    "M", "TableText",ExpressionUUID->"c303000c-61bd-47b4-88f1-1127824c8d36"], 
    Cell["I", "TableText",ExpressionUUID->
     "cc943aaa-54b2-410d-9c28-1082d57ecf21"], Cell[
    "\[CapitalTheta]", "TableText",ExpressionUUID->
     "898f2260-6efc-414b-8717-915569ae11e8"], Cell[
    "N", "TableText",ExpressionUUID->"f9cf64f7-97bb-45b5-933e-9a75f5c8dd4e"], 
    Cell["J", "TableText",ExpressionUUID->
     "f374b6a5-8530-4cea-a79e-14a36f9c7271"]},
   {Cell["Defining Constant Symbol", "TableText",ExpressionUUID->
     "8206f934-4b06-4edc-8c81-c501da7f5bf1"], Cell[TextData[Cell[BoxData[
     SubscriptBox["\[CapitalDelta]\[Nu]", "Cs"]],ExpressionUUID->
     "0ef3bbab-ed3c-4dc2-9000-231d3706e85b"]], "TableText",ExpressionUUID->
     "87421799-5873-4c6d-8f74-18e5595c0c09"], Cell[
    "c", "TableText",ExpressionUUID->"944fe324-e1fd-449a-9c32-b84b2c4d81b4"], 
    Cell["h", "TableText",ExpressionUUID->
     "abc5318f-76c1-48bd-bfdd-748ea1895fd6"], Cell[
    "e", "TableText",ExpressionUUID->"3f2d326c-51b4-49ee-9b14-7f2c4785f399"], 
    Cell["k", "TableText",ExpressionUUID->
     "79999a89-4ec2-4d5b-ad40-b6877b962b77"], Cell[TextData[Cell[BoxData[
     SubscriptBox["N", "A"]],ExpressionUUID->
     "f102b218-8a1f-4475-87b6-b8924d223e64"]], "TableText",ExpressionUUID->
     "b110fca5-d05f-4bee-9e34-1477886a6183"], Cell[TextData[Cell[BoxData[
     SubscriptBox["K", "cd"]],ExpressionUUID->
     "53feb1fb-96a1-4abc-890d-bc6d546f5a15"]], "TableText",ExpressionUUID->
     "a6928a78-5806-44e1-a624-1f8b57dbcadd"]},
   {Cell["Definition of Defining Constant", "TableText",ExpressionUUID->
     "48299c5d-ec24-41a9-a9ec-77d37c4bf0e5"], Cell["\<\
frequency of caesium-133 atom's hyperfine transition 
when Cs-133 is in an unperturbed ground state\
\>", "TableText",ExpressionUUID->"7f689ed0-9341-40c9-8b84-54b93bdadafc"], 
    Cell["speed of light in a vacuum", "TableText",ExpressionUUID->
     "8cf3d34c-326b-4d62-9e5f-d9c7c269fb0b"], Cell[
    "Planck constant", "TableText",ExpressionUUID->
     "6423a3b9-b28a-445d-8eb9-8b73f5956d85"], Cell[
    "elementary charge", "TableText",ExpressionUUID->
     "6966890a-f4de-4435-abe7-a641483cb816"], Cell[
    "Boltzmann constant", "TableText",ExpressionUUID->
     "e716b525-ed41-4592-9600-a973a1f1fb6d"], Cell[
    "Avogadro constant", "TableText",ExpressionUUID->
     "0b6ea228-ed08-4e91-bb80-6a41d7f77d3a"], Cell[
    "luminous efficacy of radiation of frequency 540 Thz.", "TableText",
     ExpressionUUID->"3a58c0ff-93e1-4b23-b54a-616ea0a6175e"]},
   {Cell["Value of Defining Constant by Definition", "TableText",
     ExpressionUUID->"2139daba-65e2-43cb-81ca-2975df329790"], Cell[TextData[{
     "9 192 631 770 ",
     Cell[BoxData[
      SuperscriptBox["Hz", "1"]],ExpressionUUID->
      "7cd81631-fd42-419b-918a-5c82efac44f4"]
    }], "TableText",ExpressionUUID->"3f3da265-0bab-441f-b961-5630566c6f36"], 
    Cell[TextData[{
     "299 799 458 ",
     Cell[BoxData[
      RowBox[{
       SuperscriptBox["s", 
        RowBox[{"-", "1"}]], 
       SuperscriptBox["m", 
        RowBox[{"+", "1"}]]}]],ExpressionUUID->
      "3c45a1fa-3dab-4af4-8829-e81108e22a71"]
    }], "TableText",ExpressionUUID->"ff624afe-4ee0-4cf1-920c-f84a45c220b7"], 
    Cell[TextData[{
     "6.62607015 ",
     Cell[BoxData[
      RowBox[{"\[Times]", 
       SuperscriptBox["10", 
        RowBox[{"-", "34"}]], 
       SuperscriptBox["J", "1"], " ", 
       SuperscriptBox["s", "1"]}]],ExpressionUUID->
      "7a24b9e4-9bcc-4453-a981-456b9f79eef7"]
    }], "TableText",ExpressionUUID->"b70e2f49-22a9-474b-8fb5-881a566dab7c"], 
    Cell[TextData[{
     Cell[BoxData[
      RowBox[{"1.602176634", "\[Times]", 
       SuperscriptBox["10", 
        RowBox[{"-", "19"}]]}]],ExpressionUUID->
      "91d9a9f1-c6d6-4ecc-a9ba-f0327c35580b"],
     " ",
     Cell[BoxData[
      SuperscriptBox["C", "1"]],ExpressionUUID->
      "3b8ea85f-8c42-402b-8674-f5d83bf21121"]
    }], "TableText",ExpressionUUID->"34fcce7d-ca1a-4697-beb1-7dd6c5517abe"], 
    Cell[TextData[Cell[BoxData[
     RowBox[{
      RowBox[{"1.380649", "\[Times]"}], 
      SuperscriptBox["10", 
       RowBox[{"-", "23"}]], " ", 
      SuperscriptBox["J", 
       RowBox[{"+", "1"}]], 
      SuperscriptBox["K", 
       RowBox[{"-", "1"}]]}]],ExpressionUUID->
     "09717881-6f5c-469a-93f0-6a9821a537b5"]], "TableText",ExpressionUUID->
     "aeef5bb1-880c-40ff-b1bc-009caa0e7d5b"], Cell[TextData[{
     "6.022 140 76 \[Times] ",
     Cell[BoxData[
      SuperscriptBox["10", "23"]],ExpressionUUID->
      "96ddbca9-0783-4d8c-98fa-f9a60b5a966f"],
     " ",
     Cell[BoxData[
      SuperscriptBox["mol", 
       RowBox[{"-", "1"}]]],ExpressionUUID->
      "f2f7b517-1367-4c0b-8fa1-f15d061b4c82"]
    }], "TableText",ExpressionUUID->"426b6bc8-3ae3-49b1-a5cc-52f3b878cad5"], 
    Cell[TextData[{
     "683 ",
     Cell[BoxData[
      RowBox[{
       SuperscriptBox["lm", 
        RowBox[{"+", "1"}]], " ", 
       SuperscriptBox["W", 
        RowBox[{"-", "1"}]]}]],ExpressionUUID->
      "4d722a4e-aa3d-4175-b923-65831afa0d20"]
    }], "TableText",ExpressionUUID->"f0361811-e4e6-4efe-bc10-de497dbb8227"]}
  }]], "TableNotes",
 TaggingRules->{},
 CellChangeTimes->{{3.8940392842893133`*^9, 3.894039641898332*^9}, {
   3.8940417928581867`*^9, 3.894042035856437*^9}, 3.894042338265872*^9},
 CellID->394240659,ExpressionUUID->"26b986b1-4ea1-4fe1-9160-ec82e68bd864"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Examples",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Examples", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Demonstrate the function\[CloseCurlyQuote]s usage, starting with \
the most basic use case and describing each example in a preceding text cell.\
\n\nWithin a group, individual examples can be delimited by inserting page \
breaks between them (either using ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"[Right-click]\"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontColor -> GrayLevel[0.28627], 
                 FontSize -> 14, StripOnInput -> False], 
                StyleBox[
                "\" \[FilledRightTriangle] \"", FontFamily -> 
                 "Source Sans Pro", FontSize -> 13.86, FontColor -> 
                 GrayLevel[0.5], StripOnInput -> False], 
                StyleBox[
                "\"Insert Page Break\"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontColor -> GrayLevel[0.28627], 
                 FontSize -> 14, StripOnInput -> False]}, "RowDefault"], 
              ShowStringCharacters -> False]]], 
           " between cells or through the menu using ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"Insert\"", FontFamily -> "Source Sans Pro", FontWeight -> 
                 "SemiBold", FontColor -> GrayLevel[0.28627], FontSize -> 14, 
                 StripOnInput -> False], 
                StyleBox[
                "\" \[FilledRightTriangle] \"", FontFamily -> 
                 "Source Sans Pro", FontSize -> 13.86, FontColor -> 
                 GrayLevel[0.5], StripOnInput -> False], 
                StyleBox[
                "\"Page Break\"", FontFamily -> "Source Sans Pro", FontWeight -> 
                 "SemiBold", FontColor -> GrayLevel[0.28627], FontSize -> 14, 
                 StripOnInput -> False]}, "RowDefault"], ShowStringCharacters -> 
              False]]], 
           ").\n\nExamples should be grouped into Subsection and \
Subsubsection cells similarly to existing documentation pages. Here are some \
typical Subsection names and the types of examples they normally contain:\n  \
", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Basic Examples: \"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontSize -> 14, StripOnInput -> 
                 False]}, "RowDefault"], ShowStringCharacters -> False]]], 
           "most basic function usage\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Scope: \"", FontFamily -> "Source Sans Pro", FontWeight -> 
                 "SemiBold", FontSize -> 14, StripOnInput -> False]}, 
               "RowDefault"], ShowStringCharacters -> False]]], 
           "input and display conventions, standard computational attributes \
(e.g. threading over lists)\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Options: \"", FontFamily -> "Source Sans Pro", FontWeight -> 
                 "SemiBold", FontSize -> 14, StripOnInput -> False]}, 
               "RowDefault"], ShowStringCharacters -> False]]], 
           "available options and parameters for the function\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Applications: \"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontSize -> 14, StripOnInput -> 
                 False]}, "RowDefault"], ShowStringCharacters -> False]]], 
           "standard industry or academic applications\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Properties and Relations: \"", FontFamily -> 
                 "Source Sans Pro", FontWeight -> "SemiBold", FontSize -> 14, 
                 StripOnInput -> False]}, "RowDefault"], ShowStringCharacters -> 
              False]]], "how the function relates to other functions\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Possible Issues: \"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontSize -> 14, StripOnInput -> 
                 False]}, "RowDefault"], ShowStringCharacters -> False]]], 
           "limitations or unexpected behavior a user might experience\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Neat Examples: \"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontSize -> 14, StripOnInput -> 
                 False]}, "RowDefault"], ShowStringCharacters -> False]]], 
           "particularly interesting, unconventional, or otherwise unique \
usage"}], "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoExamples"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "2772e41e-3cf2-41ba-be22-babfae5787bd"]
}], "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Examples"},
 CellTags->{"Examples", "TemplateCellGroup"},
 CellID->671320372,ExpressionUUID->"2629c9fc-a555-47e9-90c4-64fe9c938cff"],

Cell[CellGroupData[{

Cell["Basic Examples", "Subsection",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->619504543,ExpressionUUID->"5c075cc4-69c0-4fc1-b70f-a8344344db7a"],

Cell["\<\
Find physical quantities that dimensions of length divided by time:\
\>", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8597302938957944`*^9, 3.8597303078199673`*^9}},
 CellTags->"DefaultContent",
 CellID->586099280,ExpressionUUID->"6e49e335-5b7a-4394-840d-9fbebc59d699"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "ExactDimensionMatches"}]], "Input",
 CellChangeTimes->{{3.896615321123183*^9, 3.8966153223612237`*^9}},
 CellLabel->"In[79]:=",
 CellID->502636662,ExpressionUUID->"0dcba26c-0f33-452e-98c1-830f2e190582"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"ExactDimensionMatches[{{\\!\\(\\*StyleBox[\\\"\
dimensionname1\\\", \\\"TI\\\"]\\),\\!\\(\\*StyleBox[\\\"dimensionpower1\\\", \
\\\"TI\\\"]\\)},{\\!\\(\\*StyleBox[\\\"dimensionname2\\\", \\\"TI\\\"]\\),\\!\
\\(\\*StyleBox[\\\"dimensionpower2\\\", \\\"TI\\\"]\\)},\[Ellipsis]}] finds \
all physical quantity entities that have the dimensions \
\\!\\(\\*FormBox[SuperscriptBox[StyleBox[\\\"dimensionname1\\\", \\\"TI\\\"], \
StyleBox[\\\"dimensionpower1\\\", \
\\\"TI\\\"]],TraditionalForm]\\)*\\!\\(\\*FormBox[SuperscriptBox[StyleBox[\\\"\
dimensionname2\\\", \\\"TI\\\"], StyleBox[\\\"dimensionpower2\\\", \
\\\"TI\\\"]],TraditionalForm]\\)* ... and so on. \
ExactDimensionMatches[<|\\!\\(\\*StyleBox[\\\"dimensionname1\\\", \\\"TI\\\"]\
\\)->\\!\\(\\*StyleBox[\\\"dimensionpower1\\\", \
\\\"TI\\\"]\\),\\!\\(\\*StyleBox[\\\"dimensionname2\\\", \
\\\"TI\\\"]\\)->\\!\\(\\*StyleBox[\\\"dimensionpower2\\\", \\\"TI\\\"]\\),\
\[Ellipsis]|>] finds all physical quantity entities that have the dimensions \
\\!\\(\\*FormBox[SuperscriptBox[StyleBox[\\\"dimensionname1\\\", \\\"TI\\\"], \
StyleBox[\\\"dimensionpower1\\\", \
\\\"TI\\\"]],TraditionalForm]\\)*\\!\\(\\*FormBox[SuperscriptBox[StyleBox[\\\"\
dimensionname2\\\", \\\"TI\\\"], StyleBox[\\\"dimensionpower2\\\", \
\\\"TI\\\"]],TraditionalForm]\\)* ... and so on. ExactDimensionMatches[\\!\\(\
\\*StyleBox[\\\"quantity\\\", \\\"TI\\\"]\\)] finds all physical quantities \
with the same dimension as quantity. ExactDimensionMatches[\\!\\(\\*StyleBox[\
\\\"dimensionspec\\\", \\\"TI\\\"]\\),\\!\\(\\*StyleBox[\\\"property\\\", \
\\\"TI\\\"]\\)] computes \\!\\(\\*StyleBox[\\\"property\\\", \\\"TI\\\"]\\) \
for physical dimension entities that match \
\\!\\(\\*StyleBox[\\\"dimensionspec\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"ExactDimensionMatches", "[", 
                    RowBox[{
                    RowBox[{"dimensions_", "?", 
                    RowBox[{"(", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "l", "}"}], ",", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"l", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_", "?", "StringQ"}], ",", 
                    RowBox[{"_", "?", "RealValuedNumericQ"}]}], "}"}], ".."}],
                     "}"}]}], "]"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ")"}]}], ",", 
                    RowBox[{"property_", ":", "\"Entities\""}], ",", 
                    RowBox[{"form_", ":", "\"List\""}]}], "]"}], ":=", 
                    RowBox[{"EntityValue", "[", 
                    RowBox[{
                    RowBox[{"FilteredEntityClass", "[", 
                    RowBox[{"\"PhysicalQuantity\"", ",", 
                    RowBox[{"EntityFunction", "[", 
                    RowBox[{"physicalQuantityDimension", ",", 
                    RowBox[{
                    RowBox[{"ContainsExactly", "[", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{"Rationalize", ",", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"dimensions", ",", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", 
                    RowBox[{"Except", "[", "0", "]"}]}], "}"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"All", ",", "2"}], "}"}]}], "]"}], "]"}], "[", 
                    
                    RowBox[{"physicalQuantityDimension", "[", 
                    "\"Dimensions\"", "]"}], "]"}]}], "]"}]}], "]"}], ",", 
                    RowBox[{"Sequence", "@@", 
                    RowBox[{"{", 
                    RowBox[{"property", ",", 
                    RowBox[{"Which", "[", 
                    RowBox[{
                    RowBox[{"form", "===", "\"List\""}], ",", "Nothing", ",", 
                    RowBox[{"form", "=!=", "\"List\""}], ",", "form"}], 
                    "]"}]}], "}"}]}]}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"ExactDimensionMatches", "[", 
                    RowBox[{
                    RowBox[{"dimensions_", "?", 
                    RowBox[{"(", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "l", "}"}], ",", 
                    RowBox[{"AssociationQ", "[", "l", "]"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ")"}]}], ",", 
                    RowBox[{"property_", ":", "\"Entities\""}], ",", 
                    RowBox[{"form_", ":", "\"List\""}]}], "]"}], ":=", 
                    RowBox[{"ExactDimensionMatches", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Keys", "[", "#1", "]"}], ",", 
                    RowBox[{"Values", "[", "#1", "]"}]}], "}"}], "&"}], ")"}],
                     "[", "dimensions", "]"}], "]"}], ",", "property", ",", 
                    "form"}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"ExactDimensionMatches", "[", 
                    RowBox[{
                    RowBox[{"unit_", "?", 
                    RowBox[{"(", 
                    RowBox[{"Function", "[", 
                    RowBox[{
                    RowBox[{"{", "l", "}"}], ",", 
                    RowBox[{"QuantityQ", "[", "l", "]"}], ",", 
                    RowBox[{"{", "}"}]}], "]"}], ")"}]}], ",", 
                    RowBox[{"property_", ":", "\"Entities\""}], ",", 
                    RowBox[{"form_", ":", "\"List\""}]}], "]"}], ":=", 
                    RowBox[{"ExactDimensionMatches", "[", 
                    RowBox[{
                    RowBox[{"UnitDimensions", "[", "unit", "]"}], ",", 
                    "property", ",", "form"}], "]"}]}]}, {" "}, {
                    RowBox[{
                    RowBox[{"ExactDimensionMatches", "[", "args___", "]"}], 
                    ":=", 
                    RowBox[{"Null", "/;", 
                    RowBox[{"CheckArguments", "[", 
                    RowBox[{
                    RowBox[{"ExactDimensionMatches", "[", "args", "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "3"}], "}"}]}], "]"}]}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`ExactDimensionMatches\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"ExactDimensionMatches[{{\\!\\(\\*StyleBox[\\\"\
dimensionname1\\\", \\\"TI\\\"]\\),\\!\\(\\*StyleBox[\\\"dimensionpower1\\\", \
\\\"TI\\\"]\\)},{\\!\\(\\*StyleBox[\\\"dimensionname2\\\", \\\"TI\\\"]\\),\\!\
\\(\\*StyleBox[\\\"dimensionpower2\\\", \\\"TI\\\"]\\)},\[Ellipsis]}] finds \
all physical quantity entities that have the dimensions \
\\!\\(\\*FormBox[SuperscriptBox[StyleBox[\\\"dimensionname1\\\", \\\"TI\\\"], \
StyleBox[\\\"dimensionpower1\\\", \
\\\"TI\\\"]],TraditionalForm]\\)*\\!\\(\\*FormBox[SuperscriptBox[StyleBox[\\\"\
dimensionname2\\\", \\\"TI\\\"], StyleBox[\\\"dimensionpower2\\\", \
\\\"TI\\\"]],TraditionalForm]\\)* ... and so on. \
ExactDimensionMatches[<|\\!\\(\\*StyleBox[\\\"dimensionname1\\\", \\\"TI\\\"]\
\\)->\\!\\(\\*StyleBox[\\\"dimensionpower1\\\", \
\\\"TI\\\"]\\),\\!\\(\\*StyleBox[\\\"dimensionname2\\\", \
\\\"TI\\\"]\\)->\\!\\(\\*StyleBox[\\\"dimensionpower2\\\", \\\"TI\\\"]\\),\
\[Ellipsis]|>] finds all physical quantity entities that have the dimensions \
\\!\\(\\*FormBox[SuperscriptBox[StyleBox[\\\"dimensionname1\\\", \\\"TI\\\"], \
StyleBox[\\\"dimensionpower1\\\", \
\\\"TI\\\"]],TraditionalForm]\\)*\\!\\(\\*FormBox[SuperscriptBox[StyleBox[\\\"\
dimensionname2\\\", \\\"TI\\\"], StyleBox[\\\"dimensionpower2\\\", \
\\\"TI\\\"]],TraditionalForm]\\)* ... and so on. ExactDimensionMatches[\\!\\(\
\\*StyleBox[\\\"quantity\\\", \\\"TI\\\"]\\)] finds all physical quantities \
with the same dimension as quantity. ExactDimensionMatches[\\!\\(\\*StyleBox[\
\\\"dimensionspec\\\", \\\"TI\\\"]\\),\\!\\(\\*StyleBox[\\\"property\\\", \
\\\"TI\\\"]\\)] computes \\!\\(\\*StyleBox[\\\"property\\\", \\\"TI\\\"]\\) \
for physical dimension entities that match \
\\!\\(\\*StyleBox[\\\"dimensionspec\\\", \\\"TI\\\"]\\).\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{5., {2., 3.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{5., {2., 3.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "ExactDimensionMatches[{{\!\(\*StyleBox[\"dimensionname1\", \
\"TI\"]\),\!\(\*StyleBox[\"dimensionpower1\", \
\"TI\"]\)},{\!\(\*StyleBox[\"dimensionname2\", \
\"TI\"]\),\!\(\*StyleBox[\"dimensionpower2\", \"TI\"]\)},\[Ellipsis]}] finds \
all physical quantity entities that have the dimensions \
\!\(\*FormBox[SuperscriptBox[StyleBox[\"dimensionname1\", \"TI\"], \
StyleBox[\"dimensionpower1\", \
\"TI\"]],TraditionalForm]\)*\!\(\*FormBox[SuperscriptBox[StyleBox[\"\
dimensionname2\", \"TI\"], StyleBox[\"dimensionpower2\", \
\"TI\"]],TraditionalForm]\)* ... and so on. \
ExactDimensionMatches[<|\!\(\*StyleBox[\"dimensionname1\", \
\"TI\"]\)->\!\(\*StyleBox[\"dimensionpower1\", \
\"TI\"]\),\!\(\*StyleBox[\"dimensionname2\", \
\"TI\"]\)->\!\(\*StyleBox[\"dimensionpower2\", \"TI\"]\),\[Ellipsis]|>] finds \
all physical quantity entities that have the dimensions \
\!\(\*FormBox[SuperscriptBox[StyleBox[\"dimensionname1\", \"TI\"], \
StyleBox[\"dimensionpower1\", \
\"TI\"]],TraditionalForm]\)*\!\(\*FormBox[SuperscriptBox[StyleBox[\"\
dimensionname2\", \"TI\"], StyleBox[\"dimensionpower2\", \
\"TI\"]],TraditionalForm]\)* ... and so on. \
ExactDimensionMatches[\!\(\*StyleBox[\"quantity\", \"TI\"]\)] finds all \
physical quantities with the same dimension as quantity. \
ExactDimensionMatches[\!\(\*StyleBox[\"dimensionspec\", \
\"TI\"]\),\!\(\*StyleBox[\"property\", \"TI\"]\)] computes \
\!\(\*StyleBox[\"property\", \"TI\"]\) for physical dimension entities that \
match \!\(\*StyleBox[\"dimensionspec\", \"TI\"]\).", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, $CellContext`ExactDimensionMatches, \
{$CellContext`ExactDimensionMatches[
         PatternTest[
          Pattern[$CellContext`dimensions, 
           Blank[]], 
          Function[{$CellContext`l}, 
           MatchQ[$CellContext`l, {
             Repeated[{
               PatternTest[
                Blank[], StringQ], 
               PatternTest[
                Blank[], RealValuedNumericQ]}]}], {}]], 
         Optional[
          Pattern[$CellContext`property, 
           Blank[]], "Entities"], 
         Optional[
          Pattern[$CellContext`form, 
           Blank[]], "List"]] :> EntityValue[
         FilteredEntityClass["PhysicalQuantity", 
          EntityFunction[$CellContext`physicalQuantityDimension, 
           ContainsExactly[
            MapAt[Rationalize, 
             Cases[$CellContext`dimensions, {
               Blank[], 
               Except[0]}], {All, 2}]][
            $CellContext`physicalQuantityDimension["Dimensions"]]]], 
         Apply[Sequence, {$CellContext`property, 
           
           Which[$CellContext`form === "List", Nothing, $CellContext`form =!= 
            "List", $CellContext`form]}]], $CellContext`ExactDimensionMatches[
         PatternTest[
          Pattern[$CellContext`dimensions, 
           Blank[]], 
          Function[{$CellContext`l}, 
           AssociationQ[$CellContext`l], {}]], 
         Optional[
          Pattern[$CellContext`property, 
           Blank[]], "Entities"], 
         Optional[
          Pattern[$CellContext`form, 
           Blank[]], "List"]] :> $CellContext`ExactDimensionMatches[
         Transpose[
          ({
           Keys[#], 
           
           Values[#]}& )[$CellContext`dimensions]], $CellContext`property, \
$CellContext`form], $CellContext`ExactDimensionMatches[
         PatternTest[
          Pattern[$CellContext`unit, 
           Blank[]], 
          Function[{$CellContext`l}, 
           QuantityQ[$CellContext`l], {}]], 
         Optional[
          Pattern[$CellContext`property, 
           Blank[]], "Entities"], 
         Optional[
          Pattern[$CellContext`form, 
           Blank[]], "List"]] :> $CellContext`ExactDimensionMatches[
         UnitDimensions[$CellContext`unit], $CellContext`property, \
$CellContext`form], $CellContext`ExactDimensionMatches[
         Pattern[$CellContext`args, 
          BlankNullSequence[]]] :> Condition[Null, 
         CheckArguments[
          $CellContext`ExactDimensionMatches[$CellContext`args], {1, 3}]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "Global`ExactDimensionMatches"|>, False]]], "Output",
 CellChangeTimes->{
  3.8966153227042613`*^9, 3.896615376486559*^9, 3.8966159337344894`*^9, 
   3.8966159752412715`*^9, {3.8966160277523575`*^9, 3.8966160760485077`*^9}, 
   3.896616300164181*^9},
 CellLabel->"Out[79]=",
 CellID->311198133,ExpressionUUID->"8fbfd295-8eb6-45ae-bf9c-3ff77a05c8aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<TimeUnit\>\"", "->", 
     RowBox[{"-", "1"}]}], ",", 
    RowBox[{"\"\<LengthUnit\>\"", "->", "2"}]}], "|>"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.859730312443549*^9, 3.859730335911895*^9}, {
   3.894042096867676*^9, 3.8940420999148836`*^9}, {3.895940098161261*^9, 
   3.8959400996501894`*^9}, 3.895940351688652*^9},
 CellTags->"DefaultContent",
 CellLabel->"In[40]:=",
 CellID->727568125,ExpressionUUID->"0387b45a-ae0d-4f04-be15-261403904d08"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"area rate\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AreaRate\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AreaRate\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"circulation\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Circulation\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Circulation\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"diffusion coefficient\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"DiffusionCoefficient\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"DiffusionCoefficient\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"effective diffusion coefficient\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"EffectiveDiffusionCoefficient\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"EffectiveDiffusionCoefficient\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"grain boundary diffusion coefficient\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", 
         "\"GrainBoundaryDiffusionCoefficient\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GrainBoundaryDiffusionCoefficient\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"Hall element sensitivity\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"HallElementSensitivity\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"HallElementSensitivity\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"kinematic viscosity\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"KinematicViscosity\""}], "]"}],
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"KinematicViscosity\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"lattice diffusion coefficient\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"LatticeDiffusionCoefficient\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LatticeDiffusionCoefficient\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"magnetic diffusivity\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"MagneticDiffusivity\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"MagneticDiffusivity\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"self\[Hyphen]diffusion coefficient\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SelfDiffusionCoefficient\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SelfDiffusionCoefficient\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"specific angular momentum\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SpecificAngularMomentum\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"SpecificAngularMomentum\
\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"thermal diffusion coefficient\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"ThermalDiffusionCoefficient\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ThermalDiffusionCoefficient\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"thermal diffusivity\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ThermalDiffusivity\""}], "]"}],
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"ThermalDiffusivity\\\"]\"", 
     "\"physical quantity\""},
    "Entity"]}], "}"}]], "Output",
 CellChangeTimes->{
  3.8959401006837296`*^9, {3.89594034361782*^9, 3.8959403535840716`*^9}, 
   3.8966148555928106`*^9, 3.896615277502533*^9},
 CellTags->"DefaultContent",
 CellLabel->"Out[40]=",
 CellID->854277208,ExpressionUUID->"3d6d1ead-17d1-487f-a422-c441f318f5c8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EntityValue", "[", 
  RowBox[{
   RowBox[{"FilteredEntityClass", "[", 
    RowBox[{"\"\<PhysicalQuantity\>\"", ",", 
     RowBox[{"EntityFunction", "[", 
      RowBox[{"physicalQuantityDimension", ",", 
       RowBox[{
        RowBox[{"ContainsExactly", "[", 
         RowBox[{"MapAt", "[", 
          RowBox[{"Rationalize", ",", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"\"\<TimeUnit\>\"", ",", 
                RowBox[{"1", "/", "2"}]}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"_", ",", 
               RowBox[{"Except", "[", "0", "]"}]}], "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"All", ",", "2"}], "}"}]}], "]"}], "]"}], "[", 
        RowBox[{"physicalQuantityDimension", "[", "\"\<Dimensions\>\"", "]"}],
         "]"}]}], "]"}]}], "]"}], ",", "\"\<Entities\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.896614928289457*^9, 3.89661493549887*^9}},
 CellLabel->"In[19]:=",
 CellID->75611509,ExpressionUUID->"1c14656a-ffac-4180-8039-14a8b3cd2b39"],

Cell[BoxData[
 RowBox[{"{", 
  TemplateBox[{"\"strain noise density\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"PhysicalQuantity\"", ",", "\"StrainNoiseDensity\""}], "]"}], 
    "\"Entity[\\\"PhysicalQuantity\\\", \\\"StrainNoiseDensity\\\"]\"", 
    "\"physical quantity\""},
   "Entity"], "}"}]], "Output",
 CellChangeTimes->{3.896614936530846*^9},
 CellLabel->"Out[19]=",
 CellID->332365077,ExpressionUUID->"fffee84b-4cc0-4f44-b61f-7d78285fa0d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"strain noise density\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"PhysicalQuantity\"", ",", "\"StrainNoiseDensity\""}], "]"}], 
    "\"Entity[\\\"PhysicalQuantity\\\", \\\"StrainNoiseDensity\\\"]\"", 
    "\"physical quantity\""},
   "Entity"], "[", "\"\<Properties\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8966149727767925`*^9, 3.8966149736617565`*^9}},
 CellLabel->"In[21]:=",
 CellID->133129309,ExpressionUUID->"0459af74-26f9-4eae-89ba-5748743e271a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"abbreviations\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Abbreviations\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Abbreviations\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"algebraic types\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AlgebraicTypes\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"AlgebraicTypes\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"alternate names\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AlternateNames\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"AlternateNames\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"base physical quantity\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"BasePhysicalQuantity\""}], 
       "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"BasePhysicalQuantity\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"canonical unit\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"CanonicalUnit\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"CanonicalUnit\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"classes\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Classes\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Classes\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"dimensions\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Dimensions\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Dimensions\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"entity classes\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"EntityClasses\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"EntityClasses\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"entity type list\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"EntityTypeList\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"EntityTypeList\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"instances\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Instances\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Instances\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"name\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Name\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Name\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"named SI unit\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"NamedSIUnit\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"NamedSIUnit\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"physical property type\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PhysicalPropertyType\""}], 
       "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"PhysicalPropertyType\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"quantity variable\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"QuantityVariable\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"QuantityVariable\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"SI base unit\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SIBaseUnit\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIBaseUnit\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"SI unit\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SIUnit\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"SIUnit\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"standard identifiers\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardIdentifiers\""}], 
       "]"}], "\"EntityProperty[\\\"PhysicalQuantity\\\", \
\\\"StandardIdentifiers\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"standard symbols\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"StandardSymbols\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"StandardSymbols\\\"]\""},
    "EntityProperty"], ",", 
   TemplateBox[{"\"symbols\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Symbols\""}], "]"}], 
     "\"EntityProperty[\\\"PhysicalQuantity\\\", \\\"Symbols\\\"]\""},
    "EntityProperty"]}], "}"}]], "Output",
 CellChangeTimes->{3.896614974941478*^9},
 CellLabel->"Out[21]=",
 CellID->245695654,ExpressionUUID->"d90d89bb-a8a8-4bee-a985-02b2e78ac7aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EntityValue", "[", 
  RowBox[{
   RowBox[{"FilteredEntityClass", "[", 
    RowBox[{"\"\<PhysicalQuantity\>\"", ",", 
     RowBox[{"EntityFunction", "[", 
      RowBox[{"physicalQuantityDimension", ",", 
       RowBox[{
        RowBox[{"ContainsExactly", "[", 
         RowBox[{"MapAt", "[", 
          RowBox[{"Rationalize", ",", 
           RowBox[{"Cases", "[", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"{", 
               RowBox[{"\"\<TimeUnit\>\"", ",", 
                RowBox[{"1", "/", "2"}]}], "}"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"_", ",", 
               RowBox[{"Except", "[", "0", "]"}]}], "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"All", ",", "2"}], "}"}]}], "]"}], "]"}], "[", 
        RowBox[{"physicalQuantityDimension", "[", "\"\<Dimensions\>\"", "]"}],
         "]"}]}], "]"}]}], "]"}], ",", "\"\<Dimensions\>\"", ",", 
   "\"\<EntityAssociation\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.896614928289457*^9, 3.896614991675166*^9}},
 CellLabel->"In[24]:=",
 CellID->188151457,ExpressionUUID->"3c5c95d2-98bf-4da2-9b3a-32026a00fafb"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   TemplateBox[{"\"strain noise density\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"StrainNoiseDensity\""}], "]"}],
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"StrainNoiseDensity\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], "\[Rule]", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"\<\"TimeUnit\"\>", ",", 
      FractionBox["1", "2"]}], "}"}], "}"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.89661496404416*^9, 3.896614992632124*^9}},
 CellLabel->"Out[24]=",
 CellID->857721889,ExpressionUUID->"806e2075-2255-427b-9117-70a1b5f97507"]
}, Open  ]],

Cell["Search by dimensions of the weber:", "Text",
 CellChangeTimes->{{3.895938957879302*^9, 3.8959389856964045`*^9}},
 CellID->710660928,ExpressionUUID->"781af20d-e2eb-479b-941b-e0e0dbf3f288"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  TemplateBox[{"1", "\"Wb\"", "weber", "\"Webers\""},
   "Quantity"], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.859730312443549*^9, 3.859730335911895*^9}, {
  3.894042096867676*^9, 3.8940420999148836`*^9}, {3.895938971704623*^9, 
  3.89593898157469*^9}},
 CellTags->"DefaultContent",
 CellLabel->"In[14]:=",
 CellID->229565698,ExpressionUUID->"a17872b4-a080-4d79-ba34-a658c13e47c7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PhysicalQuantity\"\>", ",", "\<\"Entities\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PhysicalQuantity\"\>", ",", "\<\"Entities\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PhysicalQuantity\"\>", ",", "\<\"Entities\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PhysicalQuantity\"\>", ",", "\<\"Entities\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PhysicalQuantity\"\>", ",", "\<\"Entities\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PhysicalQuantity\"\>", ",", "\<\"Entities\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PhysicalQuantity\"\>", ",", "\<\"Entities\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PhysicalQuantity\"\>", ",", "\<\"Entities\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8959389869841805`*^9, 3.8966148564997787`*^9},
 CellTags->"DefaultContent",
 CellLabel->"Out[14]=",
 CellID->548377784,ExpressionUUID->"a51958ad-93d4-4f34-b724-ddbfaf99a70a"]
}, Open  ]],

Cell["Dimensions of 0 are discarded:", "Text",
 CellChangeTimes->{{3.8959392031535015`*^9, 3.895939209023722*^9}},
 CellID->41280141,ExpressionUUID->"2bbe89cd-1681-4fc8-8726-6891084b5637"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<LengthUnit\>\"", ",", 
      RowBox[{"-", "4"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Mass\>\"", ",", "0"}], "}"}]}], "}"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{
  3.859732947493025*^9, {3.8597329955707436`*^9, 3.8597329978602405`*^9}},
 CellLabel->"In[36]:=",
 CellID->54355411,ExpressionUUID->"8cc3c807-186a-424f-9c8b-d360762dfef2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"cloud raindrop size\[Hyphen]distribution factor\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", 
         "\"CloudRaindropSizeDistributionFactor\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"CloudRaindropSizeDistributionFactor\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"contact\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Contact\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Contact\\\"]\"", 
     "\"physical quantity\""},
    "Entity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8597329988247747`*^9, 3.8940421106986175`*^9, 
  3.8959388642989445`*^9, 3.8959389185777483`*^9, 3.8959391389501343`*^9, 
  3.895939193432886*^9, 3.8959398823105774`*^9, 3.8966148573136396`*^9, 
  3.896615221692711*^9},
 CellLabel->"Out[36]=",
 CellID->169231320,ExpressionUUID->"6aaea43e-5929-4fce-8983-3e6a3896aea6"]
}, Open  ]],

Cell["\<\
The dimension of cloud raindrop size-distribution factor doesn't have a 0:\
\>", "Text",
 CellChangeTimes->{{3.8959398854134283`*^9, 3.8959398996481915`*^9}},
 CellID->294067802,ExpressionUUID->"78a46bfa-365f-492f-af95-36e71c9dce80"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"cloud raindrop size\[Hyphen]distribution factor\"", 
    RowBox[{"Entity", "[", 
      RowBox[{
       "\"PhysicalQuantity\"", ",", 
        "\"CloudRaindropSizeDistributionFactor\""}], "]"}], 
    "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"CloudRaindropSizeDistributionFactor\\\"]\"", "\"physical quantity\""},
   "Entity"], "[", "\"\<Dimensions\>\"", "]"}]], "Input",
 CellChangeTimes->{
  3.8959390058957453`*^9, {3.895939047073092*^9, 3.895939049670658*^9}},
 CellLabel->"In[16]:=",
 CellID->25826113,ExpressionUUID->"5752ab11-de31-4497-94f1-8cb9421f06dc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"\<\"LengthUnit\"\>", ",", 
    RowBox[{"-", "4"}]}], "}"}], "}"}]], "Output",
 CellChangeTimes->{3.895939050046238*^9, 3.895939211072673*^9, 
  3.8966148582762413`*^9},
 CellLabel->"Out[16]=",
 CellID->281459898,ExpressionUUID->"880cb556-2c76-4319-92f9-b0d1567dbff3"]
}, Open  ]],

Cell["Fractional dimensions are accepted:", "Text",
 CellChangeTimes->{{3.8959399030876255`*^9, 3.8959399081746187`*^9}},
 CellID->68769911,ExpressionUUID->"55be78b6-6d58-47c1-bda0-13859a33b0d8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{"\"\<TimeUnit\>\"", ",", 
     RowBox[{"1", "/", "2"}]}], "}"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.89593926351532*^9, 3.895939282582983*^9}},
 CellLabel->"In[17]:=",
 CellID->841197782,ExpressionUUID->"73ac1da2-4fa2-47aa-b437-737978394ded"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Missing", "[", 
   RowBox[{"\<\"UnknownProperty\"\>", ",", 
    RowBox[{"{", 
     RowBox[{"\<\"PhysicalQuantity\"\>", ",", "\<\"Entities\"\>", ",", 
      RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.895939266513565*^9, 3.895939283589525*^9}, 
   3.8959399096399593`*^9, 3.896614859798607*^9},
 CellLabel->"Out[17]=",
 CellID->129356261,ExpressionUUID->"bd93d7eb-8425-4237-ac92-211480e9ca5a"]
}, Open  ]],

Cell["Real numbers are rationalized:", "Text",
 CellChangeTimes->{{3.895939915177766*^9, 3.8959399206132555`*^9}},
 CellID->777699277,ExpressionUUID->"3858495e-f5e5-4e5c-8d9c-5c66efffb944"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{"\"\<TimeUnit\>\"", ",", "0.5"}], "}"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.89593926351532*^9, 3.895939298396395*^9}},
 CellLabel->"In[18]:=",
 CellID->321992787,ExpressionUUID->"6d7c3556-9c1d-4689-8406-0d5bb8f19fad"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"Missing", "[", 
   RowBox[{"\<\"UnknownProperty\"\>", ",", 
    RowBox[{"{", 
     RowBox[{"\<\"PhysicalQuantity\"\>", ",", "\<\"Entities\"\>", ",", 
      RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.895939294871988*^9, 3.895939299247363*^9}, 
   3.895939664939098*^9, 3.89593978200655*^9, 3.8959399221187572`*^9, 
   3.896614864657829*^9},
 CellLabel->"Out[18]=",
 CellID->69659509,ExpressionUUID->"5601bdd5-6ee5-474a-9bdf-d38e7da970eb"]
}, Open  ]],

Cell["\<\
The dimensions should be of the form {string,realnumber}. If there is \
something that does not match this the function will not evaluate:\
\>", "Text",
 CellChangeTimes->{{3.8959399241838703`*^9, 3.8959399603546305`*^9}},
 CellID->423075557,ExpressionUUID->"39b7bfe6-e1a3-4527-a272-83c6af485d0d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[<|"color" -> RGBColor[0.5, 0, 0.5]|>,
      "RGBColorSwatchTemplate"], ",", "\[ImaginaryI]"}], "}"}], "}"}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.89593926351532*^9, 3.895939298396395*^9}, {
  3.895939961138705*^9, 3.89593997673304*^9}},
 CellLabel->"In[123]:=",
 CellID->212035238,ExpressionUUID->"0c08f20f-d321-494e-889e-2ded9970a3f9"],

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[<|"color" -> RGBColor[0.5, 0, 0.5]|>,
      "RGBColorSwatchTemplate"], ",", "\[ImaginaryI]"}], "}"}], "}"}], 
  "]"}]], "Output",
 CellChangeTimes->{3.8959399772509456`*^9},
 CellLabel->"Out[123]=",
 CellID->663534326,ExpressionUUID->"18fb2e89-9ec1-4c1b-afff-1128b7eaf084"]
}, Open  ]],

Cell["This is how the function rationalizes input for one input:", "Text",
 CellChangeTimes->{{3.8959400116441326`*^9, 3.895940023591707*^9}},
 CellID->17170490,ExpressionUUID->"b94bc3e6-731f-4ed3-a6f1-3466132161bf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapAt", "[", 
  RowBox[{"Rationalize", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<TimeUnit\>\"", ",", "0.5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<LengthUnit\>\"", ",", 
       RowBox[{"-", "4"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<MassUnit\>\"", ",", 
       RowBox[{"-", "4"}]}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"All", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.8959396875470686`*^9, 3.8959397418883276`*^9}},
 CellLabel->"In[104]:=",
 CellID->599768604,ExpressionUUID->"e7fa2b8c-aba7-4ab3-a0dd-f797f916511b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"TimeUnit\"\>", ",", 
     FractionBox["1", "2"]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"LengthUnit\"\>", ",", 
     RowBox[{"-", "4"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"MassUnit\"\>", ",", 
     RowBox[{"-", "4"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{{3.895939736681344*^9, 3.895939742282902*^9}},
 CellLabel->"Out[104]=",
 CellID->367353371,ExpressionUUID->"0595b07e-92e8-407b-93c7-2da24571e5ff"]
}, Open  ]],

Cell["This is another way of inputting the same thing:", "Text",
 CellChangeTimes->{{3.8959400305259323`*^9, 3.895940037589173*^9}},
 CellID->125547410,ExpressionUUID->"f35c8ec6-e7ed-4eca-bb62-748bc92b8bf8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{"\"\<TimeUnit\>\"", ",", 
     RowBox[{"Rationalize", "@", "0.5"}]}], "}"}], "}"}], "]"}]], "Input",
 CellChangeTimes->{{3.89593926351532*^9, 3.895939313942004*^9}},
 CellLabel->"In[75]:=",
 CellID->392210860,ExpressionUUID->"373cb94a-f7b9-4653-98de-13c6c2fcb4e7"],

Cell[BoxData[
 RowBox[{"{", 
  TemplateBox[{"\"strain noise density\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"PhysicalQuantity\"", ",", "\"StrainNoiseDensity\""}], "]"}], 
    "\"Entity[\\\"PhysicalQuantity\\\", \\\"StrainNoiseDensity\\\"]\"", 
    "\"physical quantity\""},
   "Entity"], "}"}]], "Output",
 CellChangeTimes->{3.895939314631003*^9},
 CellLabel->"Out[75]=",
 CellID->87831740,ExpressionUUID->"187483e0-c17a-4199-a3af-bed514b25211"]
}, Open  ]],

Cell["This is an example of validating the input:", "Text",
 CellChangeTimes->{{3.895940040074051*^9, 3.8959400488884315`*^9}},
 CellID->400465854,ExpressionUUID->"2f97314c-826f-473b-a331-d09805591b05"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatchQ", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<LengthUnit\>\"", ",", 
       RowBox[{"-", "4"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Mass\>\"", ",", "0"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"_", "?", "StringQ"}], ",", 
       RowBox[{"_", "?", "RealValuedNumericQ"}]}], "}"}], ".."}], "}"}]}], 
  "]"}]], "Input",
 CellChangeTimes->{{3.895939219917094*^9, 3.8959392525031376`*^9}, {
  3.8959393280937786`*^9, 3.895939346181815*^9}, {3.895939443459401*^9, 
  3.895939476369938*^9}},
 CellLabel->"In[85]:=",
 CellID->2318106,ExpressionUUID->"fc9e89cd-7d27-4bd5-9718-563dee3df035"],

Cell[BoxData["True"], "Output",
 CellChangeTimes->{
  3.895939346797763*^9, {3.895939434684351*^9, 3.89593947672094*^9}},
 CellLabel->"Out[85]=",
 CellID->674469032,ExpressionUUID->"35436ac6-7f5c-43bc-8e4f-e1cc1233b4b1"]
}, Open  ]],

Cell[TextData[{
 "Find all cases of quantities of dimension ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["length", "3"], TraditionalForm]],ExpressionUUID->
  "bfcb5a3a-7e1d-4054-a506-b77f4605d136"],
 ", written ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox[
    StyleBox["L",
     FontSlant->"Plain"], "3"], TraditionalForm]],ExpressionUUID->
  "e1f8169e-e59a-45dc-adf0-23510a70cbc8"],
 ":"
}], "Text",
 CellChangeTimes->{{3.8959400548074136`*^9, 3.8959400615633545`*^9}, {
  3.8959431874437656`*^9, 3.895943211043723*^9}},
 CellID->31532544,ExpressionUUID->"b2f41b59-6702-48ed-bee5-0ac78cb8d9c4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"{", 
   RowBox[{"{", 
    RowBox[{"\"\<LengthUnit\>\"", ",", "3"}], "}"}], "}"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8597330825528264`*^9, 3.8597330928877726`*^9}, {
  3.894042119873658*^9, 3.894042122782495*^9}, {3.8959431635492167`*^9, 
  3.8959431808780985`*^9}},
 CellLabel->"In[160]:=",
 CellID->81378462,ExpressionUUID->"a8e94acf-caab-4307-8767-5357d2dade81"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"capacity\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Capacity\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Capacity\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"critical volume\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"CriticalVolume\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"CriticalVolume\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"elastic section modulus\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ElasticSectionModulus\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElasticSectionModulus\\\
\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"volume polarizability\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"ElectricVolumePolarizability\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ElectricVolumePolarizability\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"engine displacement\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"EngineDisplacement\""}], "]"}],
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"EngineDisplacement\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"volume of food or beverage\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"FoodVolume\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"FoodVolume\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"granular potential\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"GranularPotential\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"GranularPotential\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"plastic section modulus\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PlasticSectionModulus\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"PlasticSectionModulus\\\
\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"radar reflectivity factor\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"RadarReflectivityFactor\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"RadarReflectivityFactor\
\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"section modulus\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SectionModulus\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"SectionModulus\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"struck measure\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"StruckMeasure\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"StruckMeasure\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"tonnage\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Tonnage\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Tonnage\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"volume\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Volume\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Volume\\\"]\"", 
     "\"physical quantity\""},
    "Entity"]}], "}"}]], "Output",
 CellChangeTimes->{3.8959432364118257`*^9},
 CellLabel->"Out[160]=",
 CellID->325400264,ExpressionUUID->"826c3112-3998-4bf5-a3f7-8a12155dada8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"\"\<LengthUnit\>\"", ",", "3"}], "}"}], "}"}], ",", 
   "\"\<AlgebraicTypes\>\""}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8597330825528264`*^9, 3.8597330928877726`*^9}, {
  3.894042119873658*^9, 3.894042122782495*^9}, {3.8959431635492167`*^9, 
  3.8959431808780985`*^9}, {3.895957838467907*^9, 3.89595785578906*^9}},
 CellLabel->"In[584]:=",
 CellID->560832635,ExpressionUUID->"98204a9c-98b1-457b-b778-164822de84f3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", "\<\"scalar\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"complex number\"\>", ",", "\<\"scalar\"\>", 
     ",", "\<\"tensor\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", "\<\"scalar\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"scalar\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"scalar\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.895957848970912*^9, 3.895957874270817*^9}},
 CellLabel->"Out[584]=",
 CellID->524500053,ExpressionUUID->"d4ddec66-9091-4c85-9c4e-19221c79db11"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"\"\<LengthUnit\>\"", ",", "3"}], "}"}], "}"}], ",", 
   "\"\<AlgebraicTypes\>\"", ",", "\"\<List\>\""}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8597330825528264`*^9, 3.8597330928877726`*^9}, {
  3.894042119873658*^9, 3.894042122782495*^9}, {3.8959431635492167`*^9, 
  3.8959431808780985`*^9}, {3.895957838467907*^9, 3.89595785578906*^9}, {
  3.8959579484035807`*^9, 3.8959579505300922`*^9}},
 CellLabel->"In[597]:=",
 CellID->680465044,ExpressionUUID->"6db2ca63-27f8-4254-a790-8e4361bb2332"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", "\<\"scalar\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"complex number\"\>", ",", "\<\"scalar\"\>", 
     ",", "\<\"tensor\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", "\<\"scalar\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"scalar\"\>", "}"}], ",", 
   RowBox[{"{", "\<\"scalar\"\>", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"positive real\"\>", ",", "\<\"scalar\"\>"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8959579516142035`*^9},
 CellLabel->"Out[597]=",
 CellID->187166855,ExpressionUUID->"57059a7c-0e06-434e-af9c-01cde85bbbeb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"\"\<LengthUnit\>\"", ",", "3"}], "}"}], "}"}], ",", 
   "\"\<AlgebraicTypes\>\"", ",", "\"\<Dataset\>\""}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8597330825528264`*^9, 3.8597330928877726`*^9}, {
  3.894042119873658*^9, 3.894042122782495*^9}, {3.8959431635492167`*^9, 
  3.8959431808780985`*^9}, {3.895957838467907*^9, 3.89595785578906*^9}, {
  3.8959579484035807`*^9, 3.895957955666473*^9}},
 CellLabel->"In[605]:=",
 CellID->257231793,ExpressionUUID->"3249a785-6c3e-404c-a137-52d88afd4bbc"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      Entity["PhysicalQuantity", "Capacity"] -> {"positive real", "scalar"}, 
       Entity["PhysicalQuantity", "CriticalVolume"] -> {
        "positive real", "scalar"}, 
       Entity["PhysicalQuantity", "ElasticSectionModulus"] -> {"scalar"}, 
       Entity["PhysicalQuantity", "ElectricVolumePolarizability"] -> {
        "complex number", "scalar", "tensor"}, 
       Entity["PhysicalQuantity", "EngineDisplacement"] -> {
        "positive real", "scalar"}, 
       Entity["PhysicalQuantity", "FoodVolume"] -> {
        "positive real", "scalar"}, 
       Entity["PhysicalQuantity", "GranularPotential"] -> {
        "positive real", "scalar"}, 
       Entity["PhysicalQuantity", "PlasticSectionModulus"] -> {"scalar"}, 
       Entity["PhysicalQuantity", "RadarReflectivityFactor"] -> {"scalar"}, 
       Entity["PhysicalQuantity", "SectionModulus"] -> {"scalar"}, 
       Entity["PhysicalQuantity", "StruckMeasure"] -> {
        "positive real", "scalar"}, 
       Entity["PhysicalQuantity", "Tonnage"] -> {"positive real", "scalar"}, 
       Entity["PhysicalQuantity", "Volume"] -> {"positive real", "scalar"}|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[90], 
         TypeSystem`PackageScope`UnknownShape[False]]], 13, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        Entity["PhysicalQuantity"]], 
       TypeSystem`Vector[
        TypeSystem`Atom[String], TypeSystem`AnyLength], 13], "Meta" -> <||>, 
     "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`AtomShape[90], 
         TypeSystem`PackageScope`UnknownShape[False]]], 13, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Assoc[
       TypeSystem`Atom[
        Entity["PhysicalQuantity"]], 
       TypeSystem`Vector[
        TypeSystem`Atom[String], TypeSystem`AnyLength], 13], "Path" -> {}, 
     "DisplayedRowCount" -> 13, "DisplayedColumnCount" -> 1, "DataRowCount" -> 
     13, "DataColumnCount" -> 1, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["\"capacity\""], 
                  Style[
                   RawBoxes["\"capacity\""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "Capacity"]]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "Capacity"]]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "Capacity"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "Capacity"]]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["\"critical volume\""], 
                  Style[
                   RawBoxes["\"critical volume\""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "CriticalVolume"]]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "CriticalVolume"]]}, "RowHeader",
                 False], "Mouse"], ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "CriticalVolume"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "CriticalVolume"]]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["\"elastic section modulus\""], 
                  Style[
                   RawBoxes["\"elastic section modulus\""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "ElasticSectionModulus"]]}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "ElasticSectionModulus"]]}, 
                "RowHeader", False], "Mouse"], 
              ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"scalar"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"scalar"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "ElasticSectionModulus"]]}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "ElasticSectionModulus"]]}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["\"volume polarizability\""], 
                  Style[
                   RawBoxes["\"volume polarizability\""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity[
                    "PhysicalQuantity", "ElectricVolumePolarizability"]]}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity[
                  "PhysicalQuantity", "ElectricVolumePolarizability"]]}, 
                "RowHeader", False], "Mouse"], 
              ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"complex number", "scalar", "tensor"}, 
                   ShowStringCharacters -> False], 
                  Style[
                   
                   Style[{"complex number", "scalar", "tensor"}, 
                    ShowStringCharacters -> False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity[
                    "PhysicalQuantity", "ElectricVolumePolarizability"]]}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity[
                  "PhysicalQuantity", "ElectricVolumePolarizability"]]}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["\"engine displacement\""], 
                  Style[
                   RawBoxes["\"engine displacement\""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "EngineDisplacement"]]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "EngineDisplacement"]]}, 
                "RowHeader", False], "Mouse"], 
              ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "EngineDisplacement"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "EngineDisplacement"]]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["\"volume of food or beverage\""], 
                  Style[
                   RawBoxes["\"volume of food or beverage\""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "FoodVolume"]]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "FoodVolume"]]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "FoodVolume"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "FoodVolume"]]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["\"granular potential\""], 
                  Style[
                   RawBoxes["\"granular potential\""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "GranularPotential"]]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "GranularPotential"]]}, 
                "RowHeader", False], "Mouse"], 
              ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "GranularPotential"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "GranularPotential"]]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["\"plastic section modulus\""], 
                  Style[
                   RawBoxes["\"plastic section modulus\""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "PlasticSectionModulus"]]}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "PlasticSectionModulus"]]}, 
                "RowHeader", False], "Mouse"], 
              ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"scalar"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"scalar"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "PlasticSectionModulus"]]}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "PlasticSectionModulus"]]}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["\"radar reflectivity factor\""], 
                  Style[
                   RawBoxes["\"radar reflectivity factor\""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "RadarReflectivityFactor"]]}, 
                   1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "RadarReflectivityFactor"]]}, 
                "RowHeader", False], "Mouse"], 
              ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"scalar"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"scalar"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "RadarReflectivityFactor"]]}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "RadarReflectivityFactor"]]}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["\"section modulus\""], 
                  Style[
                   RawBoxes["\"section modulus\""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "SectionModulus"]]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "SectionModulus"]]}, "RowHeader",
                 False], "Mouse"], ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"scalar"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"scalar"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "SectionModulus"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "SectionModulus"]]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["\"struck measure\""], 
                  Style[
                   RawBoxes["\"struck measure\""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "StruckMeasure"]]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "StruckMeasure"]]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "StruckMeasure"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "StruckMeasure"]]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["\"tonnage\""], 
                  Style[
                   RawBoxes["\"tonnage\""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "Tonnage"]]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "Tonnage"]]}, "RowHeader", 
                False], "Mouse"], ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "Tonnage"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "Tonnage"]]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  RawBoxes["\"volume\""], 
                  Style[
                   RawBoxes["\"volume\""], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "Volume"]]}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "Volume"]]}, "RowHeader", False],
                "Mouse"], ImageSize -> {{90, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  
                  Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                   False], 
                  Style[
                   
                   Style[{"positive real", "scalar"}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    Entity["PhysicalQuantity", "Volume"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  Entity["PhysicalQuantity", "Volume"]]}, "Item", False], 
               "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{196.5, {90.56701664361171, 93.43298335638829}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{196.5, {90.56701664361171, 93.43298335638829}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8959579568790445`*^9, 3.895957989999456*^9},
 CellLabel->"Out[605]=",
 CellID->129476926,ExpressionUUID->"75ee4c5e-93b4-4b45-90d7-78261f687d9c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  TemplateBox[{"\"radar reflectivity factor\"", 
    RowBox[{"Entity", "[", 
      RowBox[{"\"PhysicalQuantity\"", ",", "\"RadarReflectivityFactor\""}], 
      "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"RadarReflectivityFactor\\\"]\"", "\"physical quantity\""},
   "Entity"], "[", "\"\<Dataset\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8959432413409605`*^9, 3.8959432426868343`*^9}},
 CellLabel->"In[569]:=",
 CellID->45631390,ExpressionUUID->"a7c1ad9f-f9aa-40e7-ad8f-42a46d11513c"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> <|
      EntityProperty["PhysicalQuantity", "Abbreviations"] -> 
       Missing["NotAvailable"], 
       EntityProperty["PhysicalQuantity", "AlgebraicTypes"] -> {"scalar"}, 
       EntityProperty["PhysicalQuantity", "AlternateNames"] -> 
       Missing["NotAvailable"], 
       EntityProperty["PhysicalQuantity", "BasePhysicalQuantity"] -> 
       Missing["NotAvailable"], 
       EntityProperty["PhysicalQuantity", "CanonicalUnit"] -> 
       Quantity[1, "Meters"^(-3) "Millimeters"^6], 
       EntityProperty["PhysicalQuantity", "Classes"] -> {}, 
       EntityProperty[
        "PhysicalQuantity", "Dimensions"] -> {{"LengthUnit", 3}}, 
       EntityProperty["PhysicalQuantity", "EntityClasses"] -> {}, 
       EntityProperty["PhysicalQuantity", "EntityTypeList"] -> {
         EntityType["PhysicalQuantity"]}, 
       EntityProperty["PhysicalQuantity", "Instances"] -> 
       Missing["NotApplicable"], EntityProperty["PhysicalQuantity", "Name"] -> 
       "radar reflectivity factor", 
       EntityProperty["PhysicalQuantity", "NamedSIUnit"] -> Missing["None"], 
       EntityProperty["PhysicalQuantity", "PhysicalPropertyType"] -> 
       Missing["NotAvailable"], 
       EntityProperty["PhysicalQuantity", "QuantityVariable"] -> 
       QuantityVariable["Z", "RadarReflectivityFactor"], 
       EntityProperty["PhysicalQuantity", "SIBaseUnit"] -> 
       Quantity[1, "Meters"^3], EntityProperty["PhysicalQuantity", "SIUnit"] -> 
       Quantity[1, "Meters"^(-3) "Millimeters"^6], 
       EntityProperty["PhysicalQuantity", "StandardIdentifiers"] -> <||>, 
       EntityProperty["PhysicalQuantity", "StandardSymbols"] -> <||>, 
       EntityProperty["PhysicalQuantity", "Symbols"] -> {}|>, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`UnknownShape[False]]], 19, 
       DirectedInfinity[1], {}], "InitialType" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 19], 
     "Meta" -> <||>, "RowTarget" -> 20, "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`KeyValueShape[
         TypeSystem`PackageScope`UnknownShape[True], 
         TypeSystem`PackageScope`UnknownShape[False]]], 19, 
       DirectedInfinity[1], {}], "Type" -> 
     TypeSystem`Assoc[TypeSystem`AnyType, TypeSystem`AnyType, 19], 
     "Path" -> {}, "DisplayedRowCount" -> 19, "DisplayedColumnCount" -> 1, 
     "DataRowCount" -> 19, "DataColumnCount" -> 1, "SortPaths" -> {}, 
     "SortDirections" -> {}, "HiddenItemsMap" -> Null, "UpdateType" -> 1|>, 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               RawBoxes["\"abbreviations\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Abbreviations"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"algebraic types\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{"scalar"}, ShowStringCharacters -> False], 
                  Style[
                   Style[{"scalar"}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "AlgebraicTypes"]]}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"alternate names\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "AlternateNames"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"base physical quantity\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty[
                  "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty[
                  "PhysicalQuantity", "BasePhysicalQuantity"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"canonical unit\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                RowBox[{"1", 
                  RowBox[{
                    SuperscriptBox["\"mm\"", "6"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"m\"", "3"]}]}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "CanonicalUnit"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"classes\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Classes"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"dimensions\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Dimensions"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{{"LengthUnit", 3}}, ShowStringCharacters -> False], 
                  Style[
                   Style[{{"LengthUnit", 3}}, ShowStringCharacters -> False], 
                   FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "Dimensions"]]}, 4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Dimensions"]]}, "Item", 
                False], "Mouse"], ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"entity classes\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "EntityClasses"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"entity type list\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "EntityTypeList"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover[
                  Style[{
                    EntityType["PhysicalQuantity"]}, ShowStringCharacters -> 
                   False], 
                  Style[
                   Style[{
                    EntityType["PhysicalQuantity"]}, ShowStringCharacters -> 
                    False], FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                    Key[
                    EntityProperty["PhysicalQuantity", "EntityTypeList"]]}, 
                   4]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "EntityTypeList"]]}, 
                "Item", False], "Mouse"], 
              ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"instances\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Instances"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Instances"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"name\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation["radar reflectivity factor", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Name"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{280., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"named SI unit\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, "Item",
                 False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "NamedSIUnit"]]}, "Item",
                 False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"physical property type\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty[
                  "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               Style["\[LongDash]", 
                GrayLevel[0.75]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty[
                  "PhysicalQuantity", "PhysicalPropertyType"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"quantity variable\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                StyleBox[
                 
                 TemplateBox[{"\"Z\"", "\"RadarReflectivityFactor\""}, 
                  "QuantityVariable", DisplayFunction -> (TooltipBox[
                    
                    StyleBox[#, FontColor -> GrayLevel[0.4], 
                    ShowStringCharacters -> False], 
                    
                    RowBox[{
                    "Quantity variable:", " radar reflectivity factor"}], 
                    TooltipStyle -> "TextStyling"]& )], FontFamily -> Dynamic[
                   CurrentValue[{"StyleHints", "CodeFont"}]], 
                 ShowStringCharacters -> True]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "QuantityVariable"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"SI base unit\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                RowBox[{"1", 
                  RowBox[{
                    SuperscriptBox["\"m\"", "3"]}]}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "SIBaseUnit"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"SI unit\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                RowBox[{"1", 
                  RowBox[{
                    SuperscriptBox["\"mm\"", "6"], "\[NegativeMediumSpace]", 
                    "\"/\"", "\[InvisibleSpace]", 
                    SuperscriptBox["\"m\"", "3"]}]}]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "SIUnit"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{75, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"standard identifiers\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "StandardIdentifiers"]]},
                 "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[<||>, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"standard symbols\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "StandardSymbols"]]}, 
                "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[<||>, ImageMargins -> {{5, 3}, {4, 5}}]]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["\"symbols\""], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                 Key[
                  EntityProperty["PhysicalQuantity", "Symbols"]]}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[{}, ImageMargins -> {{5, 3}, {4, 5}}]]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{354.5, {134.5670166436117, 137.4329833563883}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{354.5, {134.5670166436117, 137.4329833563883}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.8959432473331785`*^9, 3.895943283825294*^9}, 
   3.8959437684240017`*^9, 3.895943957037985*^9, 3.895957805016467*^9},
 CellLabel->"Out[569]=",
 CellID->321661361,ExpressionUUID->"d600189f-62db-4fbe-a666-607272f5bb32"]
}, Open  ]],

Cell["Find the units ", "Text",
 CellChangeTimes->{{3.8959432229693747`*^9, 3.895943225816273*^9}},
 CellID->25619548,ExpressionUUID->"b7684917-b480-4640-8114-42d1a4ef712d"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Possible Issues", "Subsection",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->471245215,ExpressionUUID->"afae3492-0078-404e-889e-616da3d65829"],

Cell["\<\
Another difficulty arises when measuring angles. Angles do not have a clear \
definition, unlike the 7 SI base quantities:\
\>", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8597333983438325`*^9, 3.8597334260606146`*^9}, {
  3.895943780939985*^9, 3.895943801379116*^9}},
 CellID->563505655,ExpressionUUID->"79ccaac6-c8ad-4ecc-8218-6ad7cf2df035"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"<|", 
   RowBox[{"\"\<AngleUnit\>\"", "->", "1"}], "|>"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8597334310311737`*^9, 3.8597334402622924`*^9}},
 CellLabel->"In[46]:=",
 CellID->566772961,ExpressionUUID->"a1701890-3d6f-47d5-b316-ba42e7bd4932"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"absolute bearing\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AbsoluteBearing\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AbsoluteBearing\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"altitude angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AltitudeAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AltitudeAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"plane angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Angle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Angle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angle of attack\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfAttack\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngleOfAttack\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angle of deviation\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfDeviation\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngleOfDeviation\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angle of incidence\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfIncidence\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngleOfIncidence\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angle of optical rotation\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfOpticalRotation\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngleOfOpticalRotation\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angle of reflection\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfReflection\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngleOfReflection\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angle of refraction\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfRefraction\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngleOfRefraction\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angle of repose\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfRepose\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngleOfRepose\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angle of vanishing stability\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngleOfVanishingStability\""}],
        "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngleOfVanishingStability\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angular diameter\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularDiameter\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularDiameter\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angular displacement\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularDisplacement\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngularDisplacement\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angular eccentricity\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularEccentricity\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"AngularEccentricity\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angular elongation\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularElongation\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularElongation\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angular radius\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularRadius\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularRadius\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angular resolution\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularResolution\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularResolution\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"angular resolving power\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AngularResolvingPower\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"AngularResolvingPower\\\
\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"argument of periapsis\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ArgumentOfPeriapsis\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"ArgumentOfPeriapsis\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"axial tilt\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AxialTilt\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AxialTilt\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"azimuth\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Azimuth\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Azimuth\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"bearing\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Bearing\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Bearing\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"Bragg angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"BraggAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"BraggAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"Brewster angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"BrewsterAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"BrewsterAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"colatitude\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Colatitude\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Colatitude\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"compass bearing\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"CompassBearing\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"CompassBearing\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"critical angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"CriticalAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"CriticalAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"declination\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Declination\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Declination\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"diffraction angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"DiffractionAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"DiffractionAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"eccentric anomaly\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"EccentricAnomaly\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"EccentricAnomaly\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"Einstein angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"EinsteinAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"EinsteinAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"electric phase difference\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ElectricPhaseDifference\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"ElectricPhaseDifference\
\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"friction angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"FrictionAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"FrictionAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"geocentric ecliptic latitude\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"GeocentricEclipticLatitude\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GeocentricEclipticLatitude\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"geocentric ecliptic longitude\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"GeocentricEclipticLongitude\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GeocentricEclipticLongitude\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"grade\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Grade\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Grade\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"greatest eastern elongation\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"GreatestEasternElongation\""}],
        "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GreatestEasternElongation\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"greatest elongation\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"GreatestElongation\""}], "]"}],
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"GreatestElongation\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"greatest western elongation\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"GreatestWesternElongation\""}],
        "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"GreatestWesternElongation\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"grid bearing\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"GridBearing\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"GridBearing\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"heading\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Heading\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Heading\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"heliocentric ecliptic latitude\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"HeliocentricEclipticLatitude\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"HeliocentricEclipticLatitude\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"heliocentric ecliptic longitude\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"HeliocentricEclipticLongitude\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"HeliocentricEclipticLongitude\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"hour angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"HourAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"HourAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"infinitesimal angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"InfinitesimalAngle\""}], "]"}],
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"InfinitesimalAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"latitude\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Latitude\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Latitude\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"local hour angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"LocalHourAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"LocalHourAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"longitude\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Longitude\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Longitude\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"longitude of the ascending node\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"LongitudeOfTheAscendingNode\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"LongitudeOfTheAscendingNode\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"loss angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"LossAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"LossAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"magnetic bearing\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"MagneticBearing\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"MagneticBearing\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"magnetic heading\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"MagneticHeading\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"MagneticHeading\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"mean anomaly\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"MeanAnomaly\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"MeanAnomaly\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"minimum angle of resolution\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"MinimumAngleOfResolution\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"MinimumAngleOfResolution\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"optical angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"OpticalAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"OpticalAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"orbital inclination\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"OrbitalInclination\""}], "]"}],
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"OrbitalInclination\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"phase angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PhaseAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"PhaseAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"phase difference\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PhaseDifference\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"PhaseDifference\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"phase shift\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PhaseShift\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"PhaseShift\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"pitch angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PitchAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"PitchAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"planar polar angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PolarAngle2D\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"PolarAngle2D\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"polarization orientation\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PolarizationOrientation\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \\\"PolarizationOrientation\
\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"relative bearing\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"RelativeBearing\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"RelativeBearing\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"right ascension\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"RightAscension\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"RightAscension\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"roll angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"RollAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"RollAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"scattering angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ScatteringAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ScatteringAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"sidereal hour angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SiderealHourAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"SiderealHourAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"solar hour angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SolarHourAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"SolarHourAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"spiral angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SpiralAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"SpiralAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"tilt\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Tilt\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Tilt\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"true angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"TrueAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"TrueAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"true anomaly\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"TrueAnomaly\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"TrueAnomaly\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"true bearing\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"TrueBearing\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"TrueBearing\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"twist angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"TwistAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"TwistAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"visual angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"VisualAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"VisualAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"yaw\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Yaw\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Yaw\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"zenith angle\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"ZenithAngle\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"ZenithAngle\\\"]\"", 
     "\"physical quantity\""},
    "Entity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.859733442019226*^9, 3.8940421493710375`*^9, 
  3.895938927621128*^9},
 CellLabel->"Out[46]=",
 CellID->73270063,ExpressionUUID->"e07bf0e5-0c49-431b-94cf-35fb8b5a527c"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData["\"\<Information\>\""], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "99ae5a57-2241-4da7-9955-64edb2a54b1c"],
 " is another quantity that has a unique relationship with dimensional \
analysis:"
}], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.859733483339453*^9, 3.859733509489422*^9}, {
  3.8599085955108128`*^9, 3.859908629692116*^9}},
 CellID->42521031,ExpressionUUID->"50ec65e3-3b05-463e-abbc-cab1e8d2e7b9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"<|", 
   RowBox[{"\"\<InformationUnit\>\"", "->", "1"}], "|>"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.859733510692955*^9, 3.8597335194940834`*^9}},
 CellLabel->"In[47]:=",
 CellID->1013036962,ExpressionUUID->"2c7a14bb-25af-4b3c-8272-0a0ed5afa288"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"information\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Information\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Information\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"information entropy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"InformationEntropy\""}], "]"}],
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"InformationEntropy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"information negentropy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"InformationNegentropy\""}], 
       "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"InformationNegentropy\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"relative information entropy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{
        "\"PhysicalQuantity\"", ",", "\"RelativeInformationEntropy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"RelativeInformationEntropy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"skew information entropy\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SkewInformationEntropy\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"SkewInformationEntropy\\\"]\"", "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"spectral efficiency\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"SpectralEfficiency\""}], "]"}],
      "\"Entity[\\\"PhysicalQuantity\\\", \\\"SpectralEfficiency\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"word size\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"WordSize\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"WordSize\\\"]\"", 
     "\"physical quantity\""},
    "Entity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.859733521022828*^9, 3.8940421554240894`*^9, 
  3.895938932117346*^9},
 CellLabel->"Out[47]=",
 CellID->674542995,ExpressionUUID->"6fda6451-4f69-4513-ad90-cfa1f7c40f40"]
}, Open  ]],

Cell["\<\
There are other physical quantity entities with specialized dimensions:\
\>", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8597331969506245`*^9, 3.85973321308972*^9}, {
  3.8597333689635673`*^9, 3.859733374060176*^9}},
 CellID->661223408,ExpressionUUID->"9e716a26-8f3f-4da6-abf9-a6f9d5d15e37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Union", "[", 
   RowBox[{"Flatten", "[", 
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"#", "[", "\"\<Dimensions\>\"", "]"}], "[", 
       RowBox[{"[", 
        RowBox[{"All", ",", "1"}], "]"}], "]"}], "&"}], "/@", 
     RowBox[{"RandomEntity", "[", 
      RowBox[{"\"\<PhysicalQuantity\>\"", ",", "3022"}], "]"}]}], "]"}], 
   "]"}], "//", 
  RowBox[{
   RowBox[{"Short", "[", 
    RowBox[{"#", ",", "8"}], "]"}], "&"}]}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8597332144585514`*^9, 3.8597332428050547`*^9}, {
  3.859733350891814*^9, 3.859733354678627*^9}},
 CellLabel->"In[48]:=",
 CellID->21871981,ExpressionUUID->"606c9b00-849f-4945-8da6-425d5cbff475"],

Cell[BoxData[
 TagBox[
  RowBox[{"{", 
   RowBox[{"\<\"AllergenicPotencyUnit\"\>", ",", "\<\"AmountUnit\"\>", 
    ",", "\<\"AngleUnit\"\>", ",", "\<\"ArrivalUnit\"\>", 
    ",", "\<\"AtomUnit\"\>", ",", "\<\"BackUnit\"\>", 
    ",", "\<\"BacteriumUnit\"\>", ",", "\<\"BagelUnit\"\>", 
    ",", "\<\"BagUnit\"\>", ",", "\<\"BarUnit\"\>", ",", "\<\"BaryonUnit\"\>",
     ",", "\<\"BasePairUnit\"\>", ",", "\<\"BatchUnit\"\>", 
    ",", "\<\"BeanUnit\"\>", ",", 
    RowBox[{"\[LeftSkeleton]", "163", "\[RightSkeleton]"}], 
    ",", "\<\"TemperatureUnit\"\>", ",", "\<\"ThighUnit\"\>", 
    ",", "\<\"TimeUnit\"\>", ",", "\<\"TortillaUnit\"\>", 
    ",", "\<\"TurnUnit\"\>", ",", "\<\"VirusUnit\"\>", 
    ",", "\<\"VisitUnit\"\>", ",", "\<\"WaferUnit\"\>", 
    ",", "\<\"WaffleUnit\"\>", ",", "\<\"WedgeUnit\"\>", 
    ",", "\<\"WindingUnit\"\>", ",", "\<\"WingUnit\"\>", 
    ",", "\<\"WordUnit\"\>", ",", "\<\"WrapUnit\"\>"}], "}"}],
  Short[#, 8]& ]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.859733238718536*^9, 3.859733280851214*^9, 
  3.85973337705245*^9, 3.8940421648416505`*^9, 3.895938977422024*^9},
 CellLabel->"Out[48]//Short=",
 CellID->701707413,ExpressionUUID->"bf68f196-f4f2-437d-bd13-059ff123807c"]
}, Open  ]],

Cell["\<\
There are also specialized units for human societies and interactions and \
economics:\
\>", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8597335418912444`*^9, 3.85973355932053*^9}},
 CellID->635277921,ExpressionUUID->"ba89daf8-9fdc-4a12-93ca-6c159ff9a494"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"<|", 
   RowBox[{"\"\<PersonUnit\>\"", "->", "1"}], "|>"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8597335601167526`*^9, 3.8597335658155637`*^9}},
 CellLabel->"In[49]:=",
 CellID->438548092,ExpressionUUID->"026bb2a5-947f-43ef-99b5-7f1c991ec1e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"average population\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"AveragePopulation\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"AveragePopulation\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"human population\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"HumanPopulation\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"HumanPopulation\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"person count\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"PersonCount\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"PersonCount\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"population\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Population\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Population\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"world population\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"WorldPopulation\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"WorldPopulation\\\"]\"", 
     "\"physical quantity\""},
    "Entity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8597335674883127`*^9, 3.8940421677713013`*^9, 
  3.895938978671595*^9},
 CellLabel->"Out[49]=",
 CellID->346025757,ExpressionUUID->"d0cb1003-80c8-4c0b-bb4a-cdf90ba0c2fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{"<|", 
   RowBox[{"\"\<MoneyUnit\>\"", "->", "1"}], "|>"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.859733566916554*^9, 3.859733581031067*^9}},
 CellLabel->"In[50]:=",
 CellID->298127596,ExpressionUUID->"44e7d812-d57f-4636-9918-dd916f3c8186"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"amount of money\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"Money\""}], "]"}], 
     "\"Entity[\\\"PhysicalQuantity\\\", \\\"Money\\\"]\"", 
     "\"physical quantity\""},
    "Entity"], ",", 
   TemplateBox[{"\"money per CPU clock rate time\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"PhysicalQuantity\"", ",", "\"MoneyPerCPUClockRateTime\""}], 
       "]"}], "\"Entity[\\\"PhysicalQuantity\\\", \
\\\"MoneyPerCPUClockRateTime\\\"]\"", "\"physical quantity\""},
    "Entity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8597335825727773`*^9, 3.894042169926577*^9, 
  3.8959389799311514`*^9},
 CellLabel->"Out[50]=",
 CellID->99525029,ExpressionUUID->"48db3d72-6089-4390-9f07-3528d9d5eaae"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ExactDimensionMatches", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{"\"\<MoneyUnit\>\"", "->", "1"}], "|>"}], ",", 
   "\"\<AlgebraicTypes\>\""}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.859733566916554*^9, 3.859733581031067*^9}, {
  3.895958082380966*^9, 3.8959581007776303`*^9}, {3.8959581917574277`*^9, 
  3.895958197372938*^9}},
 CellLabel->"In[621]:=",
 CellID->165525671,ExpressionUUID->"3efc6289-81fb-4b7c-8aa8-d55c2a90eabe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PhysicalQuantity\"\>", ",", "\<\"AlgebraicTypes\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"PhysicalQuantity\"\>", ",", "\<\"AlgebraicTypes\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.8959580883357754`*^9, 3.8959581027526903`*^9}, 
   3.895958198426939*^9},
 CellLabel->"Out[621]=",
 CellID->373215446,ExpressionUUID->"44fb17c0-33c3-4761-830f-d384a6a37016"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"EntityValue", "[", 
  RowBox[{
   RowBox[{"EntityClass", "[", 
    RowBox[{"\"\<Planet\>\"", ",", "All"}], "]"}], ",", "\"\<Name\>\"", ",", 
   "\"\<List\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8959582062628*^9, 3.895958219116502*^9}},
 CellLabel->"In[622]:=",
 CellID->205791185,ExpressionUUID->"a56d6ebf-c49b-4ae7-83a2-3e8b2fc4c0cd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Planet\"\>", ",", "\<\"Name\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Planet\"\>", ",", "\<\"Name\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Planet\"\>", ",", "\<\"Name\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Planet\"\>", ",", "\<\"Name\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Planet\"\>", ",", "\<\"Name\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Planet\"\>", ",", "\<\"Name\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Planet\"\>", ",", "\<\"Name\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}], ",", 
   RowBox[{"Missing", "[", 
    RowBox[{"\<\"UnknownProperty\"\>", ",", 
     RowBox[{"{", 
      RowBox[{"\<\"Planet\"\>", ",", "\<\"Name\"\>", ",", 
       RowBox[{"{", "}"}], ",", "\<\"List\"\>"}], "}"}]}], "]"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8959582199805326`*^9},
 CellLabel->"Out[622]=",
 CellID->409530971,ExpressionUUID->"4fc7778c-e9f8-4db5-bc47-eae9346e7cf9"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Neat Examples", "Subsection",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->303071976,ExpressionUUID->"c2feff69-60ed-4b74-b83b-9f460798320a"],

Cell["\<\
Make an interactive manipulation for the seven SI base dimensions:\
\>", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.85973359815187*^9, 3.8597336146680107`*^9}},
 CellID->36141950,ExpressionUUID->"eaffc869-b1fb-43f1-a858-6679a2fbd491"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"ExactDimensionMatches", "[", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<TimeUnit\>\"", "->", "time"}], ",", 
      RowBox[{"\"\<LengthUnit\>\"", "->", "length"}], ",", 
      RowBox[{"\"\<MassUnit\>\"", "->", "mass"}], ",", 
      RowBox[{"\"\<ElectricCurrentUnit\>\"", "->", "electriccurrent"}], ",", 
      RowBox[{"\"\<AmountUnit\>\"", "->", "amountofsubstance"}], ",", 
      RowBox[{"\"\<TemperatureUnit\>\"", "->", "temperature"}], ",", 
      RowBox[{"\"\<LuminousIntensityUnit\>\"", "->", "luminousintensity"}]}], 
     "|>"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"time", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "4"}], ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"length", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "4"}], ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"mass", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "4"}], ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"electriccurrent", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "4"}], ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"amountofsubstance", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "4"}], ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"temperature", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "4"}], ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"luminousintensity", ",", "0"}], "}"}], ",", 
     RowBox[{"-", "4"}], ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"SaveDefinitions", "\[Rule]", "True"}]}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.859733615850672*^9, 3.8597337894141264`*^9}, {
  3.895940452266754*^9, 3.895940485479397*^9}},
 CellLabel->"In[618]:=",
 CellID->621896598,ExpressionUUID->"1fd96cbb-c455-485c-a349-4f014d60d4cf"],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`amountofsubstance$$ = 
    0, $CellContext`electriccurrent$$ = 0, $CellContext`length$$ = 
    0, $CellContext`luminousintensity$$ = 0, $CellContext`mass$$ = 
    0, $CellContext`temperature$$ = 0, $CellContext`time$$ = 0, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`time$$], 0}, -4, 4, 1}, {{
       Hold[$CellContext`length$$], 0}, -4, 4, 1}, {{
       Hold[$CellContext`mass$$], 0}, -4, 4, 1}, {{
       Hold[$CellContext`electriccurrent$$], 0}, -4, 4, 1}, {{
       Hold[$CellContext`amountofsubstance$$], 0}, -4, 4, 1}, {{
       Hold[$CellContext`temperature$$], 0}, -4, 4, 1}, {{
       Hold[$CellContext`luminousintensity$$], 0}, -4, 4, 1}}, 
    Typeset`size$$ = {305.7949214935303, {2671., 8.75}}, Typeset`update$$ = 0,
     Typeset`initDone$$, Typeset`skipInitDone$$ = False}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`amountofsubstance$$ = 
        0, $CellContext`electriccurrent$$ = 0, $CellContext`length$$ = 
        0, $CellContext`luminousintensity$$ = 0, $CellContext`mass$$ = 
        0, $CellContext`temperature$$ = 0, $CellContext`time$$ = 0}, 
      "ControllerVariables" :> {}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, 
      "Body" :> $CellContext`ExactDimensionMatches[<|
        "TimeUnit" -> $CellContext`time$$, 
         "LengthUnit" -> $CellContext`length$$, 
         "MassUnit" -> $CellContext`mass$$, 
         "ElectricCurrentUnit" -> $CellContext`electriccurrent$$, 
         "AmountUnit" -> $CellContext`amountofsubstance$$, 
         "TemperatureUnit" -> $CellContext`temperature$$, 
         "LuminousIntensityUnit" -> $CellContext`luminousintensity$$|>], 
      "Specifications" :> {{{$CellContext`time$$, 0}, -4, 4, 
         1}, {{$CellContext`length$$, 0}, -4, 4, 
         1}, {{$CellContext`mass$$, 0}, -4, 4, 
         1}, {{$CellContext`electriccurrent$$, 0}, -4, 4, 
         1}, {{$CellContext`amountofsubstance$$, 0}, -4, 4, 
         1}, {{$CellContext`temperature$$, 0}, -4, 4, 
         1}, {{$CellContext`luminousintensity$$, 0}, -4, 4, 1}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{476., {1355.0670166436116`, 1357.9329833563884`}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    Initialization:>({$CellContext`ExactDimensionMatches[
         PatternTest[
          Pattern[$CellContext`dimensions, 
           Blank[]], 
          Function[{$CellContext`l}, 
           MatchQ[$CellContext`l, {
             Repeated[{
               PatternTest[
                Blank[], StringQ], 
               PatternTest[
                Blank[], RealValuedNumericQ]}]}], {}]], 
         Optional[
          Pattern[$CellContext`property, 
           Blank[]], "Entities"], 
         Optional[
          Pattern[$CellContext`form, 
           Blank[]], "List"]] := EntityValue[
         FilteredEntityClass["PhysicalQuantity", 
          EntityFunction[$CellContext`physicalQuantityDimension, 
           ContainsExactly[
            MapAt[Rationalize, 
             Cases[$CellContext`dimensions, {
               Blank[], 
               Except[0]}], {All, 2}]][
            $CellContext`physicalQuantityDimension[
            "Dimensions"]]]], $CellContext`property, $CellContext`form], \
$CellContext`ExactDimensionMatches[
         PatternTest[
          Pattern[$CellContext`dimensions, 
           Blank[]], 
          Function[{$CellContext`l}, 
           AssociationQ[$CellContext`l], {}]], 
         Optional[
          Pattern[$CellContext`property, 
           Blank[]], "Entities"], 
         Optional[
          Pattern[$CellContext`form, 
           Blank[]], "List"]] := $CellContext`ExactDimensionMatches[
         Transpose[
          ({
           Keys[#], 
           
           Values[#]}& )[$CellContext`dimensions]], $CellContext`property, \
$CellContext`form], $CellContext`ExactDimensionMatches[
         PatternTest[
          Pattern[$CellContext`unit, 
           Blank[]], 
          Function[{$CellContext`l}, 
           QuantityQ[$CellContext`l], {}]], 
         Optional[
          Pattern[$CellContext`property, 
           Blank[]], "Entities"], 
         Optional[
          Pattern[$CellContext`form, 
           Blank[]], "List"]] := $CellContext`ExactDimensionMatches[
         UnitDimensions[$CellContext`unit], $CellContext`property, \
$CellContext`form], $CellContext`ExactDimensionMatches[
         Pattern[$CellContext`args, 
          BlankNullSequence[]]] := Condition[Null, 
         CheckArguments[
          $CellContext`ExactDimensionMatches[$CellContext`args], {1, 3}]], 
       TagSet[$CellContext`ExactDimensionMatches, 
        MessageName[$CellContext`ExactDimensionMatches, "usage"], 
        "ExactDimensionMatches[{{dimensionname1,dimensionpower1},{\
dimensionname2,dimensionpower2},\[Ellipsis]}] gives a list of all physical \
quantity dimension entities that match the dimension specifications in list \
exactly by having the exact dimensions \
dimensionname1^dimensionpower1*dimensionname2^dimensionpower^2*\[Ellipsis] \
and so on. \
ExactDimensionMatches[<|dimensionname1->dimensionpower1,dimensionname2->\
dimensionpower2,\[Ellipsis]|>] does the same thing but for an association. \
ExactDimensionMatches[quantity] computes the dimensions for quantity and \
gives that as input to ExactDimensionMatches."]}; Typeset`initDone$$ = True),
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.8597337732581244`*^9, 3.859733789702485*^9}, {
   3.894042174454685*^9, 3.8940421812453346`*^9}, 3.8959389805266514`*^9, {
   3.8959404064759197`*^9, 3.895940492371031*^9}, 3.89594057710423*^9, 
   3.8959580740888605`*^9},
 CellLabel->"Out[618]=",
 CellID->870738960,ExpressionUUID->"590e2505-6a21-4638-a9d8-eeaed61f3d68"]
}, Open  ]],

Cell["\<\
There was a bug in this cell. I had Time but needed TimeUnit and Length but \
needed LengthUnit and so on. I fixed it.\
\>", "AuthorComment",
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      TemplateBox[{
        StyleBox[
        "\"burbery1@marshall.edu\"", ShowStringCharacters -> False, 
         StripOnInput -> False], 3.895940683904664`17.343187325238965*^9}, 
       "CommentCellLabelTemplate"]], Background -> None]}, {None, None}},
 CellChangeTimes->{{3.895940685939846*^9, 3.895940706359599*^9}},
 CellTags->{"AuthorComment", "CommentCell"},
 CellID->107190525,ExpressionUUID->"025e3242-33ba-4802-9983-3ab40848b1ed"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Source & Additional Information", "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Source & Additional Information"},
 CellTags->{"Source & Additional Information", "TemplateSection"},
 CellID->871630328,ExpressionUUID->"940a8cbc-fe8b-462d-a137-2c202cb9ee05"],

Cell[CellGroupData[{

Cell[TextData[{
 "Contributed By",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Contributed By", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Enter the name of the person, people or organization that should be \
publicly credited with contributing this function.", "MoreInfoText"], 
        Background -> GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> 
        GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoContributedBy"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "a8fd9535-8762-4a03-b9b2-da0197d23345"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Contributed By"},
 DefaultNewCellStyle->"Text",
 CellTags->{"Contributed By", "ContributorInformation", "TemplateCellGroup"},
 CellID->771147648,ExpressionUUID->"f9e2c84a-e565-4652-a8d0-700016a9e0b7"],

Cell["Peter Cullen Burbery", "Text",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.8597346636019897`*^9, 3.8597346651240864`*^9}, {
  3.8959438231330104`*^9, 3.8959438241422296`*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->855757352,ExpressionUUID->"94f21c0f-b2d9-472a-94e1-6a459f7b9960"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Keywords",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Keywords", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List relevant terms (e.g. functional areas, algorithm names, related \
concepts) that should be used to include the function in search results.", 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoKeywords"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "6b04a4a4-2025-48df-84e3-6d831cae118f"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Keywords"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Keywords", "TemplateCellGroup"},
 CellID->854882061,ExpressionUUID->"59824d59-ffb7-485e-b0dd-dd6ba5d0b369"],

Cell["dimensional analysis", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.8940421886678925`*^9, 3.894042192377637*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->560424104,ExpressionUUID->"5b6e51b5-379e-43e1-bdbc-1bbd1f92acf0"],

Cell["metrology", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.8940421886678925`*^9, 3.8940421939642344`*^9}, {
  3.8959370204621053`*^9, 3.895937020561944*^9}},
 CellID->155887662,ExpressionUUID->"99b2820d-7ad4-4e7a-9795-57e875bb9264"],

Cell["units", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.8940421886678925`*^9, 3.8940421939642344`*^9}, {
  3.895937020820841*^9, 3.8959370221234217`*^9}},
 CellID->16522560,ExpressionUUID->"85d1c21b-6fa8-4271-99a2-bf2eba04bef4"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Categories", "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Categories"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Categories", "TemplateCellGroup"},
 CellID->193940140,ExpressionUUID->"b6561e30-6319-498a-9e1d-8d9d7af1678a"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Cloud & Deployment"}], "\" \"", 
            "\"Cloud & Deployment\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "External Interfaces & Connections"}], 
            "\" \"", "\"External Interfaces & Connections\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Graphs & Networks"}], "\" \"", 
            "\"Graphs & Networks\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[
            "Knowledge Representation & Natural Language", {
             False, "Knowledge Representation & Natural Language"}], "\" \"", 
            "\"Knowledge Representation & Natural Language\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Repository Tools"}], "\" \"", 
            "\"Repository Tools\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Strings & Text"}], "\" \"", 
            "\"Strings & Text\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "User Interface Construction"}], 
            "\" \"", "\"User Interface Construction\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Core Language & Structure"}], "\" \"",
             "\"Core Language & Structure\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Financial Data & Computation"}], 
            "\" \"", "\"Financial Data & Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Higher Mathematical Computation"}], 
            "\" \"", "\"Higher Mathematical Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Machine Learning"}], "\" \"", 
            "\"Machine Learning\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[
            "Scientific and Medical Data & Computation", {
             False, "Scientific and Medical Data & Computation"}], "\" \"", 
            "\"Scientific and Medical Data & Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Symbolic & Numeric Computation"}], 
            "\" \"", "\"Symbolic & Numeric Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Visualization & Graphics"}], "\" \"", 
            "\"Visualization & Graphics\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Data Manipulation & Analysis"}], 
            "\" \"", "\"Data Manipulation & Analysis\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Geographic Data & Computation"}], 
            "\" \"", "\"Geographic Data & Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Images"}], "\" \"", "\"Images\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Notebook Documents & Presentation"}], 
            "\" \"", "\"Notebook Documents & Presentation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Social, Cultural & Linguistic Data"}],
             "\" \"", "\"Social, Cultural & Linguistic Data\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "System Operation & Setup"}], "\" \"", 
            "\"System Operation & Setup\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Wolfram Physics Project"}], "\" \"", 
            "\"Wolfram Physics Project\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Engineering Data & Computation"}], 
            "\" \"", "\"Engineering Data & Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Geometry"}], "\" \"", "\"Geometry\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Just For Fun"}], "\" \"", 
            "\"Just For Fun\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Programming Utilities"}], "\" \"", 
            "\"Programming Utilities\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Sound & Video"}], "\" \"", 
            "\"Sound & Video\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Time-Related Computation"}], "\" \"", 
            "\"Time-Related Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {"\<\"\"\>"}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxVj9FqwzAMRelo12SMfYOfCnvIR4S0hcJGS9UfcJ2bzdSxjSU/5O/\
nUCjrk4Surs5VWzW0Ipkc6PWYJWZpaN39wtzQDwteflkW+iRj4cUO1ijte/\
WN3hrt1FaLVhvVhbH4tNjgy7GDYGSu2yxhLDPTUHVKISLJRG+dFvyEZMEFc4yzhYeXO2au5+\
zA1a63oq+lW+21YzyEeguH/8qcNbg8+\
mfgx8ELUky4h6K69RPlK6M8934Gh5wMLlMEVfvszbzzB352W9U="},
 CellChangeTimes->{{3.8959370497149897`*^9, 3.895937049877925*^9}},
 CellTags->{"Categories-Checkboxes", "CheckboxCell"},
 CellID->248457794,ExpressionUUID->"54a36d4f-a826-4749-bf05-8794384e971a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Related Symbols",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Related Symbols", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List up to twenty documented, system-level Wolfram Language symbols \
related to the function.", "MoreInfoText"], Background -> GrayLevel[0.95], 
        FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5,
         ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoRelatedSymbols"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "d072978b-9deb-4ea3-8fa2-9f4183721b27"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Related Symbols"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Related Symbols", "TemplateCellGroup"},
 CellID->525877127,ExpressionUUID->"4cca4fd4-ca84-44a7-8d29-0e74f689f5a1"],

Cell["\<\
This needs to have related symbols filled in, for example UnitDimensions.\
\>", "ReviewerComment",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "Signature" -> 
   "OEM6eJxLYywWcMlMzyxJzAnOTM9LLCktSnVk1w1mCaksSA3mdc3JySwoyUx2Li0qS9UN5gTTfo\
m5qcGcxanJBUamZtmGusG8cK1gXQJ++XkuqSWpRbmZeZnFQN1AFR6JxRmZeem+qSUZ+\
SnBbMEejkC9usGMQU4KsZwzuhSfZp3Zuj/U9O464Z/\
ZhgYth7ZXz9Y7tPGgt59xK1BVsJOCzcytEy1XH3R9d23tsqD8DuOYxY9enHnl5Hokzmid1s0DfbrBg\
kGpyfllqUWVAYlFQBcC7XdmAACM71cD"},
 CellFrameLabels->{{None, 
    Cell[
     BoxData[
      TemplateBox[{
        StyleBox[
         TemplateBox[{"\"WFR Team\""}, "ReviewerCommentLabelTemplate"], 
         ShowStringCharacters -> False, StripOnInput -> False], 
        3.859908690054149`16.339152020289045*^9}, 
       "CommentCellLabelTemplate"]], Background -> None]}, {None, None}},
 CellChangeTimes->{{3.859908693062333*^9, 3.859908737481681*^9}},
 CellTags->{"CommentCell", "ReviewerComment"},
 CellID->520921772,ExpressionUUID->"f81a4746-81b2-4976-bff8-39fd8a215692"],

Cell["UnitDimensions", "Subitem",
 TaggingRules->{},
 CellChangeTimes->{{3.8940422023596044`*^9, 3.8940422045246944`*^9}},
 CellID->71796081,ExpressionUUID->"54caee1b-de11-428d-a05b-4e9dcd4ff69d"],

Cell["QuantityVariableDimensions", "Subitem",
 TaggingRules->{},
 CellChangeTimes->{{3.8940422023596044`*^9, 3.894042212559328*^9}, {
  3.8959370765374556`*^9, 3.8959370765638566`*^9}},
 CellID->142656928,ExpressionUUID->"7689bd73-890b-407c-be46-4a19299a0b78"],

Cell["QuantityVariablePhysicalQuantity", "Subitem",
 TaggingRules->{},
 CellChangeTimes->{{3.8940422023596044`*^9, 3.894042212559328*^9}, 
   3.8959370770540457`*^9, {3.8959384816692734`*^9, 3.895938481676273*^9}},
 CellID->408407213,ExpressionUUID->"3217ac4c-00ac-409c-9d61-6f24f9149298"],

Cell["NondimensionalizationTransform", "Subitem",
 TaggingRules->{},
 CellChangeTimes->{{3.8940422023596044`*^9, 3.894042212559328*^9}, 
   3.8959370770540457`*^9, {3.895938482076158*^9, 3.895938486478073*^9}},
 CellID->87139720,ExpressionUUID->"e5779f32-b47d-43e5-b423-6fab9fa4739e"],

Cell["Quantity", "Subitem",
 TaggingRules->{},
 CellChangeTimes->{{3.8940422023596044`*^9, 3.894042212559328*^9}, 
   3.8959370770540457`*^9, {3.895938482076158*^9, 3.895938487938365*^9}, {
   3.896616144778761*^9, 3.896616145204795*^9}},
 CellID->8011077,ExpressionUUID->"30be6e21-1e27-4d6f-a123-438f2dbf5169"],

Cell["ContainsExactly", "Subitem",
 TaggingRules->{},
 CellChangeTimes->{{3.8940422023596044`*^9, 3.894042212559328*^9}, 
   3.8959370770540457`*^9, {3.895938482076158*^9, 3.895938487938365*^9}, {
   3.8966161452298064`*^9, 3.8966161490521007`*^9}},
 CellID->39182687,ExpressionUUID->"4f3baddd-7612-47e2-87e8-2d9ad34049e7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Related Resource Objects",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Related Resource Objects", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List the names of published resource objects from any Wolfram \
repository that are related to this function.", "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoRelatedResourceObjects"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "1d7a19d6-78cd-4e53-863e-cd1407dc8a99"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Related Resource Objects"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Related Resource Objects", "TemplateCellGroup"},
 CellID->869341850,ExpressionUUID->"58f9a730-08d6-42e7-91c9-113f9a68b6b8"],

Cell["PlanckUnitConversion", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{3.895937105604883*^9},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->694609509,ExpressionUUID->"0c7c708c-309e-4098-9b7d-581c16515dca"],

Cell["PhysicalQuantityLookup", "Item",
 TaggingRules->{},
 CellID->729407054,ExpressionUUID->"7c53b4ce-06f6-4274-8ef0-18209b30d074"],

Cell["SIConstantConvert", "Item",
 TaggingRules->{},
 CellID->887635027,ExpressionUUID->"1d5858aa-c2aa-4e9f-a161-e352173f43a1"],

Cell["UnitSystemTransform", "Item",
 CellChangeTimes->{{3.895938468093932*^9, 3.895938471452694*^9}},
 CellID->667393142,ExpressionUUID->"970435e5-77f0-4264-a78f-60f750ed633b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Source/Reference Citation",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Source/Reference Citation", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Give a bibliographic-style citation for the original source of the \
function and/or its components (e.g. a published paper, algorithm, or code \
repository).", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 
        20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoSourceReferenceCitation"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "d54d0480-2871-4e23-b8f7-559b44c036af"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Source/Reference Citation"},
 DefaultNewCellStyle->"Text",
 CellTags->{"Source/Reference Citation", "TemplateCellGroup"},
 CellID->788767010,ExpressionUUID->"a54be106-c066-4fac-872e-8483f6339a74"],

Cell["Source, reference or citation information", "Text",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->512303561,ExpressionUUID->"ac4a4588-9137-496c-bf02-9a56ec271209"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Links",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Links", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List additional URLs or hyperlinks for external information related \
to the function.", "MoreInfoText"], Background -> GrayLevel[0.95], 
        FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5,
         ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoLinks"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "2e93c354-07d9-4b7a-8456-5ac45f093099"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Links"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Links", "TemplateCellGroup"},
 CellID->341958311,ExpressionUUID->"294a97f4-43a2-42f0-af7b-7a065019e584"],

Cell["Link to other related material", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->938599834,ExpressionUUID->"79ac17a0-721b-4507-98b5-5150b7522a01"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Tests",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"VerificationTests", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Specify an optional list of tests for verifying that the function \
is working properly in any environment. Tests can be specified as \
Input/Output cell pairs or as symbolic ", 
           Cell[
            BoxData[
             StyleBox[
              TagBox[
               ButtonBox[
                StyleBox[
                "VerificationTest", "SymbolsRefLink", ShowStringCharacters -> 
                 True, FontFamily -> "Source Sans Pro"], BaseStyle -> Dynamic[
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                   "Link"}]], ButtonData -> "paclet:ref/VerificationTest", 
                ContentPadding -> False], 
               MouseAppearanceTag["LinkHand"]], ShowStringCharacters -> True, 
              FontFamily -> "Source Sans Pro"]]], 
           " expressions for including additional options."}], 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoVerificationTests"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "f0c0f249-8b79-421d-8cc4-a125ee37893b"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "VerificationTests"},
 DefaultNewCellStyle->"Input",
 CellTags->{"TemplateCellGroup", "Tests", "VerificationTests"},
 CellID->187055128,ExpressionUUID->"3ec1044b-e1d3-496e-92da-42d58ab7b000"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MyFunction", "[", 
  RowBox[{"x", ",", "y"}], "]"}]], "Input",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellLabel->"In[3]:=",
 CellID->770806,ExpressionUUID->"d5aadc23-1fa0-4e47-afe0-6131ece3bc9e"],

Cell[BoxData[
 RowBox[{"x", " ", "y"}]], "Output",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellLabel->"Out[3]=",
 CellID->759771806,ExpressionUUID->"55eb0b4a-edb1-479a-b924-d17ad30b2aef"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Compatibility",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Compatibility", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Specify any known compatibilities for your function to ensure it is \
discoverable on the correct platforms.", "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibility"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "007fd230-4afe-4675-ae8f-539151212780"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Compatibility"},
 CellTags->{"Compatibility", "TemplateCellGroup"},
 CellID->465977791,ExpressionUUID->"6daafc08-7f0d-4cc9-a8a6-54f9d2099b8d"],

Cell[CellGroupData[{

Cell[TextData[{
 "Wolfram Language Version",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityWolframLanguageVersionRequired", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Enter required Wolfram Language Version (e.g. 12.1+).", 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {
       "SectionMoreInfoCompatibilityWolframLanguageVersionRequired"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "b2866588-547c-4469-8c4c-7569ae9458c4"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{
  "TemplateGroupName" -> "CompatibilityWolframLanguageVersionRequired"},
 DefaultNewCellStyle->"Text",
 FontSize->16,
 CellTags->{
  "CompatibilityWolframLanguageVersionRequired", "TemplateCellGroup", 
   "Wolfram Language Version"},
 CellID->267876551,ExpressionUUID->"530d786f-e3d3-4113-8846-1604fa4ed1df"],

Cell["13.3+", "Text",
 TaggingRules->{},
 CellChangeTimes->{3.894042220293859*^9, 3.8959438471719284`*^9},
 CellTags->{"DefaultContent", "ScrapeDefault"},
 CellID->788185540,ExpressionUUID->"0181b13e-25b4-4499-9e5b-7dd9bdc686c1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Operating System",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityOperatingSystem", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Select all operating systems where your function is expected to \
function properly.", "MoreInfoText"], Background -> GrayLevel[0.95], 
        FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5,
         ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityOperatingSystem"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "5e582208-fe74-4c05-a73a-cab65df0e930"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityOperatingSystem"},
 DefaultNewCellStyle->"Item",
 FontSize->16,
 CellTags->{
  "CompatibilityOperatingSystem", "Operating System", "TemplateCellGroup"},
 CellID->752514832,ExpressionUUID->"8aac333b-920c-4357-b32e-de156a48b0ae"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Windows", {False, "Windows"}], "\" \"", 
            "\"Windows\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["MacOSX", {False, "MacOSX"}], "\" \"", "\"Mac\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Unix", {False, "Unix"}], "\" \"", "\"Unix\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxNkNuKwkAMhsEerLDsE/gKfQipCoJLF7PL7m0PUQenM8Mkg87bmwot3iX5/\
3w5bIoSMuCoEfI6sAtcwrK6YnfD/pxQelTEsPxTprd3gvyr6Wr4h/\
TXqIc0HhgHmmznBaWnIKDZPgWzkkj/\
BJmLL9iELL69deg5wrqyg2tYtUorjrUUJTEXiCRDZcnasbLmxX6fTsWuV9y0EmX7RhPOwmqLGt+\
V8VKrw2CoSkr4PBhG77xYRjCsNiZCaAnlIx8nJBt8hz/RIRT7YLrR8wRtF2wJ"},
 CellTags->{
  "CheckboxCell", "CompatibilityOperatingSystem", 
   "CompatibilityOperatingSystem-Checkboxes"},
 CellID->124789369,ExpressionUUID->"04c4c7fc-deca-4308-9339-d08ffd94dd81"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Required Features",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityFeatures", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{"Choose any other features that are ", 
           Cell[
            BoxData[
             StyleBox[
              StyleBox["required", "TI"], ShowStringCharacters -> True, 
              FontFamily -> "Source Sans Pro"]]], 
           " in order to use your function."}], "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityFeatures"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "26e148e2-a21b-44c7-88f2-fbfce41c38ae"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityFeatures"},
 DefaultNewCellStyle->"Item",
 FontSize->16,
 CellTags->{"CompatibilityFeatures", "Required Features", "TemplateCellGroup"},
 CellID->789112653,ExpressionUUID->"64fb9057-8484-4566-b696-47f456bd3ec2"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Notebooks"}], "\" \"", 
            "\"Notebooks\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Parallel Kernels"}], "\" \"", 
            "\"Parallel Kernels\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Cloud Access"}], "\" \"", 
            "\"Cloud Access\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxlUM1qwzAMHmuzJlDKLrv3BfIQIVugrKyl2gs4jsJMFdtY8sFvP2eDkLHb96cPSU1ZQw\
GSCOHpEsVHqWHXfqG+4zA+8PZsOCvFSXDicfPLx0fe3mKeqD6cYO/cnVdwcZ+vKigipOM7BovE/\
5Ulu2/JxeHYaI3Mf1kN5TU4j0ESvLRu8kpMb8hI6lBJDJgTu4sX4+\
xP33pDLt8GI6rPqOgUMS5G9YqEa2c+21GcLLebGg4nKxh8yJG5GKrGJog9Y37G/\
obsYtD4mTxC2UWr58w3NfBx2Q=="},
 CellTags->{
  "CheckboxCell", "CompatibilityFeatures", "CompatibilityFeatures-Checkboxes"},
 CellID->323834170,ExpressionUUID->"d5f5f8c1-1cd6-40c6-a533-d1ac2b88079a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Environments",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityEvaluationEnvironment", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Select all evaluation environments where your function is expected \
to be compatible. See ", 
           Cell[
            BoxData[
             StyleBox[
              TagBox[
               ButtonBox[
                StyleBox[
                "$EvaluationEnvironment", "SymbolsRefLink", 
                 ShowStringCharacters -> True, FontFamily -> 
                 "Source Sans Pro"], BaseStyle -> Dynamic[
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                   "Link"}]], ButtonData -> 
                "paclet:ref/$EvaluationEnvironment", ContentPadding -> False], 
               MouseAppearanceTag["LinkHand"]], ShowStringCharacters -> True, 
              FontFamily -> "Source Sans Pro"]]], " for more details."}], 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityEvaluationEnvironment"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "a0411fe3-8105-4486-b2a6-68446ca77f41"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityEvaluationEnvironment"},
 DefaultNewCellStyle->"Item",
 FontSize->16,
 CellTags->{
  "CompatibilityEvaluationEnvironment", "Environments", "TemplateCellGroup"},
 CellID->939592672,ExpressionUUID->"54b5ee7c-cd29-420c-b08f-177f3ad0f942"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Session", {False, "Session"}], "\" \"", 
            
            TemplateBox[{
             "\"Session\"", "\"Local or cloud interactive session\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["WebEvaluation", {False, "WebEvaluation"}], "\" \"", 
            
            TemplateBox[{
             "\"WebEvaluation\"", 
              "\"Cloud evaluation initiated by an HTTP request\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["BatchJob", {False, "BatchJob"}], "\" \"", 
            
            TemplateBox[{"\"BatchJob\"", "\"Remote batch job\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Script", {False, "Script"}], "\" \"", 
            
            TemplateBox[{"\"Script\"", "\"Script run in batch mode\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["WebAPI", {False, "WebAPI"}], "\" \"", 
            
            TemplateBox[{
             "\"WebAPI\"", "\"API called through an HTTP request\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {"\<\"\"\>"}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Subkernel", {False, "Subkernel"}], "\" \"", 
            
            TemplateBox[{"\"Subkernel\"", "\"Parallel or grid subkernel\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Scheduled", {False, "Scheduled"}], "\" \"", 
            
            TemplateBox[{"\"Scheduled\"", "\"Scheduled task\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {"\<\"\"\>"}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxdUdtqwzAMha3NBbZ9xN7zEV2WQsagpRrsOReVmDq2seRC/\
n721jjpnnykI845kndZAVvgSSIkB8fGcQFpOWB3wf6c0uZTEEMKSCS0gudvbKtrI13DoczeGu6GD91\
CAp0VhiHxA7tjDTm49oJWofSwG7B3EnvvVDOONOueH2hz8sSiP4PIRN2/N/bv9GcY2X8x78tF+\
5b19q6058ArGNll54gKyI5WG7Q8wWupR+N9WiEFT4trpa7CajWiCgc+mNCjILo+\
BGVVL7hpPdruG0kYifwdJa6Z8EtaulFR+VjAS60YrbF+5HfjfKcmfxZCb/Z0QtLOdvg1GR9/\
71QXZn4A3oyuQA=="},
 CellTags->{
  "CheckboxCell", "CompatibilityEvaluationEnvironment", 
   "CompatibilityEvaluationEnvironment-Checkboxes"},
 CellID->1100362,ExpressionUUID->"345e1480-4716-41c9-ab2f-790e3cc4d0c9"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Cloud Support",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityCloudSupport", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Specify whether your function is expected to work in the public \
cloud.", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityCloudSupport"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "b9d0d6b2-064f-44f0-9f73-9d3f5d1c9997"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityCloudSupport"},
 DefaultNewCellStyle->"Text",
 FontSize->16,
 CellTags->{"Cloud Support", "CompatibilityCloudSupport", "TemplateCellGroup"},
 CellID->624931977,ExpressionUUID->"f8701cc3-2a9e-4f08-a0e9-8cb38bd34a6e"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[True, {False, True}], "\" \"", 
            "\"Supported in cloud\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxNjkEKwkAMRVGqVhAX7tx5gR5Cq0JBqBgvUNsUB6eTYZIsentnQMVdyH/vJ/\
u8gBnIaBHmtYpXKWBRPrF9YddPOLsYFs7uQTFyleDA320/\
5eym0duAek9BsNsZt2stafc18msgj0FG2JY0+EbMw1gjY5mgjxbv1V4MOU6N/\
82cnzojzSNOs3NjGX/B8ogW/5P0NFkdHJeTAtaVEww+RCQVw+\
JAZLFxBaxuyKShxfvoEfKzujYRb6FXWpA="},
 CellTags->{
  "CheckboxCell", "CompatibilityCloudSupport", 
   "CompatibilityCloudSupport-Checkboxes"},
 CellID->609243646,ExpressionUUID->"77ed2784-ed79-47eb-8ca5-556145b4fa99"]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Author Notes",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Author Notes", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "This section, when used, will appear near the bottom of the \
published resource. Content displayed in this section can include background, \
possible improvements, additional information and/or implementation details \
that are otherwise beyond the scope of the function documentation.", 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoAuthorNotes"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "9723d479-1aa9-47ae-93a8-00df368573e9"]
}], "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Author Notes"},
 DefaultNewCellStyle->"Text",
 CellTags->{"Author Notes", "TemplateCellGroup"},
 CellID->897529167,ExpressionUUID->"c1c2607b-80e4-4a68-b51e-d5ebd8fb36e3"],

Cell["Additional information about limitations, issues, etc.", "Text",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->908162033,ExpressionUUID->"07bbea8c-84c3-4a13-aa16-2bb392389381"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Submission Notes",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Submission Notes", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Enter any additional information that you would like to communicate \
to the reviewer here. This section will not be included in the published \
resource.", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 
        20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoSubmissionNotes"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "a06482c3-d155-463c-9536-36e5ca68b0ff"]
}], "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Submission Notes"},
 DefaultNewCellStyle->"Text",
 CellTags->{"Submission Notes", "TemplateCellGroup"},
 CellID->321610809,ExpressionUUID->"1ce3d441-f82f-4a28-94ad-c4a0b221e7cc"],

Cell["\<\
I would like to add a hyperlink to the UnitDimensions page in the Details \
pane.\
\>", "Text",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.8597325578282166`*^9, 3.859732580268447*^9}, {
  3.8597330321851196`*^9, 3.8597330527303333`*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->711457694,ExpressionUUID->"1612f1bd-8d88-4939-9db4-0b67f0b5745c"],

Cell["I don't see any feedback. I don't know what to respond to.", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.894729464920191*^9, 3.894729477878887*^9}},
 CellID->488587408,ExpressionUUID->"d7a25822-e2ee-44f0-ab48-3f42f67f950b"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{574.8, 579.6},
WindowMargins->{{-4.8, Automatic}, {Automatic, 0}},
DockedCells->{
  Cell[
   BoxData[
    TemplateBox[{}, "MainGridTemplate"]], "DockedCell", 
   CellMargins -> {{-10, -10}, {-8, -8}}, CellFrame -> 0, Background -> 
   RGBColor[0.92157, 0.34118, 0.10588], CellTags -> {"MainDockedCell"}, 
   CacheGraphics -> False], 
  Cell[
   BoxData[
    TemplateBox[{}, "ToolsGridTemplate"]], "DockedCell", 
   TaggingRules -> {"Tools" -> True}, CellTags -> {"ToolbarDockedCell"}, 
   CellFrameMargins -> {{0, 0}, {2, 2}}, CellFrame -> {{0, 0}, {1, 0}}, 
   CacheGraphics -> False, CellOpen -> Dynamic[
     CurrentValue[
      EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]]]},
TaggingRules->{"CompatibilityTest" -> HoldComplete[
    BinaryDeserialize[
     BaseDecode[
     "OEM6eJzVWVtT20YUrjEQBhxaMulMkyc98EAyadJpO9NL2iauDcQdIMCa9JW1dGQ0rHeV3RWg\
X9a/17MrydhGciTbTFNPJsja1XfOnut3LH9JPWqJQSgi7u3ehBKUCgT3a2rlJApA+/nLS2qp4+P/\
9Sb38M/K7seIMrW5/QGkWT+KBj2Q0refnbdmB6EDOMGLRiuSErj+QFkE/\
hfq0e4VXlFtnhIaekJc4q7lg0Bp1ejSfj/g/dOIgSKNU1Aiki504xDIcptqimouv+\
cuFGq58icT7qXZlgButwTXcKOPqb7w60UnPwLwFNnJ5JFYaRi0WIBqn7fBD3gwqu757SOOUSp7LG+\
rWj6KGEPFXt5dTAWcQh9VBYma+kE/ktY0w+O+KavUKYRCBVrIOAFMcFQKVLf+\
q6m1PRqwSKJnaurhMXUZ6A5XmjJGvinS0F+\
dxdgzmbXRFWOeWSdaYjz8JQIjr35IQ3uGiLvmSX8lkUyeFBrXKkeVCeuNBIuELNDmNmFCt2qkdk6Wf\
v195MbS63WrPMavIs/KKv/\
cXy6wUp2AkbfeFtfcJoFSv5RFzS7eRxrdCJ5JqHX0NKMuNDGuFgi7YZKuDYzG4CHuxjvBPHQkBiZXf\
5QFPpbBFQKeXyVlYV8CfpPqwRlXaTnIsUa7KjoNQ+DeGb+\
g3GPgtYAxNdUwi5IwxUb4tbKVXITFipcikK0uDPAAGoy4fSmicH5QzN1Gk5krLAdXGNBft3BTX8gA1\
LetC3Ave+IGb2/e3jbSSSNbs982UR6NmLb5zXWOpuTL7BaBJDdzXV26mg0doS674iz08Dqt+\
8VeXgD4mIPreONBlgJr+0z0KDu/MC1t1KLqp7Ji90G/\
CzwPeFKIyqfrHuVu3LoQgQvtgDLRH1WskSomNXZJ7K9YlCm/\
zFOd4uqWXTU9icDHCPDU5FFqAeZlAk+\
wXQzPOy5gBCxrKStdGdnUnrNKVGl22UUWdCkNUd9XVYH3quRYSmUmpY5ZKLPnEVwP7Zlr4yRB1GFVl\
bcjBQfQp27c6XMhk+qU+VotG2/kJ9/rspJycCcSb1oazilmWo1dUqsH+\
KQtjHtV7dYHnZWxcYkLSyVMiQ3UHLAuUgXqPtQtzEak0JY1r5rdnbbJS6ufetDBmt3HSF3rcCss/\
oSR60OtCw6eApeue9mJ1LAz3IHt3Vp7KH5EZk3tVm6DlAseuJQdSxECWsvyuVl1HlE0f4hYSotho6m\
UcAPLvU9Us3Juh6m2JEb144GJobWmJSNdsRg4GyZkk1igQ9DUM/\
NBOoGRtVagkwHkSbLj1Sn4IE10O9nSbXVZjFdGhE6olUxPwxkqGUGXD9Dmd0bPL+zn+\
VucCeYZVqZMEhX4/fNClGqEvhrONAb/YyESDoGXtA/ERYdU4+1nhZhJt8uLg0TYzET+3kROZ/\
YlrVeGz88E9Zmx+OP5vVCB1t+HtFl4/k6hHpPEvjht/ydMfqZqgQDffbJeTVLn1tzOtQz+\
VSHMfVD2YqXHzDMzUX9RiD8fM6+KW5aK/1bOHv8tAZ9Lyc+Idv9ceA7iShpi/ZnMkHl49+\
uS7SqXbc+s6ox0uzPlN/bsx3HMtiicFDuddi8UdpH0ex7nlCTdtbHf2yfeAuUz8R/sZ+etcc9oqyP/\
1LoXgXJ4qqpjqBiVytHC6YHj2i7iOb4UA4c6HK5BOmmHeeEogf8G4Pi4KcIocAY0NkjOtZCIpBy4CT\
F2wHvptIUTi8i5DtSFgdYydmikxQAPizZgseMKjrgaw8/RYwrhboqrgxC39hhk0t/cTg/\
1dHpYy6aH8TlCbaLrk2YjJJVx4TBiHTj5bmz4CqLgfdhDgg6L1CGioG9x+\
xY6tG9AO9zDs2EcDuvRetMalxpasHaEJNB0BOvNVRIPeoKRp8nbn0PKEUyeJ9+Snkce5811pZ/+\
KouXDOV2vNqeXMp9D7QyIujZnSeKiMG4/\
WyabbVsUI30dbWyR5mC4Y6npzAQV7A7CHW8e0ORJGTUV01ufdzMGR2GbTwVmCj3d8A9cd0NNHoiRcl\
98fkvn3IKDA=="]]], "CreationTimestamp" -> 
  3.8597281212428117`17.339131703261113*^9, "DefinitionNotebookFramework" -> 
  "DefinitionNotebookClient", "ResourceCreateNotebook" -> True, 
  "ResourceType" -> "Function", 
  "RuntimeConfiguration" -> {
   "LoadingMethod" -> "Paclet", "PacletName" -> "FunctionResource", 
    "Contexts" -> {
     "FunctionResource`", "FunctionResource`DefinitionNotebook`"}, 
    "DefaultContentMethod" -> "Legacy"}, 
  "SubmissionReviewData" -> {
   "Review" -> True, "SubmissionID" -> "8733", "OriginalName" -> 
    "ExactDimensionMatches", "Internal" -> 
    "$a+8N6nAWZrm1hbC+LDWE12OmEaLAY5gtQb4uwI5ji8GQQAbFFpbpg4L8iv/nyxWKQ+\
OZImquzJVy3NtVf1nvy5m2ET1vJrXwNeENE6hyX6rBixvZ0/wd/fN7/9+0mro8LMI+\
8f6ImucP3FLbb8ftrfZj+ric6vXMgHbYUAGUJtp9FHU1yIz88vTYw7+\
AuPyfBM9E6i89aB4676zvcU3YW+Uin+LL9ayzFnCcQXYFoLA/\
uhbPJ2g9BCmDoVp8ZEQaDkLpLmUeoixJSXquOI1qKS7GETGmoNtcS33NrSqrcbpJHAnl4CrTyzRmV7\
6YBOyWpVYcplRqqziqz3cb31m9alLpnzT3RBGk1U2q0zVD2qqRZaspOcnomcmmA8YYNEFABzyRXOuf\
/Y2wlV/TG2oH59Y4IeHTQG5jGE1ONSJr7V92GPDnjXKpvgvPnHlmaPY3O+7PeH3DEyvHOn/\
s4lBMm76y8D8Q0DWj9AuvmbSfKezgPvMAsmznQPv117gFwX+CZJ/kc3JO4exeA/J08qkKW8x2G0ls+\
WSv91YOt3QCGWak6vc8xzxSCkpYx3m78kHHy1+gAkbNQoCWkR/8wy4ytaDgoNll/\
xpTXitC7osTSfqdJnHTZwPhvVrAAPv1fZm14IjiB7iS9WeMjXws1BHEqyUFz5L7FcD45lVFPs2Ve3i\
hGwATgXjOBU+DOn5j+fFjaHDo2PjILCETiON64uzGMSABY81qQOUT0wFtkaP56aQv+\
7rcboqHyhoa68z7gfi9M4scqb/\
lWcNz2lszN1dsdmQEHp2G6a0zwm2caPyLXqevaJq4mLYunKZ2LWgBnJWyKKcLzJez3GNl1SDXVXRXZ\
jn9oYPkCkC9wkhcDO9/\
OrPsjN3dyV2NXE2p5U5UL7Ou9WS8xY94qzRLP82RbPuagIMnt5JdBv49u4OxcngJBXpcbjRTT33Pmp\
lQanAhdyIG/xfc3lHXa6sA3iJMKY+Ps62LUovTnU4Yd3L5kPkSyXv9CjTnddtMf/O/\
4yXtCvBp2LNKdEHLej6Rfai4qZTsbaS0JNzBfws9van3NysiBL2BNPYgXXZeQK9rlpjIQSy0h4iWtW\
D4bMNGi8Qb5nPTUwvhLqkIuNyMLt6yF1e+\
rgyfBwtQwx2ouoFYxhrURva6ZefO1zkT0nZO8SH7jKqIhHOPxj1mTP8o4i2JyKVd0TKbtColejqlh+\
nkpd7DMe2l$foQoUNNRoS2a5jiZ1EPAhA=="}, "ToolsOpen" -> True, 
  "UpdatedTimestamp" -> 3.8959372235688557`17.34318693950275*^9, 
  "TemplateVersion" -> "1.6.4", "StatusMessage" -> "", "TryRealOnly" -> False,
   "AutoUpdate" -> True},
CreateCellID->True,
Magnification->0.5,
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (May 18, 2023)",
StyleDefinitions->Notebook[{
   Cell[
    CellGroupData[{
      Cell[
       StyleData[StyleDefinitions -> "Default.nb"]], 
      Cell[
       StyleData[All, "Working"], WindowToolbars -> {}, DockedCells -> {
         Cell[
          BoxData[
           TemplateBox[{}, "MainGridTemplate"]], "DockedCell", 
          CellMargins -> {{-10, -10}, {-8, -8}}, CellFrame -> 0, Background -> 
          RGBColor[0.92157, 0.34118, 0.10588], CellTags -> {"MainDockedCell"},
           CacheGraphics -> False], 
         Cell[
          BoxData[
           TemplateBox[{}, "ToolsGridTemplate"]], "DockedCell", 
          TaggingRules -> {"Tools" -> True}, 
          CellTags -> {"ToolbarDockedCell"}, 
          CellFrameMargins -> {{0, 0}, {2, 2}}, CellFrame -> {{0, 0}, {1, 0}},
           CacheGraphics -> False, CellOpen -> Dynamic[
            CurrentValue[
             EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]]]}, 
       PrivateNotebookOptions -> {
        "FileOutlineCache" -> False, "SafeFileOpen" -> "IgnoreCache"}, 
       CellLabelAutoDelete -> False, 
       CodeAssistOptions -> {"AutoDetectHyperlinks" -> False}, 
       AutoQuoteCharacters -> {}]}, Open]], 
   Cell["Hint Styles", "Section"], 
   Cell[
    StyleData["MoreInfoText", StyleDefinitions -> StyleData["Text"]], 
    FontColor -> GrayLevel[0.25]], 
   Cell[
    StyleData["ErrorText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, Inherited}, {10, 10}}, 
    CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0}, 
    FontWeight -> Bold, FontColor -> RGBColor[1, 0, 0]], 
   Cell[
    StyleData["WarningText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, 35}, {0, 0}}, FontSize -> 
    14, GridBoxOptions -> {BaseStyle -> {}}], 
   Cell["Template Boxes", "Section"], 
   Cell[
    StyleData["MoreInfoOpenerIconTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> GraphicsBox[{
            Thickness[0.090909], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYC4oSnF5RuVyo58OlumvteXcIBxj//Pfjx0tky
Dp8u+SYJzFB0kGQJ49MtUnBYIKV/V4UNRis5GHKskYl6AlOnDNUHM0cFaq4I
nD/niMKGogx+OB+oO8X6Phtcf/+hrxox/Qxw80HKftZ9sYfZ/7BKZJ37w1f2
MPfB+DD3w/h+SQIRlluE4foh9vDBzYfQHHD7izMmvq2xZ4K7r9CW6/rigr/2
MPfD+DD/wfgw/8P0w8IHZj4s/GD2w8IX5j708AcA2Xetpg==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 3.25}], 
              Thickness[0.045818], 
              RGBColor[0.62744, 0.62744, 0.62744, 1.]}, StripOnInput -> 
             False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3b48/JRRi4jD3qBpin2m8g5n6j32194VhvNZnvdo
vPUVdoh2sntxM0feQfiT4/m0q0IOQNnSwtvyDmxCIvbHYoQcMhnyG1lUFRyk
eR/oTlAAym/iKVyTjeAf2aiXt/gggt+odqhtubgiXP+k00CLYxXh5mdrf5t+
d7Ii3P5LDPeYOE8pwt33vfTBHMGnig4w98P4j5fOPqJgIArn539oPRlyUBSu
/9OGgOxZ5mJw88sKgS5aKwa3XzOm/9DXF2Jw98H4MPfD+DD/wfTD/A8zHxY+
MPth4QdzHyx80cMfAIsMpwk=
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQXTFnkfJOGwmHsNp125Lq+R1g/G8aMf2HvvI4KP39
VvrgjgAGH6b+c19wicp0IQeBKrPVduICcL6EWjDr4ksCqPLTBeH8211/U7+n
CMH5S+7v45tjLAznX773gHvySwS/qdhtyrc2ETj/04aA7FnfReH8RxHi2y8e
EIPzNUHOzRCH8x8vnX1E4QOCP+/98mPe5RJw/o9goAoWSTj/6vMs7W/TJR0O
X9ZOlVwk4PB2no3OlVsI/jKgcRs+STlonhY4vstCzCFoh1zr64syDkBXssXP
EHO4WvFSzbADwa9JNAo1yJKA82H+gfFh/oXxA29JA7Ug+GY2e4OmJQrB+f83
VX/aMEEQzrerjFhhelYAzofFB3r8AgApYdcE
                "]}]}, {
              FaceForm[
               RGBColor[0.62744, 0.62744, 0.62744, 1.]]}, StripOnInput -> 
             False]}, ImageSize -> {11., 11.}, 
           PlotRange -> {{0., 11.}, {0., 11.}}, AspectRatio -> Automatic], 
         True -> GraphicsBox[{
            Thickness[0.090909], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYC4oSnF5RuVyo58OlumvteXcIBxj//Pfjx0tky
Dp8u+SYJzFB0kGQJ49MtUnBYIKV/V4UNRis5GHKskYl6AlOnDNUHM0cFaq4I
nD/niMKGogx+OB+oO8X6Phtcf/+hrxox/Qxw80HKftZ9sYfZ/7BKZJ37w1f2
MPfB+DD3w/h+SQIRlluE4foh9vDBzYfQHHD7izMmvq2xZ4K7r9CW6/rigr/2
MPfD+DD/wfgw/8P0w8IHZj4s/GD2w8IX5j708AcA2Xetpg==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 3.25}], 
              Thickness[0.045818], 
              RGBColor[0.5, 0.5, 0.5, 1.]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYC4oSnF5RuVyo58OlumvteXcIBxj//Pfjx0tky
Dp8u+SYJzFB0kGQJ49MtUnBYIKV/V4UNRis5GHKskYl6AlOnDNUHM0cFaq4I
nD/niMKGogx+OB+oO8X6Phtcf/+hrxox/Qxw80HKftZ9sYfZ/7BKZJ37w1f2
MPfB+DD3w/h+SQIRlluE4foh9vDBzYfQHHD7izMmvq2xZ4K7r9CW6/rigr/2
MPfD+DD/wfgw/8P0w8IHZj4s/GD2w8IX5j708AcA2Xetpg==
               "]]}, {
              FaceForm[
               RGBColor[0.5, 0.5, 0.5, 1.]]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3b48/JRRi4jD3qBpin2m8g5n6j32194VhvNZnvdo
vPUVdoh2sntxM0feQfiT4/m0q0IOQNnSwtvyDmxCIvbHYoQcMhnyG1lUFRyk
eR/oTlAAym/iKVyTjeAf2aiXt/gggt+odqhtubgiXP+k00CLYxXh5mdrf5t+
d7Ii3P5LDPeYOE8pwt33vfTBHMGnig4w98P4j5fOPqJgIArn539oPRlyUBSu
/9OGgOxZ5mJw88sKgS5aKwa3XzOm/9DXF2Jw98H4MPfD+DD/wfTD/A8zHxY+
MPth4QdzHyx80cMfAIsMpwk=
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQXTFnkfJOGwmHsNp125Lq+R1g/G8aMf2HvvI4KP39
VvrgjgAGH6b+c19wicp0IQeBKrPVduICcL6EWjDr4ksCqPLTBeH8211/U7+n
CMH5S+7v45tjLAznX773gHvySwS/qdhtyrc2ETj/04aA7FnfReH8RxHi2y8e
EIPzNUHOzRCH8x8vnX1E4QOCP+/98mPe5RJw/o9goAoWSTj/6vMs7W/TJR0O
X9ZOlVwk4PB2no3OlVsI/jKgcRs+STlonhY4vstCzCFoh1zr64syDkBXssXP
EHO4WvFSzbADwa9JNAo1yJKA82H+gfFh/oXxA29JA7Ug+GY2e4OmJQrB+f83
VX/aMEEQzrerjFhhelYAzofFB3r8AgApYdcE
                "]}]}, {
              FaceForm[
               RGBColor[0.99998, 0.99998, 0.99998, 1.]]}, StripOnInput -> 
             False]}, ImageSize -> {11., 11.}, 
           PlotRange -> {{0., 11.}, {0., 11.}}, AspectRatio -> Automatic]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["MoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        DynamicModuleBox[{
         RSNB`mPosRegion$$, RSNB`attachPos$$, RSNB`offsetPos$$, 
          RSNB`horizontalRegion$$, RSNB`verticalRegion$$, 
          RSNB`chooseAttachLocation$$}, 
         TagBox[
          TemplateBox[{
            TemplateBox[{}, "MoreInfoOpenerIconTemplate"], 
            "\"Click for more information\""}, "PrettyTooltipTemplate"], 
          EventHandlerTag[{"MouseDown" :> AttachCell[
              ParentBox[
               EvaluationBox[]], #2, 
              RSNB`chooseAttachLocation$$[], 
              RemovalConditions -> {"EvaluatorQuit", "MouseClickOutside"}], 
            Method -> "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
            True}]], 
         DynamicModuleValues :> {{DownValues[RSNB`mPosRegion$$] = {HoldPattern[
                RSNB`mPosRegion$$[]] :> RSNB`mPosRegion$$[
                Ceiling[MousePosition["WindowScaled"] 3]], HoldPattern[
                RSNB`mPosRegion$$[
                 Pattern[RSNB`reg, {
                   Blank[Integer], 
                   Blank[Integer]}]]] :> RSNB`reg, HoldPattern[
                RSNB`mPosRegion$$[
                 BlankNullSequence[]]] :> None}}, {
           DownValues[RSNB`attachPos$$] = {HoldPattern[
                RSNB`attachPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[RSNB`h$], 
                RSNB`verticalRegion$$[RSNB`v$]}}}, {
           DownValues[RSNB`offsetPos$$] = {HoldPattern[
                RSNB`offsetPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[4 - RSNB`h$], 
                RSNB`verticalRegion$$[4 - RSNB`v$]}}}, {
           DownValues[RSNB`horizontalRegion$$] = {HoldPattern[
                RSNB`horizontalRegion$$[1]] :> Left, HoldPattern[
                RSNB`horizontalRegion$$[2]] :> Center, HoldPattern[
                RSNB`horizontalRegion$$[3]] :> Right}}, {
           DownValues[RSNB`verticalRegion$$] = {HoldPattern[
                RSNB`verticalRegion$$[1]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[2]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[3]] :> Top}}, {
           DownValues[RSNB`chooseAttachLocation$$] = {HoldPattern[
                RSNB`chooseAttachLocation$$[]] :> 
              With[{RSNB`p$ = RSNB`mPosRegion$$[]}, 
                Apply[Sequence, {
                  RSNB`offsetPos$$[RSNB`p$], {-30, 30}, 
                  RSNB`attachPos$$[RSNB`p$]}]]}}}], BoxBaselineShift -> -0.5, 
        BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["InlineMoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        DynamicModuleBox[{
         RSNB`mPosRegion$$, RSNB`attachPos$$, RSNB`offsetPos$$, 
          RSNB`horizontalRegion$$, RSNB`verticalRegion$$, 
          RSNB`chooseAttachLocation$$}, 
         TagBox[
          TemplateBox[{
            TemplateBox[{}, "MoreInfoOpenerIconTemplate"], #4}, 
           "PrettyTooltipTemplate"], 
          EventHandlerTag[{"MouseDown" :> AttachCell[
              ParentBox[
               EvaluationBox[]], #2, 
              RSNB`chooseAttachLocation$$[], 
              RemovalConditions -> {"EvaluatorQuit", "MouseClickOutside"}], 
            Method -> "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
            True}]], 
         DynamicModuleValues :> {{DownValues[RSNB`mPosRegion$$] = {HoldPattern[
                RSNB`mPosRegion$$[]] :> RSNB`mPosRegion$$[
                Ceiling[MousePosition["WindowScaled"] 3]], HoldPattern[
                RSNB`mPosRegion$$[
                 Pattern[RSNB`reg, {
                   Blank[Integer], 
                   Blank[Integer]}]]] :> RSNB`reg, HoldPattern[
                RSNB`mPosRegion$$[
                 BlankNullSequence[]]] :> None}}, {
           DownValues[RSNB`attachPos$$] = {HoldPattern[
                RSNB`attachPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[RSNB`h$], 
                RSNB`verticalRegion$$[RSNB`v$]}}}, {
           DownValues[RSNB`offsetPos$$] = {HoldPattern[
                RSNB`offsetPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[4 - RSNB`h$], 
                RSNB`verticalRegion$$[4 - RSNB`v$]}}}, {
           DownValues[RSNB`horizontalRegion$$] = {HoldPattern[
                RSNB`horizontalRegion$$[1]] :> Left, HoldPattern[
                RSNB`horizontalRegion$$[2]] :> Center, HoldPattern[
                RSNB`horizontalRegion$$[3]] :> Right}}, {
           DownValues[RSNB`verticalRegion$$] = {HoldPattern[
                RSNB`verticalRegion$$[1]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[2]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[3]] :> Top}}, {
           DownValues[RSNB`chooseAttachLocation$$] = {HoldPattern[
                RSNB`chooseAttachLocation$$[]] :> 
              With[{RSNB`p$ = RSNB`mPosRegion$$[]}, 
                Apply[Sequence, {
                  RSNB`offsetPos$$[RSNB`p$], {-30, 30}, 
                  RSNB`attachPos$$[RSNB`p$]}]]}}}], BoxBaselineShift -> -0.5, 
        BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["ClickToCopyTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> TagBox[
           GridBox[{{#, 
              ButtonBox[
               GraphicsBox[{
                 GrayLevel[0.85], 
                 Thickness[
                  NCache[2/45, 0.044444]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 18.}, {
                   9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 18.}, {12., 
                   18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {16.5, 4.5}, {
                   16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {15.75, 17.25}, {
                   15.75, 5.25}, {6.75, 5.25}, {6.75, 17.25}, {8.25, 17.25}, {
                   8.25, 18.}}, {{9.75, 17.25}, {12.75, 17.25}, {12.75, 
                   16.5}, {9.75, 16.5}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 14.25}, {
                  14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{8.25, 12.}, {
                  14.25, 12.}, {14.25, 11.25}, {8.25, 11.25}}, {{8.25, 
                  9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25, 9.}}, {{8.25, 
                  7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 6.75}}}]}, 
                ImageSize -> 12], ButtonFunction :> Null, 
               Appearance -> {
                "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
               Evaluator -> Automatic, Method -> "Preemptive"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}},
             AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], True -> 
         DynamicModuleBox[{RSNB`clickTime$$ = 0., RSNB`timeout$$ = 3.}, 
           TagBox[
            GridBox[{{#, 
               TagBox[
                ButtonBox[
                 DynamicBox[
                  ToBoxes[
                   Refresh[
                    If[AbsoluteTime[] - RSNB`clickTime$$ > RSNB`timeout$$, 
                    RawBoxes[
                    TemplateBox[{
                    PaneSelectorBox[{False -> GraphicsBox[{
                    GrayLevel[0.65], 
                    Thickness[
                    NCache[2/45, 0.044444]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], True -> GraphicsBox[{
                    RGBColor[0.98824, 0.41961, 0.20392], 
                    Thickness[
                    NCache[2/45, 0.044444]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "\"Click to copy to the clipboard\""},
                     "PrettyTooltipTemplate"]], 
                    RawBoxes[
                    TemplateBox[{
                    GraphicsBox[{
                    RGBColor[0, 
                    NCache[2/3, 0.66667], 0], 
                    Thickness[
                    NCache[2/45, 0.044444]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], "\"Copied\""}, 
                    "PrettyTooltipTemplate"]]], UpdateInterval -> 1, 
                    TrackedSymbols :> {RSNB`clickTime$$}], StandardForm], 
                  Evaluator -> "System"], 
                 ButtonFunction :> (RSNB`clickTime$$ = AbsoluteTime[]; 
                  CopyToClipboard[
                    BinaryDeserialize[
                    BaseDecode[#2], Defer]]), 
                 Appearance -> {
                  "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
                 Method -> "Queued", Evaluator -> "System"], 
                MouseAppearanceTag["LinkHand"]]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
           DynamicModuleValues :> {}]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["PrettyTooltipTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        TooltipBox[#, 
         FrameBox[
          
          StyleBox[#2, "Text", FontColor -> 
           RGBColor[0.53725, 0.53725, 0.53725], FontSize -> 12, FontWeight -> 
           "Plain", FontTracking -> "Plain", StripOnInput -> False], 
          Background -> RGBColor[0.96078, 0.96078, 0.96078], FrameStyle -> 
          RGBColor[0.89804, 0.89804, 0.89804], FrameMargins -> 8, 
          StripOnInput -> False], TooltipDelay -> 0.1, 
         TooltipStyle -> {Background -> None, CellFrame -> 0}], Annotation[#, 
         Framed[
          Style[
          RSNB`$$tooltip, "Text", FontColor -> 
           RGBColor[0.53725, 0.53725, 0.53725], FontSize -> 12, FontWeight -> 
           "Plain", FontTracking -> "Plain"], Background -> 
          RGBColor[0.96078, 0.96078, 0.96078], FrameStyle -> 
          RGBColor[0.89804, 0.89804, 0.89804], FrameMargins -> 8], 
         "Tooltip"]& ]& )}], 
   Cell[
    StyleData["ToolsGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Template Input\"", "Text", FontFamily -> "Source Sans Pro",
                  FontSize -> 11, StripOnInput -> False], 
                "\"Format selection automatically using appropriate \
documentation styles\""}, "PrettyTooltipTemplate"], ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    2790153672590285854; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "Template Input"; 
                    DefinitionNotebookClient`TemplateInput[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    2790153672590285854]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> GrayLevel[1], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.82745, 0.20784, 0.], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.95686, 0.80196, 0.75], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchjw5tvzu19maOx1UPSQgCsoEiQHGiDHl4/3Zz
6mVTBlwIKAtUg8eQR8f3XQtUAaq8as/zYkrFxwPrf718DEFANlAEKA6UBaoB
qsRuyMP7EBPuZTj8fHYfa+gBxYGyEHPg7kE2BOILoBqCEQExB+QvVEOAIQbx
BS43oLkH4i9IOMMNAYY8UBDoa4ImQABQJVA9UBeyIcAYBAoCQ49IQ4AqgeqB
uoB6IakRyACmBKAgMBaINASoEuR9D0mIIUBAuSFUccl/6oUJVWKHKumEKimW
WnmHOrmYSuUJwkkUlmykA4IR8Z+40h4AAyMnLQ==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchNw/sODmxYXeazzp7OQgCsoEiQHFiDHny4P7h
2ozl2my4EFAWqAaPIbeP7t/ooQlUuVqP87yn9MMwtU8p+hAEZANFgOJAWaAa
oEqshgDNh5iwx1rwY7Len2wTTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwB
hhjEF7jcgOYeiL8g4Qw3BBjyQEGgrwmaAEFAlUD1QF3IhgBjECgIDD0iDQGq
BKoH6gLqhaRGIAOYEoCCwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8gQOKCzZyADEFOPElPYAYDEc1A==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchr1+//vjx4/fv3//AAJANFAGKE2PI8+fPv3z5
gsfZQFmgGjyGvHr16vfv30CRv9++vFrQ/rAk4Ia3DAQB2UARoDhQFqgGqBKr
IUDzISZ8ObP/pp/CZVMGTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwBhhjE
F7jcgOYeiL8g4Qw3BBjyQAbQ1wRNgCCgSqB6oC5kQ4AxCGQAQ49IQ4AqgeqB
uoB6IakRyACmBCADGAtEGgJUCVQP1AUxBAgoN4QqLqFimFAldqiSTqiSYqmV
d6iSi6lVnsABhSUbGQCPs+GAmNIeAMvulj0=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> GrayLevel[0.9], 
              Method -> "Queued", ImageSize -> {All, 20}, Evaluator -> 
              Automatic], FrameStyle -> Directive[
               GrayLevel[0.9], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Literal Input\"", "Text", FontFamily -> "Source Sans Pro", 
                 FontSize -> 11, StripOnInput -> False], 
                "\"Format selection as literal Wolfram Language code\""}, 
               "PrettyTooltipTemplate"], ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    4138174468017918531; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Literal Input"; 
                    DefinitionNotebookClient`LiteralInput[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    4138174468017918531]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> GrayLevel[1], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.82745, 0.20784, 0.], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.95686, 0.80196, 0.75], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchjw5tvzu19maOx1UPSQgCsoEiQHGiDHl4/3Zz
6mVTBlwIKAtUg8eQR8f3XQtUAaq8as/zYkrFxwPrf718DEFANlAEKA6UBaoB
qsRuyMP7EBPuZTj8fHYfa+gBxYGyEHPg7kE2BOILoBqCEQExB+QvVEOAIQbx
BS43oLkH4i9IOMMNAYY8UBDoa4ImQABQJVA9UBeyIcAYBAoCQ49IQ4AqgeqB
uoB6IakRyACmBKAgMBaINASoEuR9D0mIIUBAuSFUccl/6oUJVWKHKumEKimW
WnmHOrmYSuUJwkkUlmykA4IR8Z+40h4AAyMnLQ==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchNw/sODmxYXeazzp7OQgCsoEiQHFiDHny4P7h
2ozl2my4EFAWqAaPIbeP7t/ooQlUuVqP87yn9MMwtU8p+hAEZANFgOJAWaAa
oEqshgDNh5iwx1rwY7Len2wTTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwB
hhjEF7jcgOYeiL8g4Qw3BBjyQEGgrwmaAEFAlUD1QF3IhgBjECgIDD0iDQGq
BKoH6gLqhaRGIAOYEoCCwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8gQOKCzZyADEFOPElPYAYDEc1A==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchr1+//vjx4/fv3//AAJANFAGKE2PI8+fPv3z5
gsfZQFmgGjyGvHr16vfv30CRv9++vFrQ/rAk4Ia3DAQB2UARoDhQFqgGqBKr
IUDzISZ8ObP/pp/CZVMGTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwBhhjE
F7jcgOYeiL8g4Qw3BBjyQAbQ1wRNgCCgSqB6oC5kQ4AxCGQAQ49IQ4AqgeqB
uoB6IakRyACmBCADGAtEGgJUCVQP1AUxBAgoN4QqLqFimFAldqiSTqiSYqmV
d6iSi6lVnsABhSUbGQCPs+GAmNIeAMvulj0=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> GrayLevel[0.9], 
              Method -> "Queued", ImageSize -> {All, 20}, Evaluator -> 
              Automatic], FrameStyle -> Directive[
               GrayLevel[0.9], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Insert Delimiter\"", "Text", FontFamily -> 
                 "Source Sans Pro", FontSize -> 11, StripOnInput -> False], 
                "\"Insert example delimiter\""}, "PrettyTooltipTemplate"], 
              ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    1887802176716758884; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "Insert Delimiter"; 
                    DefinitionNotebookClient`DelimiterInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    1887802176716758884]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> GrayLevel[1], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.82745, 0.20784, 0.], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.95686, 0.80196, 0.75], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchjw5tvzu19maOx1UPSQgCsoEiQHGiDHl4/3Zz
6mVTBlwIKAtUg8eQR8f3XQtUAaq8as/zYkrFxwPrf718DEFANlAEKA6UBaoB
qsRuyMP7EBPuZTj8fHYfa+gBxYGyEHPg7kE2BOILoBqCEQExB+QvVEOAIQbx
BS43oLkH4i9IOMMNAYY8UBDoa4ImQABQJVA9UBeyIcAYBAoCQ49IQ4AqgeqB
uoB6IakRyACmBKAgMBaINASoEuR9D0mIIUBAuSFUccl/6oUJVWKHKumEKimW
WnmHOrmYSuUJwkkUlmykA4IR8Z+40h4AAyMnLQ==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchNw/sODmxYXeazzp7OQgCsoEiQHFiDHny4P7h
2ozl2my4EFAWqAaPIbeP7t/ooQlUuVqP87yn9MMwtU8p+hAEZANFgOJAWaAa
oEqshgDNh5iwx1rwY7Len2wTTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwB
hhjEF7jcgOYeiL8g4Qw3BBjyQEGgrwmaAEFAlUD1QF3IhgBjECgIDD0iDQGq
BKoH6gLqhaRGIAOYEoCCwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8gQOKCzZyADEFOPElPYAYDEc1A==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchr1+//vjx4/fv3//AAJANFAGKE2PI8+fPv3z5
gsfZQFmgGjyGvHr16vfv30CRv9++vFrQ/rAk4Ia3DAQB2UARoDhQFqgGqBKr
IUDzISZ8ObP/pp/CZVMGTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwBhhjE
F7jcgOYeiL8g4Qw3BBjyQAbQ1wRNgCCgSqB6oC5kQ4AxCGQAQ49IQ4AqgeqB
uoB6IakRyACmBCADGAtEGgJUCVQP1AUxBAgoN4QqLqFimFAldqiSTqiSYqmV
d6iSi6lVnsABhSUbGQCPs+GAmNIeAMvulj0=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> GrayLevel[0.9], 
              Method -> "Queued", ImageSize -> {All, 20}, Evaluator -> 
              Automatic], FrameStyle -> Directive[
               GrayLevel[0.9], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Subscripted Variable\"", "Text", FontFamily -> 
                 "Source Sans Pro", FontSize -> 11, StripOnInput -> False], 
                "\"Insert subscripted variable placeholder\""}, 
               "PrettyTooltipTemplate"], ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3787878858871814623; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "Subscripted Variable"; 
                    DefinitionNotebookClient`SubscriptInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3787878858871814623]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> GrayLevel[1], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.82745, 0.20784, 0.], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.95686, 0.80196, 0.75], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchjw5tvzu19maOx1UPSQgCsoEiQHGiDHl4/3Zz
6mVTBlwIKAtUg8eQR8f3XQtUAaq8as/zYkrFxwPrf718DEFANlAEKA6UBaoB
qsRuyMP7EBPuZTj8fHYfa+gBxYGyEHPg7kE2BOILoBqCEQExB+QvVEOAIQbx
BS43oLkH4i9IOMMNAYY8UBDoa4ImQABQJVA9UBeyIcAYBAoCQ49IQ4AqgeqB
uoB6IakRyACmBKAgMBaINASoEuR9D0mIIUBAuSFUccl/6oUJVWKHKumEKimW
WnmHOrmYSuUJwkkUlmykA4IR8Z+40h4AAyMnLQ==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchNw/sODmxYXeazzp7OQgCsoEiQHFiDHny4P7h
2ozl2my4EFAWqAaPIbeP7t/ooQlUuVqP87yn9MMwtU8p+hAEZANFgOJAWaAa
oEqshgDNh5iwx1rwY7Len2wTTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwB
hhjEF7jcgOYeiL8g4Qw3BBjyQEGgrwmaAEFAlUD1QF3IhgBjECgIDD0iDQGq
BKoH6gLqhaRGIAOYEoCCwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8gQOKCzZyADEFOPElPYAYDEc1A==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchr1+//vjx4/fv3//AAJANFAGKE2PI8+fPv3z5
gsfZQFmgGjyGvHr16vfv30CRv9++vFrQ/rAk4Ia3DAQB2UARoDhQFqgGqBKr
IUDzISZ8ObP/pp/CZVMGTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwBhhjE
F7jcgOYeiL8g4Qw3BBjyQAbQ1wRNgCCgSqB6oC5kQ4AxCGQAQ49IQ4AqgeqB
uoB6IakRyACmBCADGAtEGgJUCVQP1AUxBAgoN4QqLqFimFAldqiSTqiSYqmV
d6iSi6lVnsABhSUbGQCPs+GAmNIeAMvulj0=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> GrayLevel[0.9], 
              Method -> "Queued", ImageSize -> {All, 20}, Evaluator -> 
              Automatic], FrameStyle -> Directive[
               GrayLevel[0.9], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            ActionMenuBox[
             FrameBox[
              ButtonBox[
               TemplateBox[{
                 StyleBox[
                  
                  TemplateBox[{
                   "\"Tables\"", 
                    "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\
\[FilledDownTriangle]\""}, "RowDefault"], "Text", FontFamily -> 
                  "Source Sans Pro", FontSize -> 11, StripOnInput -> False], 
                 "\"Table functions\""}, "PrettyTooltipTemplate"], 
               ButtonFunction :> 
               With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                 Quiet[
                  
                  Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                   Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3216557251994556740; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[Null]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3216557251994556740]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                   Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
               Dynamic[
                 FEPrivate`If[
                  CurrentValue[Enabled], 
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   FontColor -> GrayLevel[1], 
                    TaggingRules -> {"ButtonHovering" -> True}}, {
                   FontColor -> RGBColor[0.82745, 0.20784, 0.], 
                    TaggingRules -> {"ButtonHovering" -> False}}], {
                  FontColor -> RGBColor[0.95686, 0.80196, 0.75], 
                   TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                 "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchjw5tvzu19maOx1UPSQgCsoEiQHGiDHl4/3Zz
6mVTBlwIKAtUg8eQR8f3XQtUAaq8as/zYkrFxwPrf718DEFANlAEKA6UBaoB
qsRuyMP7EBPuZTj8fHYfa+gBxYGyEHPg7kE2BOILoBqCEQExB+QvVEOAIQbx
BS43oLkH4i9IOMMNAYY8UBDoa4ImQABQJVA9UBeyIcAYBAoCQ49IQ4AqgeqB
uoB6IakRyACmBKAgMBaINASoEuR9D0mIIUBAuSFUccl/6oUJVWKHKumEKimW
WnmHOrmYSuUJwkkUlmykA4IR8Z+40h4AAyMnLQ==
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchNw/sODmxYXeazzp7OQgCsoEiQHFiDHny4P7h
2ozl2my4EFAWqAaPIbeP7t/ooQlUuVqP87yn9MMwtU8p+hAEZANFgOJAWaAa
oEqshgDNh5iwx1rwY7Len2wTTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwB
hhjEF7jcgOYeiL8g4Qw3BBjyQEGgrwmaAEFAlUD1QF3IhgBjECgIDD0iDQGq
BKoH6gLqhaRGIAOYEoCCwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8gQOKCzZyADEFOPElPYAYDEc1A==
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchr1+//vjx4/fv3//AAJANFAGKE2PI8+fPv3z5
gsfZQFmgGjyGvHr16vfv30CRv9++vFrQ/rAk4Ia3DAQB2UARoDhQFqgGqBKr
IUDzISZ8ObP/pp/CZVMGTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwBhhjE
F7jcgOYeiL8g4Qw3BBjyQAbQ1wRNgCCgSqB6oC5kQ4AxCGQAQ49IQ4AqgeqB
uoB6IakRyACmBCADGAtEGgJUCVQP1AUxBAgoN4QqLqFimFAldqiSTqiSYqmV
d6iSi6lVnsABhSUbGQCPs+GAmNIeAMvulj0=
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True]}, Background -> GrayLevel[0.9], 
               Method -> "Queued", ImageSize -> {All, 20}, Evaluator -> 
               Automatic], FrameStyle -> Directive[
                GrayLevel[0.9], 
                AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
              False, StripOnInput -> False], {
             "\"Insert table with two columns\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    5800166344906378520; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Insert table with two columns"; 
                    DefinitionNotebookClient`TableInsert[2]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    5800166344906378520]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Insert table with three columns\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    533841403879783297; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Insert table with three columns"; 
                    DefinitionNotebookClient`TableInsert[3]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    533841403879783297]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Add a row to the selected table\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    4413051590217973467; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Add a row to the selected table"; 
                    DefinitionNotebookClient`TableRowInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    4413051590217973467]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Sort the selected table\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    9150037060110806081; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Sort the selected table"; 
                    DefinitionNotebookClient`TableSort[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    9150037060110806081]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Merge selected tables\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    2347719643166780208; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Merge selected tables"; 
                    DefinitionNotebookClient`TableMerge[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    2347719643166780208]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]]}, Appearance -> None, Method -> "Queued"], 
            ActionMenuBox[
             FrameBox[
              ButtonBox[
               StyleBox[
                
                TemplateBox[{
                 "\"Cells\"", 
                  "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\
\""}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                StripOnInput -> False], ButtonFunction :> 
               With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                 Quiet[
                  
                  Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                   Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3216557251994556740; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[Null]]], 
                    DefinitionNotebookClient`ButtonCodeID[3216557251994556740]
                    ], DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], FrameMargins -> {{4, 4}, {0, 0}}, 
               BaseStyle -> Dynamic[
                 FEPrivate`If[
                  CurrentValue[Enabled], 
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   FontColor -> GrayLevel[1], 
                    TaggingRules -> {"ButtonHovering" -> True}}, {
                   FontColor -> RGBColor[0.82745, 0.20784, 0.], 
                    TaggingRules -> {"ButtonHovering" -> False}}], {
                  FontColor -> RGBColor[0.95686, 0.80196, 0.75], 
                   TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                 "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchjw5tvzu19maOx1UPSQgCsoEiQHGiDHl4/3Zz
6mVTBlwIKAtUg8eQR8f3XQtUAaq8as/zYkrFxwPrf718DEFANlAEKA6UBaoB
qsRuyMP7EBPuZTj8fHYfa+gBxYGyEHPg7kE2BOILoBqCEQExB+QvVEOAIQbx
BS43oLkH4i9IOMMNAYY8UBDoa4ImQABQJVA9UBeyIcAYBAoCQ49IQ4AqgeqB
uoB6IakRyACmBKAgMBaINASoEuR9D0mIIUBAuSFUccl/6oUJVWKHKumEKimW
WnmHOrmYSuUJwkkUlmykA4IR8Z+40h4AAyMnLQ==
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchNw/sODmxYXeazzp7OQgCsoEiQHFiDHny4P7h
2ozl2my4EFAWqAaPIbeP7t/ooQlUuVqP87yn9MMwtU8p+hAEZANFgOJAWaAa
oEqshgDNh5iwx1rwY7Len2wTTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwB
hhjEF7jcgOYeiL8g4Qw3BBjyQEGgrwmaAEFAlUD1QF3IhgBjECgIDD0iDQGq
BKoH6gLqhaRGIAOYEoCCwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8gQOKCzZyADEFOPElPYAYDEc1A==
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchr1+//vjx4/fv3//AAJANFAGKE2PI8+fPv3z5
gsfZQFmgGjyGvHr16vfv30CRv9++vFrQ/rAk4Ia3DAQB2UARoDhQFqgGqBKr
IUDzISZ8ObP/pp/CZVMGTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwBhhjE
F7jcgOYeiL8g4Qw3BBjyQAbQ1wRNgCCgSqB6oC5kQ4AxCGQAQ49IQ4AqgeqB
uoB6IakRyACmBCADGAtEGgJUCVQP1AUxBAgoN4QqLqFimFAldqiSTqiSYqmV
d6iSi6lVnsABhSUbGQCPs+GAmNIeAMvulj0=
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True]}, Background -> GrayLevel[0.9], 
               Method -> "Queued", ImageSize -> {All, 20}, Evaluator -> 
               Automatic], FrameStyle -> Directive[
                GrayLevel[0.9], 
                AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
              False, StripOnInput -> False], {
             "\"Insert comment for reviewer\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    2572781756330727330; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Cells"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Insert comment for reviewer"; 
                    DefinitionNotebookClient`CommentInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    2572781756330727330]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Mark/unmark selected cells as comments\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3646530685697756512; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Cells"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Mark/unmark selected cells as comments"; 
                    DefinitionNotebookClient`CommentToggle[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3646530685697756512]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Mark/unmark selected cells as excluded\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    1866935765212102190; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Cells"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Mark/unmark selected cells as excluded"; 
                    DefinitionNotebookClient`ExclusionToggle[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    1866935765212102190]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]]}, Appearance -> None, Method -> "Queued"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}}, 
          AutoDelete -> False, 
          GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
              GrayLevel[0.9]}}, 
          GridBoxFrame -> {
           "Columns" -> False, "RowsIndexed" -> {1 -> GrayLevel[0.9]}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {
           "Columns" -> {5, {0.5}, 5}, "Rows" -> {{Automatic}}}, FrameStyle -> 
          GrayLevel[0.75]], "Grid"], ButtonBoxOptions -> {Enabled -> Dynamic[
            Not[
             TrueQ[DefinitionNotebookClient`$ButtonsDisabled]], 
            TrackedSymbols :> {DefinitionNotebookClient`$ButtonsDisabled}]}, 
        StripOnInput -> False]& )}], 
   Cell[
    StyleData["MainGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            TagBox[
             GridBox[{{
                GraphicsBox[{
                  Thickness[0.022222], {
                   FaceForm[{
                    RGBColor[0.87451, 0.27843, 0.031373], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{45., 22.5}, {45., 10.074}, {34.926, 0.}, {22.5, 
                    0.}, {10.074, 0.}, {0., 10.074}, {0., 22.5}, {0., 
                    34.926}, {10.074, 45.}, {22.5, 45.}, {34.926, 45.}, {45., 
                    34.926}, {45., 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGAwAWIQLckSxqe7SdlhmnN3zvPblg4w/smyffOl/K0cEp5e
ULq9U9lhT8lkCZZrVg6VL9UMOd4oO1SLrHN/GGXtcLUCKOCh4sDDpN0udtPa
4fnvlR8v8ao6ZIE12ELMrVZzAHLC+HjtHICGz32fruGQC1Zo57BASv+uCpsW
RP9Me4g9YjoQe3gcHICqlx/z1nNgAAEFB4j6Y/oOQMvOfVd2gLhjlgGEz+zg
oBnTf+irhiFEfw/UvDJDiP2+9g7qhhxrZGYZQtS9sHP48vdKxcs2Q4i72u0c
pEHOSTSEuxfsTiFDiPhCWwcXoHd+rzRwWOS67fPfEFuHx0tnH1EoMHDYUJQx
8a2MrUPQDrnW14IGUPfaOnzTAFq0VR8aXrYOoFA6V64HcccvWwfTuF2ePEy6
UPPtHIC+CH68VBvOP70QaNFeLTg/X6j5wKlELYdPl3yTBCLsIP7U0YK49y3U
PR80HQJ6p+cJHbaB88HqZ1jD1QNdUyWSZwWJH2stiHtuWcLdC+ND4lvfwbzT
MeHpBEt4+IPld1lA4p9DH+LuVgu4eeh8sH18hnA+2J6velB3aUHSyxE9iP8U
9aDpBMH3A/rWskQHYt8JBQw+TD0kPpTh5sHSMzgd/0TwYe6B8WHulY1Ksb7f
rwDng+PHSQES31csIPF7UREePgCOg02w
                    "], {{19.051, 14.242}, {19.051, 27.594}, {23.828, 
                    27.594}, {23.828, 26.543}, {21.426, 26.309}, {21.375, 
                    26.258}, {21.375, 24.219}, {21.375, 17.535}, {21.375, 
                    15.602}, {21.426, 15.547}, {23.828, 15.316}, {23.828, 
                    14.242}}, {{24.578, 18.75}, {24.578, 23.078}, {24.578, 
                    23.539}, {24.953, 23.914}, {25.418, 23.91}, {29.746, 
                    23.91}, {30.203, 23.91}, {30.578, 23.539}, {30.578, 
                    23.078}, {30.578, 18.75}, {30.582, 18.289}, {30.207, 
                    17.91}, {29.746, 17.91}, {25.418, 17.91}, {24.953, 
                    17.906}, {24.574, 18.285}, {24.578, 18.75}}, {{31.328, 
                    14.242}, {31.328, 15.316}, {33.684, 15.539}, {33.789, 
                    15.602}, {33.789, 17.641}, {33.789, 24.188}, {33.789, 
                    26.227}, {33.684, 26.281}, {31.328, 26.512}, {31.328, 
                    27.586}, {36.113, 27.586}, {36.113, 14.234}}}]}}, {
                 ImageSize -> {Automatic, 32}, 
                  ImagePadding -> {{5, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.25], AspectRatio -> Automatic, Background -> 
                  RGBColor[0.98824, 0.41961, 0.20392], 
                  ImageSize -> {45., 45.}, 
                  PlotRange -> {{0., 45.}, {0., 45.}}}], 
                StyleBox[
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    "\"Function Resource\"", FontFamily -> "Source Sans Pro", 
                    FontWeight -> "SemiBold", StripOnInput -> False], 
                    StyleBox[
                    "\"DEFINITION NOTEBOOK\"", FontFamily -> 
                    "Source Sans Pro", FontTracking -> "SemiCondensed", 
                    FontVariations -> {"CapsType" -> "AllSmallCaps"}, 
                    StripOnInput -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "ColumnsIndexed" -> {2 -> RGBColor[1., 1., 1.]}, 
                    "Rows" -> {{None}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Grid"], FontSize -> 24, FontColor -> RGBColor[1., 1., 1.], 
                 StripOnInput -> False]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"],
             "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
            "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
            "\[SpanFromLeft]", 
            TemplateBox[{
              StyleBox[
               
               TemplateBox[{
                "\"Function Repository\"", "\" \[RightGuillemet]  \""}, 
                "RowDefault"], "Text", FontColor -> RGBColor[1., 1., 1.], 
               StripOnInput -> False], 
              "https://resources.wolframcloud.com/FunctionRepository"}, 
             "HyperlinkURL"]}, {
            TemplateBox[{
              
              TemplateBox[{
               "\"Open Sample\"", 
                "\"View a completed sample definition notebook\""}, 
               "PrettyTooltipTemplate"], Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 4393071033038384034; (
                DefinitionNotebookClient`$ClickedButton = "Open Sample"; 
                DefinitionNotebookClient`ViewExampleNotebook[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[4393071033038384034]]& , 
              "\"View a completed sample definition notebook\"", False}, 
             "OrangeButtonTemplate"], 
            TemplateBox[{
              TemplateBox[{
               "\"Style Guidelines\"", 
                "\"View general guidelines for authoring resource \
functions\""}, "PrettyTooltipTemplate"], Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 5906117565281445171; (
                DefinitionNotebookClient`$ClickedButton = "Style Guidelines"; 
                DefinitionNotebookClient`ViewStyleGuidelines[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[5906117565281445171]]& , 
              "\"View general guidelines for authoring resource functions\"", 
              False}, "OrangeButtonTemplate"], 
            TemplateBox[{
              TemplateBox[{
                TagBox[
                 GridBox[{{"\"Tools\"", 
                    PaneSelectorBox[{False -> GraphicsBox[{
                    RGBColor[1., 1., 1.], 
                    AbsoluteThickness[1.], 
                    LineBox[{{0, 0}, {0, 10}, {10, 10}, {10, 0}, {0, 0}}], 
                    LineBox[{{5, 2.5}, {5, 7.5}}], 
                    LineBox[{{2.5, 5}, {7.5, 5}}]}, ImageSize -> 9, 
                    PlotRangePadding -> 1.5], True -> GraphicsBox[{
                    RGBColor[1., 1., 1.], 
                    AbsoluteThickness[1.], 
                    LineBox[{{0, 0}, {0, 10}, {10, 10}, {10, 0}, {0, 0}}], 
                    LineBox[{{2.5, 5}, {7.5, 5}}]}, ImageSize -> 9, 
                    PlotRangePadding -> 1.5]}, 
                    Dynamic[
                    CurrentValue[
                    EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]],
                     BaselinePosition -> Scaled[0]]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{0.35}}}], "Grid"], 
                "\"Toggle documentation toolbar\""}, "PrettyTooltipTemplate"],
               Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 5074018684552945401; (
                DefinitionNotebookClient`$ClickedButton = "Tools"; 
                DefinitionNotebookClient`ToggleToolbar[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[5074018684552945401]]& , 
              "\"Toggle documentation toolbar\"", False}, 
             "OrangeButtonTemplate"], 
            TagBox[
             
             GridBox[{{"\"\"", "\"\""}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
              False, GridBoxDividers -> {
               "ColumnsIndexed" -> {2 -> True}, "Rows" -> {{False}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{2}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.5}}}, FrameStyle -> 
              RGBColor[0.99412, 0.7098, 0.60196]], "Grid"], 
            TemplateBox[{
              
              TemplateBox[{
               "\"Check\"", "\"Check notebook for potential errors\""}, 
               "PrettyTooltipTemplate"], Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 7891204313296928191; (
                DefinitionNotebookClient`$ClickedButton = "Check"; 
                DefinitionNotebookClient`CheckDefinitionNotebook[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[7891204313296928191]]& , 
              "\"Check notebook for potential errors\"", False}, 
             "OrangeButtonTemplate"], 
            TemplateBox[{
              
              TemplateBox[{"\"Preview\"", "\"Generate a preview notebook\""}, 
               "PrettyTooltipTemplate"], Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 4299709568580201021; (
                DefinitionNotebookClient`$ClickedButton = "Preview"; 
                DefinitionNotebookClient`PreviewResource[
                  ButtonNotebook[], "Notebook"]), 
               DefinitionNotebookClient`ButtonCodeID[4299709568580201021]]& , 
              "\"Generate a preview notebook\"", True}, 
             "OrangeButtonTemplate"], 
            ActionMenuBox[
             TemplateBox[{
               TemplateBox[{"\"Deploy\"", 
                 TemplateBox[{5}, "Spacer1"], "\"\[FilledDownTriangle]\""}, 
                "RowDefault"], Annotation[
               DefinitionNotebookClient`$ButtonCodeID = 1898445052439169298; 
                Null, 
                DefinitionNotebookClient`ButtonCodeID[1898445052439169298]]& ,
                "\"\"", True}, "OrangeButtonTemplate"], {
             "\"Locally on this computer\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    8714502586816766511; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Locally on this computer"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "Local"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    8714502586816766511]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], "\"For my cloud account\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    1389539917011878958; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "For my cloud account"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "CloudPrivate"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    1389539917011878958]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], "\"Publicly in the cloud\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    5593410685219912767; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Publicly in the cloud"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "CloudPublic"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    5593410685219912767]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], 
              "\"In this session only (without documentation)\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    8586347731213964380; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "In this session only (without documentation)"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "KernelSession"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    8586347731213964380]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]]}, Appearance -> None, Method -> "Queued"], 
            ItemBox[
             StyleBox[
              DynamicBox[
               ToBoxes[
                CurrentValue[
                 EvaluationNotebook[], {TaggingRules, "StatusMessage"}, ""], 
                StandardForm], Initialization :> (CurrentValue[
                  EvaluationNotebook[], {TaggingRules, "StatusMessage"}] = 
                "")], "Text", 
              GrayLevel[1], StripOnInput -> False], ItemSize -> Fit, 
             StripOnInput -> False], 
            DynamicBox[
             ToBoxes[
              If[
               CurrentValue[
                EvaluationNotebook[], {
                TaggingRules, "SubmissionReviewData", "Review"}, False], 
               RawBoxes[
                TemplateBox[{
                  TemplateBox[{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Thickness[0.06349], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBWIWIGZigIEX9mCqQd8Bwv+Bnc/A54CiHs5HV6/ngJUP
p2HmwdTp4FCHTvOhqYfZrw2lhdDk0fno6tHcD1PPwOSAnY+uns8BAE8cGz4=

                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgB2IWIGZigAEJBwjNB6EblHHwX9ijqofxoeoYhKC0Bg4+
Hw4apk4Uap8aDr4QDhqqDu4uVRx8URw0TJ001D5lHHwJHDRUHYMclFbCwZfG
QUPVNSjgp+HmIWgAG/wcEg==
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10EEKgCAQhWGpFtEyEAYGggQj6RKeoSMErbuCR0/IWfTgCcPwy7fR9XrO
u3fOTXWGOp2zM+ZvH2170nv+e2sFH0ijt45/XxJp9NgRPHYAb63kHhu9tf2H
eU8aPfbS9kxawAvxnrSCx3c3XzbS6JX4RFrAS34B53ckaw==
                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False]}, 
                    ImageSize -> 15, PlotRange -> {{0., 15.75}, {0., 16.5}}, 
                    AspectRatio -> 1.15], "\"Submit Update\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, "ColumnsIndexed" -> {2 -> 0.5}, 
                    "Rows" -> {{0}}}], "Grid"], 
                    "\"Submit changes to update your function submission\""}, 
                   "PrettyTooltipTemplate"], Annotation[
                  DefinitionNotebookClient`$ButtonCodeID = 
                    3196298050911436087; (
                    DefinitionNotebookClient`$ClickedButton = "SubmitUpdate"; 
                    With[{RSNB`nb = ButtonNotebook[]}, 
                    DefinitionNotebookClient`DisplayStripe[RSNB`nb, 
                    DefinitionNotebookClient`SubmitRepositoryUpdate[RSNB`nb], 
                    "ShowProgress" -> True]]), 
                   DefinitionNotebookClient`ButtonCodeID[
                   3196298050911436087]]& , 
                  "\"Submit changes to update your function submission\"", 
                  True}, "OrangeButtonTemplate"]], 
               RawBoxes[
                TemplateBox[{
                  TemplateBox[{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Thickness[0.06349], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBWIWIGZigIEX9mCqQd8Bwv+Bnc/A54CiHs5HV6/ngJUP
p2HmwdTp4FCHTvOhqYfZrw2lhdDk0fno6tHcD1PPwOSAnY+uns8BAE8cGz4=

                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgB2IWIGZigAEJBwjNB6EblHHwX9ijqofxoeoYhKC0Bg4+
Hw4apk4Uap8aDr4QDhqqDu4uVRx8URw0TJ001D5lHHwJHDRUHYMclFbCwZfG
QUPVNSjgp+HmIWgAG/wcEg==
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10EEKgCAQhWGpFtEyEAYGggQj6RKeoSMErbuCR0/IWfTgCcPwy7fR9XrO
u3fOTXWGOp2zM+ZvH2170nv+e2sFH0ijt45/XxJp9NgRPHYAb63kHhu9tf2H
eU8aPfbS9kxawAvxnrSCx3c3XzbS6JX4RFrAS34B53ckaw==
                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False]}, 
                    ImageSize -> 15, PlotRange -> {{0., 15.75}, {0., 16.5}}, 
                    AspectRatio -> 1.15], "\"Submit to Repository\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, "ColumnsIndexed" -> {2 -> 0.5}, 
                    "Rows" -> {{0}}}], "Grid"], 
                    "\"Submit your function to the Wolfram Function \
Repository\""}, "PrettyTooltipTemplate"], Annotation[
                  DefinitionNotebookClient`$ButtonCodeID = 
                    3704832848557640569; (
                    DefinitionNotebookClient`$ClickedButton = "Submit"; 
                    With[{RSNB`nb = ButtonNotebook[]}, 
                    DefinitionNotebookClient`DisplayStripe[RSNB`nb, 
                    DefinitionNotebookClient`SubmitRepository[RSNB`nb], 
                    "ShowProgress" -> True]]), 
                   DefinitionNotebookClient`ButtonCodeID[
                   3704832848557640569]]& , 
                  "\"Submit your function to the Wolfram Function \
Repository\"", True}, "OrangeButtonTemplate"]]], StandardForm], Evaluator -> 
             "System", SingleEvaluation -> True]}}, 
          GridBoxAlignment -> {
           "Columns" -> {{Left}}, "ColumnsIndexed" -> {-1 -> Right}, 
            "Rows" -> {{Center}}}, AutoDelete -> False, 
          GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
              RGBColor[0.98824, 0.41961, 0.20392], 
              RGBColor[0.92157, 0.34118, 0.10588]}}, 
          GridBoxFrame -> {
           "Columns" -> False, 
            "RowsIndexed" -> {
             1 -> RGBColor[0.98824, 0.41961, 0.20392], 2 -> 
              RGBColor[0.92157, 0.34118, 0.10588]}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {
           "Columns" -> {5, {0.9}, 5}, 
            "RowsIndexed" -> {1 -> 1.1, 2 -> 1.3, 3 -> 0.25}}, FrameStyle -> 
          RGBColor[0.98824, 0.41961, 0.20392]], "Grid"], 
        ButtonBoxOptions -> {Enabled -> Dynamic[
            Not[
             TrueQ[DefinitionNotebookClient`$ButtonsDisabled]], 
            TrackedSymbols :> {DefinitionNotebookClient`$ButtonsDisabled}]}, 
        StripOnInput -> False]& )}], 
   Cell[
    StyleData["ReviewerCommentLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{#, 
           TemplateBox[{
             GraphicsBox[{
               Thickness[0.022222], {
                FaceForm[{
                  RGBColor[0.87451, 0.27843, 0.031373], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{45., 22.5}, {45., 10.074}, {34.926, 0.}, {22.5, 
                 0.}, {10.074, 0.}, {0., 10.074}, {0., 22.5}, {0., 34.926}, {
                 10.074, 45.}, {22.5, 45.}, {34.926, 45.}, {45., 34.926}, {
                 45., 22.5}}}]}, {
                FaceForm[{
                  RGBColor[1., 1., 1.], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                  1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                  2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                  3}, {0, 1, 0}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                  3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGAwAWIQLckSxqe7SdlhmnN3zvPblg4w/smyffOl/K0cEp5e
ULq9U9lhT8lkCZZrVg6VL9UMOd4oO1SLrHN/GGXtcLUCKOCh4sDDpN0udtPa
4fnvlR8v8ao6ZIE12ELMrVZzAHLC+HjtHICGz32fruGQC1Zo57BASv+uCpsW
RP9Me4g9YjoQe3gcHICqlx/z1nNgAAEFB4j6Y/oOQMvOfVd2gLhjlgGEz+zg
oBnTf+irhiFEfw/UvDJDiP2+9g7qhhxrZGYZQtS9sHP48vdKxcs2Q4i72u0c
pEHOSTSEuxfsTiFDiPhCWwcXoHd+rzRwWOS67fPfEFuHx0tnH1EoMHDYUJQx
8a2MrUPQDrnW14IGUPfaOnzTAFq0VR8aXrYOoFA6V64HcccvWwfTuF2ePEy6
UPPtHIC+CH68VBvOP70QaNFeLTg/X6j5wKlELYdPl3yTBCLsIP7U0YK49y3U
PR80HQJ6p+cJHbaB88HqZ1jD1QNdUyWSZwWJH2stiHtuWcLdC+ND4lvfwbzT
MeHpBEt4+IPld1lA4p9DH+LuVgu4eeh8sH18hnA+2J6velB3aUHSyxE9iP8U
9aDpBMH3A/rWskQHYt8JBQw+TD0kPpTh5sHSMzgd/0TwYe6B8WHulY1Ksb7f
rwDng+PHSQES31csIPF7UREePgCOg02w
                  "], {{19.051, 14.242}, {19.051, 27.594}, {23.828, 27.594}, {
                  23.828, 26.543}, {21.426, 26.309}, {21.375, 26.258}, {
                  21.375, 24.219}, {21.375, 17.535}, {21.375, 15.602}, {
                  21.426, 15.547}, {23.828, 15.316}, {23.828, 14.242}}, {{
                  24.578, 18.75}, {24.578, 23.078}, {24.578, 23.539}, {24.953,
                   23.914}, {25.418, 23.91}, {29.746, 23.91}, {30.203, 
                  23.91}, {30.578, 23.539}, {30.578, 23.078}, {30.578, 
                  18.75}, {30.582, 18.289}, {30.207, 17.91}, {29.746, 
                  17.91}, {25.418, 17.91}, {24.953, 17.906}, {24.574, 
                  18.285}, {24.578, 18.75}}, {{31.328, 14.242}, {31.328, 
                  15.316}, {33.684, 15.539}, {33.789, 15.602}, {33.789, 
                  17.641}, {33.789, 24.188}, {33.789, 26.227}, {33.684, 
                  26.281}, {31.328, 26.512}, {31.328, 27.586}, {36.113, 
                  27.586}, {36.113, 14.234}}}]}}, {
              ImageSize -> 12, AspectRatio -> Automatic, Background -> None, 
               ImageSize -> {45., 45.}, PlotRange -> {{0., 45.}, {0., 45.}}}],
              "Wolfram Function Repository Reviewer"}, 
            "PrettyTooltipTemplate"]}}, 
         GridBoxAlignment -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, AutoDelete -> 
         False, GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"]& )}], 
   Cell[
    StyleData["CommentCellLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            StyleBox[#, FontSize -> 11]}, {
            StyleBox[
             DynamicBox[
              ToBoxes[
               DateString[
                TimeZoneConvert[
                 DateObject[#2, TimeZone -> 0]], {
                "Month", "/", "Day", "/", "Year", " ", "Hour24", ":", 
                 "Minute"}], StandardForm], SingleEvaluation -> True], 
             FontSize -> 9]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}], 
         "Grid"], "CommentLabel", ShowStringCharacters -> False]& )}], 
   Cell[
    StyleData["OrangeButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (FrameBox[
        ButtonBox[
         StyleBox[#, "Text", FontFamily -> "Source Sans Pro", FontWeight -> 
          "SemiBold", FontTracking -> "Condensed", FontSize -> 13, FontColor -> 
          Dynamic[
            FEPrivate`If[
             CurrentValue[Enabled], 
             GrayLevel[1], 
             RGBColor[0.95686, 0.80196, 0.75]], Evaluator -> "System"], 
          StripOnInput -> False], ButtonFunction :> 
         With[{RSNB`nb$ = ButtonNotebook[]}, 
           If[#4, CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
             ProgressIndicator[Appearance -> "Necklace"]]; 
           With[{RSNB`$cp$ = $ContextPath}, 
             Quiet[
              
              Block[{$ContextPath = RSNB`$cp$, 
                ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                False, DefinitionNotebookClient`$ButtonCodeID = None}, 
               Internal`WithLocalSettings[
                DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                   ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                   "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                 Annotation[
                 DefinitionNotebookClient`$ButtonCodeID = 3145484069433207908; 
                  DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[
                    #2[]]]], 
                  DefinitionNotebookClient`ButtonCodeID[3145484069433207908]],
                  DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
               Null]]]; 
           CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = ""; 
           Null], FrameMargins -> {{5, 5}, {0, 0}}, 
         Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4HW4NCUIlyHPAkQfuPPftue4ZskMQUA2UAQoTpQhYVJ3
XXgumzLgQkBZoBo8hjwLFLtuzQJSbIbDELA4UA1QJXZDwqSgJhCBgCrh7kE2
BL8vsPsL1RBgiOHzBQ5/QcIZbggw5ElyBgQBdSEbAoxBMgwB6gLqhaRGIAOY
EsgwBKgLYggQUG4IVVxCxTChSuxQJZ1QJcVSK+9QJxdTqTyhWslGbhmLHxBT
2gMAMUz3Hw==
             "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
             Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4HW4NCUIlyF3/cTOOAvtteRZb8ABQUA2UAQoTowhL0Ol
jtrxL9dmw4WAskA1eAy57y++yYgTjwkQBFQDVInVEKD5xJgANwfuHmRD8PsC
q7/QDAGGGEkmQBAknOGGAEOeDEOAupANAcYgGYYAdQH1QlIjkAFMCWQYAtQF
MQQIKDeEKi6hYphQJXaokk6okmKplXeokoupVZ5Qq2Qju4zFD4gp7QFpR8IT

             "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
             Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4HW4NCUIlyHvKz2/LG7+eWr737fPIAjIBooAxYkx5E2M
0rets/E4GygLVIPHkHclTn+e3gaK/P76+drsrsN5IRudFCEIyAaKAMWBskA1
QJVYDQGaDzHh5amDm9xUl2uzYSKgOFAWYg7cPciGQHwBVINVOzKCmANUj2YI
MMQgvsDlBjT3QPwFCWe4IcCQBzKAviZoAgQBVQLVA3UhGwKMQSADGHpEGgJU
CVQP1AXUC0mNQAYwJQAZwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8oRaJRvZZSx+QExpDwAxBaHa
             "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
             Interleaving -> True]}, Background -> 
         RGBColor[0.92157, 0.34118, 0.10588], Method -> "Queued", 
         ImageSize -> {All, 23}, Evaluator -> Automatic], FrameStyle -> 
        Directive[
          RGBColor[0.92157, 0.34118, 0.10588], 
          AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> False, 
        StripOnInput -> False]& )}], 
   Cell[
    StyleData["SuggestionGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        FrameBox[
         AdjustmentBox[
          TagBox[
           GridBox[{{
              
              TemplateBox[{#2, #3, {16., 16.}, {{1., 17.}, {1., 17.}}}, 
               "SuggestionIconTemplate"], 
              
              PaneBox[#, ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
               Baseline, ImageSize -> Full], 
              RowBox[{
                AdjustmentBox[
                 TemplateBox[{
                   ActionMenuBox[
                    TagBox[
                    PaneSelectorBox[{False -> GraphicsBox[{
                    EdgeForm[
                    Directive[
                    GrayLevel[1, 0], 
                    Thickness[0.025]]], 
                    FaceForm[#4], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], #5, 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0], True -> 
                    GraphicsBox[{
                    EdgeForm[
                    Directive[#5, 
                    Thickness[0.025]]], 
                    FaceForm[#2], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], 
                    GrayLevel[1], 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], 
                    MouseAppearanceTag["LinkHand"]], #6, Appearance -> None, 
                    Method -> "Queued"], "\"View suggestions\""}, 
                  "PrettyTooltipTemplate"], BoxBaselineShift -> -0.5], 
                " "}]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {Automatic, Automatic, Fit}, 
              "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
          BoxMargins -> {{0.25, -0.5}, {0.15, -0.15}}], 
         RoundingRadius -> {13, 75}, Background -> #4, FrameStyle -> None, 
         FrameMargins -> {{0, 8}, {0, 0}}, ImageMargins -> {{0, 0}, {5, 5}}, 
         StripOnInput -> False], "Text", FontColor -> #5, FontSize -> 14, 
        FontFamily -> "Source Sans Pro", FontWeight -> "SemiBold", 
        FontTracking -> "Plain", 
        PrivateFontOptions -> {"OperatorSubstitution" -> False}, 
        LineBreakWithin -> False]& )}], 
   Cell[
    StyleData["SuggestionIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.055556], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigIIGAwcIQ8kBxk94ekHp9k9Vh8qXaoYcOfoO
m+a+X37stKZDTP+hrxpzdOA0TBymDqYPl7n2pnG7PHlk4Pw5RxQ2FGWIwPWD
jI3p54WbLxuVYn3fnwluD8S8H/Yo9gD5KPYA+TB7YPph9sDMh9EwcZg6FPdh
MRfdXpi7YPph7oaZD/MXzB5c4QCzBwA/Dn+d
            "]]}, 
          FaceForm[#]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{8.1753, 7.4169}, {
             7.7969, 11.308}, {7.7969, 13.38}, {10.12, 13.38}, {10.12, 
             11.308}, {9.7415, 7.4169}, {8.1753, 7.4169}}, CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQFKDg+rRNa5P+RzKPOXE8vSVYTz8z+0ngxpVHCA
qBNwmPd++THv7/IO8q2vA3fICTpUvlQz5Hgj52DLdX1xga2QQxoYyDmcYLed
HTpfGM6/k8GQ3+giCue7M1dwq7wQg+vnmbyyKdBTAm6+tsTUK5wZknD7Pec2
qB1qk4K772Y8iCXtAHM/jP/bquBcxyUEfyJ/ldnqOmW4/qw9JZMlWFTg5tfa
m8bt6lSB23/2DAiowN0H48PcD+PD/AfTD/M/zHxY+MDsh4UfzH2w8EUPfwD5
N5G6
             "]}]}, 
          FaceForm[#2]]}, ImageSize -> #3, PlotRange -> #4, AspectRatio -> 
        Automatic, BaselinePosition -> Scaled[0.1]]& )}], 
   Cell[
    StyleData["FormEditValuesButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TemplateBox[{
         TagBox[
          PaneBox[
           PaneSelectorBox[{False -> GraphicsBox[
               TagBox[
                RasterBox[CompressedData["
1:eJzNWHlMVEcYf28XlGM5VlcRapRDDFK0sBaLBWVXUDxTKpe4JgvoQlALAsvV
hHIoV4KK6wGiQlUqoqDcKKysDSZtPZJWTTzaxGrV2mqrNtqKB3Qnz8+Zd6Cv
tn90vkgyv+/4zc58M9/3dEtIXZoooSgqw8r8Z2l8tjo9PT43wtE8iUrJSE5K
0a1akKLXJenSAxKkZlD58h9y+X+M8Z7a/I3G7V/lHQgKp2kGmzw9rcrQb+j/
ZItPIGBvNywsVVGVJ01DWAqbpBYUFZ1hGsTYvssRqTLHt4nvoIgvbP6ZjM+I
Nt9PzUePPdbvcvX+ZwzTQ9vv8yMh6R04fFNY0/ciOkM8wzjXY4+F47xJgiPF
cqRuY3kOlnUGLFq4khsv53NPv8zd7NXs/lYsR+158Gm9l1Tu7IYwmq7oJaMd
uWMnR7jMMXLd/isYt7UXx4F9Rjtj1NmNXPPsCKyh6S9+AHzUOHEcpR3gMWM+
iQdHrq1kZFkmidvYQS633399ZBf31G21F/ZdLmmvPo0zVcyalCFg33Qr78Ce
7+qv5jdOm8W3e39u9yN+npR3ieHQ5ArlWGwW28pBIXwfilvFcESnC2eyMoS0
ii8UstncZ2XDjiaROihGjbMcyWVJLBP0N2ELC8vm229icHFPKKo+Y3zK3Jj6
q2lV3gFvZpk4BfSqKHwfFC4fLNDml3cVt2IGO7m+5sRzfoSNxglemGVV8dZT
yRXqaKeJ5V1gkWIALX5bk8r5u+3x3qEbwvuN3kJ1DN9j5mLQdz60skXIeM9X
PoPMnWYzdD4cjoGRMC3XRyI5+CNolyQhJK4A5mWdXGs7Ofs3HP+z9nz16fbf
Scz41Muf67c8B7Q7z6L5RiPMAxZxbfU1OFbDtVDNSGtmnb4qQz/W1F1ElYsc
8rG9A6BF8x1fw2zhSnbddHHHJ115kl3rJNI1mzBL6HI2x9SglrugQzHzG7Ft
RQ95IglF+DfwqylNb2gRugnWMnNteFWLj/+FsNlLyd3tfoTrTPWZV+vUcBnQ
cHbre8HoTzy3ljGYxzT2Cep3MespaibRtZWwGy9vnPmkmXPgjy1fgte7Mxlk
fhwZa/8V+9EQTZuPzwg4HBSA1J4XZqCotB1gExTO58hrYOoYM5RzcCcAHHIn
QKpPD8eBzx12GHP0PAlfjXPI3C8J7JXlSNjt9vuSYVrKkjbwUs4R2quCwxLU
mFJTZpCoaQjXuPqrgPmqhBhs7XH1lTsxmP889su24lOEZuzEyJE7ZJ3Gu23o
Z9bDHvitrb2A0Um+NedwxKO/IGzrKZhn15FnRFHeAdh2zSZuXxscCXtpGorR
kxqpRWx2zxPQsTk8/bgrxe+MaWj9UXw/be11pZih5VduxzPCqu03kiPFALPM
3VyOCV5kv9P3ovJk6rbkipI2du3n39AwLegO3UBzn0CYH3vMfzHUMeyM4Mu6
7Vwfiqr6BrRxBWhO0/suAxK5jm8fpoX7LszAz4bJStAanylcGCwiFbD9V2ja
xk4ZosmNTsc+Xv51F4Xit9yduwJbqaJ0JYEfoT4xaw9YFDaBVuaId93cVb58
MxPLsL/UIlSz2URmft3FGL2tA7YI1UAONF7HOeWnxhb6XULrJFnQsLHz+XDW
x6ooZQjcOD4DKXsvkfnu6i1kYxpaVcw/H/5QRQl7L0lk27HfLJCtp8Rw6EqF
fDe08F+54MjaC0jX8aDpFtglV4jhCAoH+44HzPvdfFuTy63xMGwd5GMpKq8B
fNTRpNZj2vw4RvznkfhoZ7A/fBO9AdzTEhrM70HiNBGj1jJcRY3PJvmSHod+
Ao3Yr2j8HVXeNXMx7Cr7K7HmHOzFZGXWHpytjmPEcXx2kIzWcG15juOYqUHk
dz+S2OwRVmFa3DkhaboljgF1R9wc6R3A/RJIz5PWe1wsNlssB0XFZgllI8Qe
TrOhxcJSPAfqIjabhOLkNYSvFsL3XlqsG67qv264eqcYuv4gI9V/bz+Kptcf
IbETz4ualXP+zf/+WMuWJO08i2J1P0qrYjJTIl2WyXx5NV6PK1C88/bR/7vx
N3kqZvY=
                 "], {{0, 50.}, {50., 0}}, {0, 255}, ColorFunction -> 
                 GrayLevel], 
                BoxForm`ImageTag[
                "Byte", ColorSpace -> "Grayscale", Interleaving -> True], 
                Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
               ImageSizeRaw -> {50., 50.}, PlotRange -> {{0, 50.}, {0, 50.}}],
              True -> GraphicsBox[
               TagBox[
                RasterBox[CompressedData["
1:eJzNWG1MU1cY7m1vS4GWttBLy0dLWyhl5aultrT0C2QzM5rMIWgyluDHkMwf
YgBF9gc1cWpijDNuRNFsv2Rmuqmb/NjIYIFkG2qyAYnAljidODfdmItu+AHs
Xi6n59x7D3LH9mPnRJLzvB/Pue95z3nfat3UWLVFKpFImpX0n6qNrRVNTRvb
1mrpRc225tcbttW/tnJbS31DfZN/k4wGS+b/MSb/jxFvt7QX95R86TytXyMh
WEztye1w97v7c97SBAG2tEHIqRpXX/ksnPlnCVIiMTWXz0DMN5rZSGqX4l+u
t+wp+wn1z05Lu7ZCiIYfOjoTnf+MQfd8aFLoiZmRR4FbeEl02tQsnkFpCT/E
+1lsUtViOezHOJYzhZdSVqVt5vvLe0/ldpzk7mbZN2I5vEPAJnjPdlBpnQOJ
4s9Qb2V3SB0Dk9rM7b4xiJNJ4jigjSINiaAV3TO1FjEgSr+PWRjFcRR+AiyS
X0RxqjrnCDtNO1Bcpga5HJp8tud4m/2Yd9g3WvixZxBmqpg96SqBfmDCeXrZ
t6XjzjOaMEbvhfADYZ4UdYvhMLfhcsy8k6sl1+PvQ8EFMRymJnwm6ypRLcse
nI7rc1kC1xshk+sVRmkcn8V2AGvfi1jKy24vxhBvs+71XI4+Zm9M6XhuR5J/
cZaE54CcqoH3IS49eaWlvai74AJkIHWOE9GnQg/FPQl5kMW6zz2QfSh1nTKr
qBto2I8CKXxbbQeF0VYVB27i4828hanrhRYpq4E8dF+WOBcFe8xmZv5OcxhC
9xdiYKexjm9DSP0/AGl6A4NYdoN14SW+NqnjfkPkT++QZzD0G4pFH6u9fDvz
LiD1XGHWxT1gnbKKr+s4AX35rxtqpfHsPrXl7n4o8Y4wlQsditTIIyBl1iVf
gVXaZm7djLfBk3b1cWsdIcs5DFkMr3A5NKHg3RgH7dN5BsmUT9ETse6F34Cp
pkTBedxNkKno2hCrxZG/GIyq4mTKA1hnPJdj+6wVMEiYlzg6PX8mT2UqFlMV
cU/Q0cnuJ/8ciuYcAdGYv3H0SbPnIByuL4BVUoBFjBtQX74xeQrwZmmHZwQ4
5PrYmQ7hGSSS3HeADt0XCTicXWwdY4duOewEAIfCEMu/wYU44LmDCEOOyFTG
VphDdL+EiZU0DkQ7NEks0FIWXgRWuuW4WOV/QDCNqSTJh6Lls7DGlY4DTFuO
YyCTYPVVGFgseQX3Zct6Yy6mxyFSdget0zDa7n52P9wB31rvMERVLs9VxOPP
DOYeAOu8d9Ezor/Qj0TwML+vpapBLOlvb0ElBGlujUzF7iCHQ+Xm7xS+M3RN
/AjeTzLJth8yBH/hdzxSZfBXlMN+NHZfTvI5EvLQfic67eqzH8s+VHiRW/uF
N9RYB2SBm8xaEwTr8EPhi5G6npsRwml/m29Dv4FfA6llNxs+3yhAMrcL9Y11
4L7jGYTZoC6JffmTuHQWy2wEmG+MvvRqXaW5zdSE2Hi9Izj/wbuGV6EWVWN7
U/8S0yc6TsXux1kgJbUw6nRXOf9m2g5Ae4I01Lp60cz3jphaSA3UMNSCHPDf
gDmlrYAajk7cPlEWZsjUmjL9y1SNrhLcOCEDOn3X0HxPdOJ0ymet+4TnIxxU
Dd46fQtXj/tmgekeEMNh24+zLTgvfOWoau8wIwv9HpgAetmHxHDo1wB92nbu
/S67bW7j13gwSI0ila6+XcAmdR0qVRUZN7AzeQWKK9KAfuAW8wbwTws32O9h
pjILojIVrKLRJyoXahH4EUjE/oqGv6OKulNWg6hyfyV6roJYqEscp2C2yilx
HM73UW/+6+ZdckoTQn/3M9PcKlUa62DnNBerCXEMTHfEz5HII9gvxbCp4D0+
Zm4Vy0H3kjtx2Qh8LyShs1UunoPpIly9OD/OroytONx3La1+oar/rJHotB8N
/4F6Kv1Onkz3hx+iWPRp/jm6Y/gX//sjU6U3eK4wvsIPcjvYzCRkph3sLy//
DcvuuIyle//vxt/PCE6d
                 "], {{0, 50.}, {50., 0}}, {0, 255}, ColorFunction -> 
                 GrayLevel], 
                BoxForm`ImageTag[
                "Byte", ColorSpace -> "Grayscale", Interleaving -> True], 
                Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
               ImageSizeRaw -> {50., 50.}, 
               PlotRange -> {{0, 50.}, {0, 50.}}]}, 
            Dynamic[
             CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
            0], ImageSize -> {Automatic, 15}, ImageSizeAction -> 
           "ResizeToFit"], 
          MouseAppearanceTag["LinkHand"]], "\"Edit values\""}, 
        "PrettyTooltipTemplate"]& )}], 
   Cell["Documentation", "Section"], 
   Cell["Usage", "Subsection"], 
   Cell[
    StyleData["UsageInputs", StyleDefinitions -> StyleData["Input"]], 
    CellMargins -> {{66, 10}, {0, 8}}, 
    StyleKeyMapping -> {"Tab" -> "UsageDescription"}, Evaluatable -> False, 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb$ = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb$, 
          Cell["", "UsageDescription"], All]; 
        SelectionMove[RSNB`nb$, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoStyles -> False, ShowCodeAssist -> False, 
    CodeAssistOptions -> {"DynamicHighlighting" -> False}, 
    LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> "Text", 
    FontFamily -> "Source Sans Pro", FontSize -> 15, FontWeight -> "Plain"], 
   Cell[
    StyleData["UsageDescription", StyleDefinitions -> StyleData["Text"]], 
    CellMargins -> {{86, 10}, {7, 0}}, 
    StyleKeyMapping -> {"Backspace" -> "UsageInputs"}, CellGroupingRules -> 
    "OutputGrouping", 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb$ = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb$, 
          Cell[
           BoxData[""], "UsageInputs", FontFamily -> "Source Sans Pro"], All]; 
        SelectionMove[RSNB`nb$, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoSpellCheck -> False], 
   Cell["Details & Options", "Subsection"], 
   Cell[
    StyleData["Notes", StyleDefinitions -> StyleData["Item"]], CellDingbat -> 
    StyleBox["\[FilledVerySmallSquare]", FontColor -> GrayLevel[0.6]], 
    CellMargins -> {{66, 24}, {9, 7}}, ReturnCreatesNewCell -> False, 
    StyleKeyMapping -> {}, DefaultNewCellStyle -> "Notes", ShowAutoSpellCheck -> 
    False, GridBoxOptions -> {BaseStyle -> "TableNotes"}], 
   Cell[
    StyleData["TableNotes", StyleDefinitions -> StyleData["Notes"]], 
    CellDingbat -> None, CellFrameColor -> RGBColor[0.749, 0.694, 0.553], 
    StyleMenuListing -> None, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    GridBoxOptions -> {
     FrameStyle -> GrayLevel[0.906], 
      GridBoxAlignment -> {
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}}, 
      GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {{True}}}, 
      GridDefaultElement -> Cell["\[Placeholder]", "TableText"]}], 
   Cell[
    StyleData["TableText"], DefaultInlineFormatType -> 
    "DefaultInputInlineFormatType", AutoQuoteCharacters -> {}, 
    StyleMenuListing -> None], 
   Cell["Examples", "Subsection"], 
   Cell[
    StyleData["ExampleDelimiter"], Selectable -> False, ShowCellBracket -> 
    Automatic, CellMargins -> {{66, 14}, {5, 10}}, Evaluatable -> True, 
    CellGroupingRules -> {"SectionGrouping", 58}, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False, 
    CellLabelAutoDelete -> True, TabFilling -> 
    "\[LongDash]\[NegativeThickSpace]", TabSpacings -> {100}, 
    StyleMenuListing -> None, FontFamily -> "Verdana", FontWeight -> Bold, 
    FontSlant -> "Plain", FontColor -> GrayLevel[0.906]], 
   Cell[
    StyleData["ExampleText", StyleDefinitions -> StyleData["Text"]]], 
   Cell[
    StyleData["PageBreak", StyleDefinitions -> StyleData["ExampleDelimiter"]],
     Selectable -> False, CellFrame -> {{0, 0}, {1, 0}}, 
    CellMargins -> {{66, 14}, {15, -5}}, 
    CellElementSpacings -> {"CellMinHeight" -> 1}, Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), CellFrameColor -> 
    GrayLevel[
      Rational[77, 85]]], 
   Cell[
    StyleData["Subsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   Cell[
    StyleData["Subsubsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   Cell[
    StyleData["ExampleImage"], PageWidth :> 650, 
    CellMargins -> {{66, 66}, {16, 5}}, Evaluatable -> False, ShowCellLabel -> 
    False, MenuSortingValue -> 10000, 
    RasterBoxOptions -> {ImageEditMode -> False}], 
   Cell["Links", "Section"], 
   Cell[
    StyleData["Link"], FontFamily -> "Source Sans Pro", FontColor -> Dynamic[
      If[
       CurrentValue["MouseOver"], 
       RGBColor[0.855, 0.396, 0.145], 
       RGBColor[0.02, 0.286, 0.651]]]], 
   Cell[
    StyleData["StringTypeLink", StyleDefinitions -> StyleData["Link"]], 
    FontColor -> Dynamic[
      If[
       CurrentValue["MouseOver"], 
       RGBColor[0.969, 0.467, 0.], 
       GrayLevel[0.467]]]], 
   Cell[
    StyleData["CharactersRefLink"], ShowSpecialCharacters -> False], 
   Cell["Annotation", "Section"], 
   Cell[
    StyleData["Excluded"], 
    CellBracketOptions -> {
     "Color" -> RGBColor[0.9, 0.4, 0.4], "Thickness" -> 2}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Excluded"}, 
      "Message" -> {"Message", "MSG", "Excluded"}, 
      "Output" -> {"Output", "Excluded"}, "Print" -> {"Print", "Excluded"}, 
      "PrintTemporary" -> {"PrintTemporary", "Excluded"}}, CellFrameMargins -> 
    4, CellFrameLabels -> {{None, 
       Cell[
        BoxData[
         TemplateBox[{
           StyleBox[
           "\"excluded\"", "ExcludedCellLabel", StripOnInput -> False], 
           "\"Excluded cells will not appear anywhere in the published \
resource except for the definition notebook\""}, "PrettyTooltipTemplate"]], 
        "ExcludedCellLabel"]}, {None, None}}, StyleMenuListing -> None, 
    Background -> RGBColor[1, 0.95, 0.95]], 
   Cell[
    StyleData["ExcludedCellLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontFamily -> "Source Sans Pro", FontSize -> 
    9, FontWeight -> Plain, FontSlant -> Italic, FontColor -> 
    RGBColor[0.9, 0.4, 0.4, 0.5], Background -> None], 
   Cell[
    StyleData["Comment", StyleDefinitions -> StyleData["Text"]], 
    CellFrame -> {{3, 0}, {0, 0}}, CellMargins -> {{66, 0}, {1, 0}}, 
    CellElementSpacings -> {"ClosedCellHeight" -> 0}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Comment"}, 
      "Message" -> {"Message", "MSG", "Comment"}, 
      "Output" -> {"Output", "Comment"}, "Print" -> {"Print", "Comment"}, 
      "PrintTemporary" -> {"PrintTemporary", "Comment"}}, CellFrameColor -> 
    RGBColor[0.88072, 0.61104, 0.14205], 
    CellFrameLabelMargins -> {{0, 10}, {0, 0}}, FontColor -> GrayLevel[0.25], 
    Background -> RGBColor[0.982, 0.942, 0.871]], 
   Cell[
    StyleData["AuthorComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "AuthorComment"}, 
      "Message" -> {"Message", "MSG", "AuthorComment"}, 
      "Output" -> {"Output", "AuthorComment"}, 
      "Print" -> {"Print", "AuthorComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "AuthorComment"}}, 
    CellFrameColor -> RGBColor[0.36842, 0.50678, 0.7098], Background -> 
    RGBColor[0.905, 0.926, 0.956]], 
   Cell[
    StyleData["ReviewerComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "ReviewerComment"}, 
      "Message" -> {"Message", "MSG", "ReviewerComment"}, 
      "Output" -> {"Output", "ReviewerComment"}, 
      "Print" -> {"Print", "ReviewerComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "ReviewerComment"}}, 
    CellFrameColor -> RGBColor[0.56018, 0.69157, 0.19488], Background -> 
    RGBColor[0.934, 0.954, 0.879]], 
   Cell[
    StyleData["CommentLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontSlant -> "Italic", FontColor -> 
    GrayLevel[0.5]], 
   Cell["Special Input", "Section"], 
   Cell[
    StyleData["FormObjectCell"], CellMargins -> {{66, 66}, {16, 5}}], 
   Cell[
    StyleData["LocalFileInput", StyleDefinitions -> StyleData["Input"]], 
    CellFrameLabels -> {{None, 
       Cell[
        BoxData[
         ButtonBox[
         "\"Choose\"", FrameMargins -> {{5, 5}, {0, 0}}, 
          BaseStyle -> {"Panel", FontSize -> 12}, Evaluator -> Automatic, 
          Method -> "Queued", ButtonFunction :> 
          With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
            Quiet[
             
             Block[{$ContextPath = RSNB`$cp$, 
               ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
               False, DefinitionNotebookClient`$ButtonCodeID = None}, 
              Internal`WithLocalSettings[
               DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                  ReleaseHold[
                   CurrentValue[
                   RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                  "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                Annotation[
                DefinitionNotebookClient`$ButtonCodeID = 1053094956087266899; 
                 DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                   ReleaseHold[DefinitionNotebookClient`$ButtonCode = HoldForm[
                    If[$VersionNumber >= 13., 
                    DefinitionNotebookClient`LocalFileInputDialog["Function", 
                    ParentCell[
                    EvaluationCell[]], "Type" -> "FileOpen"], 
                    MessageDialog[
                    "This feature requires Wolfram Language version 13 or \
later."]]]]], 
                 DefinitionNotebookClient`ButtonCodeID[1053094956087266899]], 
                DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
              Null]]], Appearance :> 
          FEPrivate`FrontEndResource[
           "FEExpressions", "GrayButtonNinePatchAppearance"]]]]}, {
      None, None}}], 
   Cell[
    StyleData["LocalDirectoryInput", StyleDefinitions -> StyleData["Input"]], 
    CellFrameLabels -> {{None, 
       Cell[
        BoxData[
         ButtonBox[
         "\"Choose\"", FrameMargins -> {{5, 5}, {0, 0}}, 
          BaseStyle -> {"Panel", FontSize -> 12}, Evaluator -> Automatic, 
          Method -> "Queued", ButtonFunction :> 
          With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
            Quiet[
             
             Block[{$ContextPath = RSNB`$cp$, 
               ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
               False, DefinitionNotebookClient`$ButtonCodeID = None}, 
              Internal`WithLocalSettings[
               DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                  ReleaseHold[
                   CurrentValue[
                   RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                  "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                Annotation[
                DefinitionNotebookClient`$ButtonCodeID = 4898876371082581810; 
                 DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                   ReleaseHold[DefinitionNotebookClient`$ButtonCode = HoldForm[
                    If[$VersionNumber >= 13., 
                    DefinitionNotebookClient`LocalFileInputDialog["Function", 
                    ParentCell[
                    EvaluationCell[]], "Type" -> "Directory"], 
                    MessageDialog[
                    "This feature requires Wolfram Language version 13 or \
later."]]]]], 
                 DefinitionNotebookClient`ButtonCodeID[4898876371082581810]], 
                DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
              Null]]], Appearance :> 
          FEPrivate`FrontEndResource[
           "FEExpressions", "GrayButtonNinePatchAppearance"]]]]}, {
      None, None}}], 
   Cell["Misc", "Section"], 
   Cell[
    StyleData["Item"], DefaultNewCellStyle -> "Item"], 
   Cell[
    StyleData["ButtonText"], FontFamily -> "Sans Serif", FontSize -> 11, 
    FontWeight -> Bold, FontColor -> RGBColor[0.459, 0.459, 0.459]], 
   Cell[
    StyleData["InlineFormula"], 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    LanguageCategory -> "Formula", AutoSpacing -> True, ScriptLevel -> 1, 
    SingleLetterItalics -> False, SpanMaxSize -> 1, StyleMenuListing -> None, 
    FontFamily -> "Source Sans Pro", FontSize -> 1. Inherited, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    FractionBoxOptions -> {BaseStyle -> {SpanMaxSize -> Automatic}}, 
    GridBoxOptions -> {
     GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}}], 
   Cell[
    StyleData["DockedCell"], CellFrameColor -> GrayLevel[0.75], Background -> 
    GrayLevel[0.9]]}, Visible -> False, FrontEndVersion -> 
  "13.3 for Microsoft Windows (64-bit) (May 18, 2023)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"583d6921-74bb-48d3-bf2e-bbae87db4341"
]


(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.3' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    121280,       2422]
NotebookOptionsPosition[    119299,       2387]
NotebookOutlinePosition[    120437,       2416]
CellTagsIndexPosition[    120394,       2413]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          1 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[1] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 1"|>}, <|"ComparisonMethod" -> "Item"|>, 
          "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            1 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[1] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 1"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              1 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[1] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 1"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {52.208496160991494`, 58.924316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> InterpretationBox[
       DynamicModuleBox[{
        QuestionFramework`Private`input$$ = Null, 
         QuestionFramework`Private`interpreter$$ = Identity, 
         QuestionFramework`Private`result$$ = "", 
         QuestionFramework`Private`buttonenabled$$ = True, 
         QuestionFramework`Private`submissionCount$$ = 0, 
         QuestionFramework`Private`submittedvalue$$ = "", 
         QuestionFramework`Private`questionnotebookflag$$ = False, 
         QuestionFramework`Private`qmflag$$ = False, 
         QuestionFramework`Private`fieldtype$$ = Expression}, 
        DynamicBox[
         ToBoxes[
          Framed[
           Grid[{{
              Style["What is the next step?", {FontSize -> 15}], 
              SpanFromLeft}, {
              InputField[
               Dynamic[QuestionFramework`Private`input$$], 
               QuestionFramework`Private`fieldtype$$, 
               Apply[Sequence, 
                
                Lookup[<|
                 "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                  "What is the next step?", "Range" -> {1, 900}|>, 
                 "FieldOptions", {}]], ImageSize -> 
               If[QuestionFramework`Private`qmflag$$, 
                 Scaled[0.5], Automatic]], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                1 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                 Except[1] -> <|
                  "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                   "The correct answer was 1"|>}, <|
                "ComparisonMethod" -> "Item"|>, "Validated" -> True], 
               QuestionFramework`Private`interpreter$$]}, {
              If[
               TrueQ[
                Function[{QuestionFramework`Private`af}, 
                 Or[QuestionFramework`Private`af === None, CurrentValue[
                    EvaluationNotebook[], {
                    TaggingRules, "FormNotebook", "SubmissionOptions", 
                    "GroupSubmissionFlag"}] === True]][
                 
                 AssessmentFunction[{
                  1 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                   Except[1] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 1"|>}, <|
                  "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
               
               Function[{
                QuestionFramework`Private`func, 
                 QuestionFramework`Private`buttonenabled}, 
                Button[
                 Framed[
                  Style[
                  "Submit", 12, FontColor -> White, FontWeight -> Plain], 
                  FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
                  ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
                  Background -> If[QuestionFramework`Private`buttonenabled, 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588], 
                    RGBColor[
                    0.7686274509803922, 0.9019607843137255, 
                    0.9725490196078431], 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588]]], QuestionFramework`Private`func, 
                 Evaluator -> Automatic, ImageSize -> {Automatic, 21}, 
                 Appearance -> None, BaselinePosition -> Baseline, Enabled -> 
                 Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
                 "Preemptive"], {HoldFirst}][
               QuestionFramework`Private`result$$ = 
                 QuestionFramework`Private`postProcessAssessment[
                   
                   AssessmentFunction[{
                    1 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                    Except[1] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 1"|>}, <|
                    "ComparisonMethod" -> "Item"|>, "Validated" -> True][
                    Interpreter[QuestionFramework`Private`interpreter$$][
                    QuestionFramework`Private`input$$], "SubmissionCount" -> 
                    QuestionFramework`Private`submissionCount$$], <|
                   "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                    "What is the next step?", "Range" -> {1, 900}|>]; 
                QuestionFramework`Private`submittedvalue$$ = 
                 QuestionFramework`Private`input$$; 
                QuestionFramework`Private`submissionCount$$ = 
                 QuestionFramework`Private`getSubmissionCount[
                  QuestionFramework`Private`result$$]; 
                QuestionFramework`Private`buttonenabled$$ = If[
                   QuestionFramework`Private`reachedMaxSubmissionsQ[
                   QuestionFramework`Private`result$$, 
                    QuestionFramework`Private`submissionCount$$], False, True,
                    True], QuestionFramework`Private`buttonenabled$$]], 
              If[
              Head[QuestionFramework`Private`result$$] === 
               AssessmentResultObject, 
               Row[{
                 If[Head[
                    QuestionFramework`Private`result$$["Explanation"]] === 
                  String, 
                  QuestionFramework`Private`result$$["Explanation"], ""]}, 
                Spacer[5]], ""]}}, 
            Sequence[
            Alignment -> Left, Spacings -> {1, 1}, 
             Dividers -> {False, {2 -> RGBColor[
                  Rational[229, 255], 
                  Rational[229, 255], 
                  Rational[229, 255]]}}]], ImageSize -> 
           Which[QuestionFramework`Private`questionnotebookflag$$, {
             Full, Automatic}, QuestionFramework`Private`qmflag$$, {
              Scaled[1.], Automatic}, True, Automatic], 
           Sequence[
           Background -> GrayLevel[1], FrameStyle -> 
            RGBColor[
             0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
            RoundingRadius -> 5, FrameMargins -> 10, 
            BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm], 
         TrackedSymbols :> {
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$}], 
        DynamicModuleValues :> {}], 
       QuestionObject[
        QuestionInterface[
        "ShortAnswer", <|
         "Prompt" -> "What is the next step?", "Range" -> {1, 900}|>], 
        AssessmentFunction[{
         1 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
          Except[1] -> <|
           "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
            "The correct answer was 1"|>}, <|"ComparisonMethod" -> "Item"|>, 
         "Validated" -> True]]], "Key" -> 
     Inherited}},ExpressionUUID->"ff1b06a0-8a70-46a4-852d-df5d90211d98"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          2 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[2] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 2"|>}, <|"ComparisonMethod" -> "Item"|>, 
          "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            2 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[2] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 2"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              2 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[2] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 2"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {52.208496160991494`, 58.924316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> InterpretationBox[
       DynamicModuleBox[{
        QuestionFramework`Private`input$$ = Null, 
         QuestionFramework`Private`interpreter$$ = Identity, 
         QuestionFramework`Private`result$$ = "", 
         QuestionFramework`Private`buttonenabled$$ = True, 
         QuestionFramework`Private`submissionCount$$ = 0, 
         QuestionFramework`Private`submittedvalue$$ = "", 
         QuestionFramework`Private`questionnotebookflag$$ = False, 
         QuestionFramework`Private`qmflag$$ = False, 
         QuestionFramework`Private`fieldtype$$ = Expression}, 
        DynamicBox[
         ToBoxes[
          Framed[
           Grid[{{
              Style["What is the next step?", {FontSize -> 15}], 
              SpanFromLeft}, {
              InputField[
               Dynamic[QuestionFramework`Private`input$$], 
               QuestionFramework`Private`fieldtype$$, 
               Apply[Sequence, 
                
                Lookup[<|
                 "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                  "What is the next step?", "Range" -> {1, 900}|>, 
                 "FieldOptions", {}]], ImageSize -> 
               If[QuestionFramework`Private`qmflag$$, 
                 Scaled[0.5], Automatic]], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                2 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                 Except[2] -> <|
                  "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                   "The correct answer was 2"|>}, <|
                "ComparisonMethod" -> "Item"|>, "Validated" -> True], 
               QuestionFramework`Private`interpreter$$]}, {
              If[
               TrueQ[
                Function[{QuestionFramework`Private`af}, 
                 Or[QuestionFramework`Private`af === None, CurrentValue[
                    EvaluationNotebook[], {
                    TaggingRules, "FormNotebook", "SubmissionOptions", 
                    "GroupSubmissionFlag"}] === True]][
                 
                 AssessmentFunction[{
                  2 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                   Except[2] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 2"|>}, <|
                  "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
               
               Function[{
                QuestionFramework`Private`func, 
                 QuestionFramework`Private`buttonenabled}, 
                Button[
                 Framed[
                  Style[
                  "Submit", 12, FontColor -> White, FontWeight -> Plain], 
                  FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
                  ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
                  Background -> If[QuestionFramework`Private`buttonenabled, 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588], 
                    RGBColor[
                    0.7686274509803922, 0.9019607843137255, 
                    0.9725490196078431], 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588]]], QuestionFramework`Private`func, 
                 Evaluator -> Automatic, ImageSize -> {Automatic, 21}, 
                 Appearance -> None, BaselinePosition -> Baseline, Enabled -> 
                 Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
                 "Preemptive"], {HoldFirst}][
               QuestionFramework`Private`result$$ = 
                 QuestionFramework`Private`postProcessAssessment[
                   
                   AssessmentFunction[{
                    2 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                    Except[2] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 2"|>}, <|
                    "ComparisonMethod" -> "Item"|>, "Validated" -> True][
                    Interpreter[QuestionFramework`Private`interpreter$$][
                    QuestionFramework`Private`input$$], "SubmissionCount" -> 
                    QuestionFramework`Private`submissionCount$$], <|
                   "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                    "What is the next step?", "Range" -> {1, 900}|>]; 
                QuestionFramework`Private`submittedvalue$$ = 
                 QuestionFramework`Private`input$$; 
                QuestionFramework`Private`submissionCount$$ = 
                 QuestionFramework`Private`getSubmissionCount[
                  QuestionFramework`Private`result$$]; 
                QuestionFramework`Private`buttonenabled$$ = If[
                   QuestionFramework`Private`reachedMaxSubmissionsQ[
                   QuestionFramework`Private`result$$, 
                    QuestionFramework`Private`submissionCount$$], False, True,
                    True], QuestionFramework`Private`buttonenabled$$]], 
              If[
              Head[QuestionFramework`Private`result$$] === 
               AssessmentResultObject, 
               Row[{
                 If[Head[
                    QuestionFramework`Private`result$$["Explanation"]] === 
                  String, 
                  QuestionFramework`Private`result$$["Explanation"], ""]}, 
                Spacer[5]], ""]}}, 
            Sequence[
            Alignment -> Left, Spacings -> {1, 1}, 
             Dividers -> {False, {2 -> RGBColor[
                  Rational[229, 255], 
                  Rational[229, 255], 
                  Rational[229, 255]]}}]], ImageSize -> 
           Which[QuestionFramework`Private`questionnotebookflag$$, {
             Full, Automatic}, QuestionFramework`Private`qmflag$$, {
              Scaled[1.], Automatic}, True, Automatic], 
           Sequence[
           Background -> GrayLevel[1], FrameStyle -> 
            RGBColor[
             0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
            RoundingRadius -> 5, FrameMargins -> 10, 
            BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm], 
         TrackedSymbols :> {
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$}], 
        DynamicModuleValues :> {}], 
       QuestionObject[
        QuestionInterface[
        "ShortAnswer", <|
         "Prompt" -> "What is the next step?", "Range" -> {1, 900}|>], 
        AssessmentFunction[{
         2 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
          Except[2] -> <|
           "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
            "The correct answer was 2"|>}, <|"ComparisonMethod" -> "Item"|>, 
         "Validated" -> True]]], "Key" -> 
     Inherited}},ExpressionUUID->"9c55f396-1e07-4c25-8c92-71e31703eb0c"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          3 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[3] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 3"|>}, <|"ComparisonMethod" -> "Item"|>, 
          "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            3 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[3] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 3"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              3 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[3] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 3"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {52.208496160991494`, 58.924316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> InterpretationBox[
       DynamicModuleBox[{
        QuestionFramework`Private`input$$ = Null, 
         QuestionFramework`Private`interpreter$$ = Identity, 
         QuestionFramework`Private`result$$ = "", 
         QuestionFramework`Private`buttonenabled$$ = True, 
         QuestionFramework`Private`submissionCount$$ = 0, 
         QuestionFramework`Private`submittedvalue$$ = "", 
         QuestionFramework`Private`questionnotebookflag$$ = False, 
         QuestionFramework`Private`qmflag$$ = False, 
         QuestionFramework`Private`fieldtype$$ = Expression}, 
        DynamicBox[
         ToBoxes[
          Framed[
           Grid[{{
              Style["What is the next step?", {FontSize -> 15}], 
              SpanFromLeft}, {
              InputField[
               Dynamic[QuestionFramework`Private`input$$], 
               QuestionFramework`Private`fieldtype$$, 
               Apply[Sequence, 
                
                Lookup[<|
                 "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                  "What is the next step?", "Range" -> {1, 900}|>, 
                 "FieldOptions", {}]], ImageSize -> 
               If[QuestionFramework`Private`qmflag$$, 
                 Scaled[0.5], Automatic]], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                3 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                 Except[3] -> <|
                  "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                   "The correct answer was 3"|>}, <|
                "ComparisonMethod" -> "Item"|>, "Validated" -> True], 
               QuestionFramework`Private`interpreter$$]}, {
              If[
               TrueQ[
                Function[{QuestionFramework`Private`af}, 
                 Or[QuestionFramework`Private`af === None, CurrentValue[
                    EvaluationNotebook[], {
                    TaggingRules, "FormNotebook", "SubmissionOptions", 
                    "GroupSubmissionFlag"}] === True]][
                 
                 AssessmentFunction[{
                  3 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                   Except[3] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 3"|>}, <|
                  "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
               
               Function[{
                QuestionFramework`Private`func, 
                 QuestionFramework`Private`buttonenabled}, 
                Button[
                 Framed[
                  Style[
                  "Submit", 12, FontColor -> White, FontWeight -> Plain], 
                  FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
                  ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
                  Background -> If[QuestionFramework`Private`buttonenabled, 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588], 
                    RGBColor[
                    0.7686274509803922, 0.9019607843137255, 
                    0.9725490196078431], 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588]]], QuestionFramework`Private`func, 
                 Evaluator -> Automatic, ImageSize -> {Automatic, 21}, 
                 Appearance -> None, BaselinePosition -> Baseline, Enabled -> 
                 Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
                 "Preemptive"], {HoldFirst}][
               QuestionFramework`Private`result$$ = 
                 QuestionFramework`Private`postProcessAssessment[
                   
                   AssessmentFunction[{
                    3 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                    Except[3] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 3"|>}, <|
                    "ComparisonMethod" -> "Item"|>, "Validated" -> True][
                    Interpreter[QuestionFramework`Private`interpreter$$][
                    QuestionFramework`Private`input$$], "SubmissionCount" -> 
                    QuestionFramework`Private`submissionCount$$], <|
                   "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                    "What is the next step?", "Range" -> {1, 900}|>]; 
                QuestionFramework`Private`submittedvalue$$ = 
                 QuestionFramework`Private`input$$; 
                QuestionFramework`Private`submissionCount$$ = 
                 QuestionFramework`Private`getSubmissionCount[
                  QuestionFramework`Private`result$$]; 
                QuestionFramework`Private`buttonenabled$$ = If[
                   QuestionFramework`Private`reachedMaxSubmissionsQ[
                   QuestionFramework`Private`result$$, 
                    QuestionFramework`Private`submissionCount$$], False, True,
                    True], QuestionFramework`Private`buttonenabled$$]], 
              If[
              Head[QuestionFramework`Private`result$$] === 
               AssessmentResultObject, 
               Row[{
                 If[Head[
                    QuestionFramework`Private`result$$["Explanation"]] === 
                  String, 
                  QuestionFramework`Private`result$$["Explanation"], ""]}, 
                Spacer[5]], ""]}}, 
            Sequence[
            Alignment -> Left, Spacings -> {1, 1}, 
             Dividers -> {False, {2 -> RGBColor[
                  Rational[229, 255], 
                  Rational[229, 255], 
                  Rational[229, 255]]}}]], ImageSize -> 
           Which[QuestionFramework`Private`questionnotebookflag$$, {
             Full, Automatic}, QuestionFramework`Private`qmflag$$, {
              Scaled[1.], Automatic}, True, Automatic], 
           Sequence[
           Background -> GrayLevel[1], FrameStyle -> 
            RGBColor[
             0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
            RoundingRadius -> 5, FrameMargins -> 10, 
            BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm], 
         TrackedSymbols :> {
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$}], 
        DynamicModuleValues :> {}], 
       QuestionObject[
        QuestionInterface[
        "ShortAnswer", <|
         "Prompt" -> "What is the next step?", "Range" -> {1, 900}|>], 
        AssessmentFunction[{
         3 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
          Except[3] -> <|
           "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
            "The correct answer was 3"|>}, <|"ComparisonMethod" -> "Item"|>, 
         "Validated" -> True]]], "Key" -> 
     Inherited}},ExpressionUUID->"0b4f3030-e584-4676-aa71-e14691616a3f"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          4 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[4] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 4"|>}, <|"ComparisonMethod" -> "Item"|>, 
          "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            4 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[4] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 4"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              4 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[4] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 4"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {52.208496160991494`, 58.924316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> InterpretationBox[
       DynamicModuleBox[{
        QuestionFramework`Private`input$$ = Null, 
         QuestionFramework`Private`interpreter$$ = Identity, 
         QuestionFramework`Private`result$$ = "", 
         QuestionFramework`Private`buttonenabled$$ = True, 
         QuestionFramework`Private`submissionCount$$ = 0, 
         QuestionFramework`Private`submittedvalue$$ = "", 
         QuestionFramework`Private`questionnotebookflag$$ = False, 
         QuestionFramework`Private`qmflag$$ = False, 
         QuestionFramework`Private`fieldtype$$ = Expression}, 
        DynamicBox[
         ToBoxes[
          Framed[
           Grid[{{
              Style["What is the next step?", {FontSize -> 15}], 
              SpanFromLeft}, {
              InputField[
               Dynamic[QuestionFramework`Private`input$$], 
               QuestionFramework`Private`fieldtype$$, 
               Apply[Sequence, 
                
                Lookup[<|
                 "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                  "What is the next step?", "Range" -> {1, 900}|>, 
                 "FieldOptions", {}]], ImageSize -> 
               If[QuestionFramework`Private`qmflag$$, 
                 Scaled[0.5], Automatic]], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                4 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                 Except[4] -> <|
                  "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                   "The correct answer was 4"|>}, <|
                "ComparisonMethod" -> "Item"|>, "Validated" -> True], 
               QuestionFramework`Private`interpreter$$]}, {
              If[
               TrueQ[
                Function[{QuestionFramework`Private`af}, 
                 Or[QuestionFramework`Private`af === None, CurrentValue[
                    EvaluationNotebook[], {
                    TaggingRules, "FormNotebook", "SubmissionOptions", 
                    "GroupSubmissionFlag"}] === True]][
                 
                 AssessmentFunction[{
                  4 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                   Except[4] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 4"|>}, <|
                  "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
               
               Function[{
                QuestionFramework`Private`func, 
                 QuestionFramework`Private`buttonenabled}, 
                Button[
                 Framed[
                  Style[
                  "Submit", 12, FontColor -> White, FontWeight -> Plain], 
                  FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
                  ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
                  Background -> If[QuestionFramework`Private`buttonenabled, 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588], 
                    RGBColor[
                    0.7686274509803922, 0.9019607843137255, 
                    0.9725490196078431], 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588]]], QuestionFramework`Private`func, 
                 Evaluator -> Automatic, ImageSize -> {Automatic, 21}, 
                 Appearance -> None, BaselinePosition -> Baseline, Enabled -> 
                 Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
                 "Preemptive"], {HoldFirst}][
               QuestionFramework`Private`result$$ = 
                 QuestionFramework`Private`postProcessAssessment[
                   
                   AssessmentFunction[{
                    4 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                    Except[4] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 4"|>}, <|
                    "ComparisonMethod" -> "Item"|>, "Validated" -> True][
                    Interpreter[QuestionFramework`Private`interpreter$$][
                    QuestionFramework`Private`input$$], "SubmissionCount" -> 
                    QuestionFramework`Private`submissionCount$$], <|
                   "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                    "What is the next step?", "Range" -> {1, 900}|>]; 
                QuestionFramework`Private`submittedvalue$$ = 
                 QuestionFramework`Private`input$$; 
                QuestionFramework`Private`submissionCount$$ = 
                 QuestionFramework`Private`getSubmissionCount[
                  QuestionFramework`Private`result$$]; 
                QuestionFramework`Private`buttonenabled$$ = If[
                   QuestionFramework`Private`reachedMaxSubmissionsQ[
                   QuestionFramework`Private`result$$, 
                    QuestionFramework`Private`submissionCount$$], False, True,
                    True], QuestionFramework`Private`buttonenabled$$]], 
              If[
              Head[QuestionFramework`Private`result$$] === 
               AssessmentResultObject, 
               Row[{
                 If[Head[
                    QuestionFramework`Private`result$$["Explanation"]] === 
                  String, 
                  QuestionFramework`Private`result$$["Explanation"], ""]}, 
                Spacer[5]], ""]}}, 
            Sequence[
            Alignment -> Left, Spacings -> {1, 1}, 
             Dividers -> {False, {2 -> RGBColor[
                  Rational[229, 255], 
                  Rational[229, 255], 
                  Rational[229, 255]]}}]], ImageSize -> 
           Which[QuestionFramework`Private`questionnotebookflag$$, {
             Full, Automatic}, QuestionFramework`Private`qmflag$$, {
              Scaled[1.], Automatic}, True, Automatic], 
           Sequence[
           Background -> GrayLevel[1], FrameStyle -> 
            RGBColor[
             0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
            RoundingRadius -> 5, FrameMargins -> 10, 
            BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm], 
         TrackedSymbols :> {
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$}], 
        DynamicModuleValues :> {}], 
       QuestionObject[
        QuestionInterface[
        "ShortAnswer", <|
         "Prompt" -> "What is the next step?", "Range" -> {1, 900}|>], 
        AssessmentFunction[{
         4 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
          Except[4] -> <|
           "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
            "The correct answer was 4"|>}, <|"ComparisonMethod" -> "Item"|>, 
         "Validated" -> True]]], "Key" -> 
     Inherited}},ExpressionUUID->"500a296c-8f1c-449b-924d-9c9e58b3b11d"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          5 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[5] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 5"|>}, <|"ComparisonMethod" -> "Item"|>, 
          "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            5 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[5] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 5"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              5 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[5] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 5"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {52.208496160991494`, 58.924316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> InterpretationBox[
       DynamicModuleBox[{
        QuestionFramework`Private`input$$ = Null, 
         QuestionFramework`Private`interpreter$$ = Identity, 
         QuestionFramework`Private`result$$ = "", 
         QuestionFramework`Private`buttonenabled$$ = True, 
         QuestionFramework`Private`submissionCount$$ = 0, 
         QuestionFramework`Private`submittedvalue$$ = "", 
         QuestionFramework`Private`questionnotebookflag$$ = False, 
         QuestionFramework`Private`qmflag$$ = False, 
         QuestionFramework`Private`fieldtype$$ = Expression}, 
        DynamicBox[
         ToBoxes[
          Framed[
           Grid[{{
              Style["What is the next step?", {FontSize -> 15}], 
              SpanFromLeft}, {
              InputField[
               Dynamic[QuestionFramework`Private`input$$], 
               QuestionFramework`Private`fieldtype$$, 
               Apply[Sequence, 
                
                Lookup[<|
                 "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                  "What is the next step?", "Range" -> {1, 900}|>, 
                 "FieldOptions", {}]], ImageSize -> 
               If[QuestionFramework`Private`qmflag$$, 
                 Scaled[0.5], Automatic]], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                5 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                 Except[5] -> <|
                  "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                   "The correct answer was 5"|>}, <|
                "ComparisonMethod" -> "Item"|>, "Validated" -> True], 
               QuestionFramework`Private`interpreter$$]}, {
              If[
               TrueQ[
                Function[{QuestionFramework`Private`af}, 
                 Or[QuestionFramework`Private`af === None, CurrentValue[
                    EvaluationNotebook[], {
                    TaggingRules, "FormNotebook", "SubmissionOptions", 
                    "GroupSubmissionFlag"}] === True]][
                 
                 AssessmentFunction[{
                  5 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                   Except[5] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 5"|>}, <|
                  "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
               
               Function[{
                QuestionFramework`Private`func, 
                 QuestionFramework`Private`buttonenabled}, 
                Button[
                 Framed[
                  Style[
                  "Submit", 12, FontColor -> White, FontWeight -> Plain], 
                  FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
                  ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
                  Background -> If[QuestionFramework`Private`buttonenabled, 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588], 
                    RGBColor[
                    0.7686274509803922, 0.9019607843137255, 
                    0.9725490196078431], 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588]]], QuestionFramework`Private`func, 
                 Evaluator -> Automatic, ImageSize -> {Automatic, 21}, 
                 Appearance -> None, BaselinePosition -> Baseline, Enabled -> 
                 Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
                 "Preemptive"], {HoldFirst}][
               QuestionFramework`Private`result$$ = 
                 QuestionFramework`Private`postProcessAssessment[
                   
                   AssessmentFunction[{
                    5 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                    Except[5] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 5"|>}, <|
                    "ComparisonMethod" -> "Item"|>, "Validated" -> True][
                    Interpreter[QuestionFramework`Private`interpreter$$][
                    QuestionFramework`Private`input$$], "SubmissionCount" -> 
                    QuestionFramework`Private`submissionCount$$], <|
                   "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                    "What is the next step?", "Range" -> {1, 900}|>]; 
                QuestionFramework`Private`submittedvalue$$ = 
                 QuestionFramework`Private`input$$; 
                QuestionFramework`Private`submissionCount$$ = 
                 QuestionFramework`Private`getSubmissionCount[
                  QuestionFramework`Private`result$$]; 
                QuestionFramework`Private`buttonenabled$$ = If[
                   QuestionFramework`Private`reachedMaxSubmissionsQ[
                   QuestionFramework`Private`result$$, 
                    QuestionFramework`Private`submissionCount$$], False, True,
                    True], QuestionFramework`Private`buttonenabled$$]], 
              If[
              Head[QuestionFramework`Private`result$$] === 
               AssessmentResultObject, 
               Row[{
                 If[Head[
                    QuestionFramework`Private`result$$["Explanation"]] === 
                  String, 
                  QuestionFramework`Private`result$$["Explanation"], ""]}, 
                Spacer[5]], ""]}}, 
            Sequence[
            Alignment -> Left, Spacings -> {1, 1}, 
             Dividers -> {False, {2 -> RGBColor[
                  Rational[229, 255], 
                  Rational[229, 255], 
                  Rational[229, 255]]}}]], ImageSize -> 
           Which[QuestionFramework`Private`questionnotebookflag$$, {
             Full, Automatic}, QuestionFramework`Private`qmflag$$, {
              Scaled[1.], Automatic}, True, Automatic], 
           Sequence[
           Background -> GrayLevel[1], FrameStyle -> 
            RGBColor[
             0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
            RoundingRadius -> 5, FrameMargins -> 10, 
            BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm], 
         TrackedSymbols :> {
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$}], 
        DynamicModuleValues :> {}], 
       QuestionObject[
        QuestionInterface[
        "ShortAnswer", <|
         "Prompt" -> "What is the next step?", "Range" -> {1, 900}|>], 
        AssessmentFunction[{
         5 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
          Except[5] -> <|
           "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
            "The correct answer was 5"|>}, <|"ComparisonMethod" -> "Item"|>, 
         "Validated" -> True]]], "Key" -> 
     Inherited}},ExpressionUUID->"73908727-6b28-4d11-8450-07fead719028"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          10 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[10] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 10"|>}, <|"ComparisonMethod" -> "Item"|>,
           "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            10 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[10] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 10"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              10 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[10] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 10"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {52.208496160991494`, 58.924316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> InterpretationBox[
       DynamicModuleBox[{
        QuestionFramework`Private`input$$ = Null, 
         QuestionFramework`Private`interpreter$$ = Identity, 
         QuestionFramework`Private`result$$ = "", 
         QuestionFramework`Private`buttonenabled$$ = True, 
         QuestionFramework`Private`submissionCount$$ = 0, 
         QuestionFramework`Private`submittedvalue$$ = "", 
         QuestionFramework`Private`questionnotebookflag$$ = False, 
         QuestionFramework`Private`qmflag$$ = False, 
         QuestionFramework`Private`fieldtype$$ = Expression}, 
        DynamicBox[
         ToBoxes[
          Framed[
           Grid[{{
              Style["What is the next step?", {FontSize -> 15}], 
              SpanFromLeft}, {
              InputField[
               Dynamic[QuestionFramework`Private`input$$], 
               QuestionFramework`Private`fieldtype$$, 
               Apply[Sequence, 
                
                Lookup[<|
                 "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                  "What is the next step?", "Range" -> {1, 900}|>, 
                 "FieldOptions", {}]], ImageSize -> 
               If[QuestionFramework`Private`qmflag$$, 
                 Scaled[0.5], Automatic]], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                10 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                 Except[10] -> <|
                  "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                   "The correct answer was 10"|>}, <|
                "ComparisonMethod" -> "Item"|>, "Validated" -> True], 
               QuestionFramework`Private`interpreter$$]}, {
              If[
               TrueQ[
                Function[{QuestionFramework`Private`af}, 
                 Or[QuestionFramework`Private`af === None, CurrentValue[
                    EvaluationNotebook[], {
                    TaggingRules, "FormNotebook", "SubmissionOptions", 
                    "GroupSubmissionFlag"}] === True]][
                 
                 AssessmentFunction[{
                  10 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                   Except[10] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 10"|>}, <|
                  "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
               
               Function[{
                QuestionFramework`Private`func, 
                 QuestionFramework`Private`buttonenabled}, 
                Button[
                 Framed[
                  Style[
                  "Submit", 12, FontColor -> White, FontWeight -> Plain], 
                  FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
                  ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
                  Background -> If[QuestionFramework`Private`buttonenabled, 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588], 
                    RGBColor[
                    0.7686274509803922, 0.9019607843137255, 
                    0.9725490196078431], 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588]]], QuestionFramework`Private`func, 
                 Evaluator -> Automatic, ImageSize -> {Automatic, 21}, 
                 Appearance -> None, BaselinePosition -> Baseline, Enabled -> 
                 Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
                 "Preemptive"], {HoldFirst}][
               QuestionFramework`Private`result$$ = 
                 QuestionFramework`Private`postProcessAssessment[
                   
                   AssessmentFunction[{
                    10 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                    Except[10] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 10"|>}, <|
                    "ComparisonMethod" -> "Item"|>, "Validated" -> True][
                    Interpreter[QuestionFramework`Private`interpreter$$][
                    QuestionFramework`Private`input$$], "SubmissionCount" -> 
                    QuestionFramework`Private`submissionCount$$], <|
                   "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                    "What is the next step?", "Range" -> {1, 900}|>]; 
                QuestionFramework`Private`submittedvalue$$ = 
                 QuestionFramework`Private`input$$; 
                QuestionFramework`Private`submissionCount$$ = 
                 QuestionFramework`Private`getSubmissionCount[
                  QuestionFramework`Private`result$$]; 
                QuestionFramework`Private`buttonenabled$$ = If[
                   QuestionFramework`Private`reachedMaxSubmissionsQ[
                   QuestionFramework`Private`result$$, 
                    QuestionFramework`Private`submissionCount$$], False, True,
                    True], QuestionFramework`Private`buttonenabled$$]], 
              If[
              Head[QuestionFramework`Private`result$$] === 
               AssessmentResultObject, 
               Row[{
                 If[Head[
                    QuestionFramework`Private`result$$["Explanation"]] === 
                  String, 
                  QuestionFramework`Private`result$$["Explanation"], ""]}, 
                Spacer[5]], ""]}}, 
            Sequence[
            Alignment -> Left, Spacings -> {1, 1}, 
             Dividers -> {False, {2 -> RGBColor[
                  Rational[229, 255], 
                  Rational[229, 255], 
                  Rational[229, 255]]}}]], ImageSize -> 
           Which[QuestionFramework`Private`questionnotebookflag$$, {
             Full, Automatic}, QuestionFramework`Private`qmflag$$, {
              Scaled[1.], Automatic}, True, Automatic], 
           Sequence[
           Background -> GrayLevel[1], FrameStyle -> 
            RGBColor[
             0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
            RoundingRadius -> 5, FrameMargins -> 10, 
            BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm], 
         TrackedSymbols :> {
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$}], 
        DynamicModuleValues :> {}], 
       QuestionObject[
        QuestionInterface[
        "ShortAnswer", <|
         "Prompt" -> "What is the next step?", "Range" -> {1, 900}|>], 
        AssessmentFunction[{
         10 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
          Except[10] -> <|
           "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
            "The correct answer was 10"|>}, <|"ComparisonMethod" -> "Item"|>, 
         "Validated" -> True]]], "Key" -> 
     Inherited}},ExpressionUUID->"a7da84be-2d8a-41b7-b74c-efc28b9521ab"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          15 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[15] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 15"|>}, <|"ComparisonMethod" -> "Item"|>,
           "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            15 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[15] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 15"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              15 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[15] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 15"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {52.208496160991494`, 58.924316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> InterpretationBox[
       DynamicModuleBox[{
        QuestionFramework`Private`input$$ = Null, 
         QuestionFramework`Private`interpreter$$ = Identity, 
         QuestionFramework`Private`result$$ = "", 
         QuestionFramework`Private`buttonenabled$$ = True, 
         QuestionFramework`Private`submissionCount$$ = 0, 
         QuestionFramework`Private`submittedvalue$$ = "", 
         QuestionFramework`Private`questionnotebookflag$$ = False, 
         QuestionFramework`Private`qmflag$$ = False, 
         QuestionFramework`Private`fieldtype$$ = Expression}, 
        DynamicBox[
         ToBoxes[
          Framed[
           Grid[{{
              Style["What is the next step?", {FontSize -> 15}], 
              SpanFromLeft}, {
              InputField[
               Dynamic[QuestionFramework`Private`input$$], 
               QuestionFramework`Private`fieldtype$$, 
               Apply[Sequence, 
                
                Lookup[<|
                 "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                  "What is the next step?", "Range" -> {1, 900}|>, 
                 "FieldOptions", {}]], ImageSize -> 
               If[QuestionFramework`Private`qmflag$$, 
                 Scaled[0.5], Automatic]], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                15 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                 Except[15] -> <|
                  "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                   "The correct answer was 15"|>}, <|
                "ComparisonMethod" -> "Item"|>, "Validated" -> True], 
               QuestionFramework`Private`interpreter$$]}, {
              If[
               TrueQ[
                Function[{QuestionFramework`Private`af}, 
                 Or[QuestionFramework`Private`af === None, CurrentValue[
                    EvaluationNotebook[], {
                    TaggingRules, "FormNotebook", "SubmissionOptions", 
                    "GroupSubmissionFlag"}] === True]][
                 
                 AssessmentFunction[{
                  15 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                   Except[15] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 15"|>}, <|
                  "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
               
               Function[{
                QuestionFramework`Private`func, 
                 QuestionFramework`Private`buttonenabled}, 
                Button[
                 Framed[
                  Style[
                  "Submit", 12, FontColor -> White, FontWeight -> Plain], 
                  FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
                  ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
                  Background -> If[QuestionFramework`Private`buttonenabled, 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588], 
                    RGBColor[
                    0.7686274509803922, 0.9019607843137255, 
                    0.9725490196078431], 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588]]], QuestionFramework`Private`func, 
                 Evaluator -> Automatic, ImageSize -> {Automatic, 21}, 
                 Appearance -> None, BaselinePosition -> Baseline, Enabled -> 
                 Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
                 "Preemptive"], {HoldFirst}][
               QuestionFramework`Private`result$$ = 
                 QuestionFramework`Private`postProcessAssessment[
                   
                   AssessmentFunction[{
                    15 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                    Except[15] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 15"|>}, <|
                    "ComparisonMethod" -> "Item"|>, "Validated" -> True][
                    Interpreter[QuestionFramework`Private`interpreter$$][
                    QuestionFramework`Private`input$$], "SubmissionCount" -> 
                    QuestionFramework`Private`submissionCount$$], <|
                   "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                    "What is the next step?", "Range" -> {1, 900}|>]; 
                QuestionFramework`Private`submittedvalue$$ = 
                 QuestionFramework`Private`input$$; 
                QuestionFramework`Private`submissionCount$$ = 
                 QuestionFramework`Private`getSubmissionCount[
                  QuestionFramework`Private`result$$]; 
                QuestionFramework`Private`buttonenabled$$ = If[
                   QuestionFramework`Private`reachedMaxSubmissionsQ[
                   QuestionFramework`Private`result$$, 
                    QuestionFramework`Private`submissionCount$$], False, True,
                    True], QuestionFramework`Private`buttonenabled$$]], 
              If[
              Head[QuestionFramework`Private`result$$] === 
               AssessmentResultObject, 
               Row[{
                 If[Head[
                    QuestionFramework`Private`result$$["Explanation"]] === 
                  String, 
                  QuestionFramework`Private`result$$["Explanation"], ""]}, 
                Spacer[5]], ""]}}, 
            Sequence[
            Alignment -> Left, Spacings -> {1, 1}, 
             Dividers -> {False, {2 -> RGBColor[
                  Rational[229, 255], 
                  Rational[229, 255], 
                  Rational[229, 255]]}}]], ImageSize -> 
           Which[QuestionFramework`Private`questionnotebookflag$$, {
             Full, Automatic}, QuestionFramework`Private`qmflag$$, {
              Scaled[1.], Automatic}, True, Automatic], 
           Sequence[
           Background -> GrayLevel[1], FrameStyle -> 
            RGBColor[
             0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
            RoundingRadius -> 5, FrameMargins -> 10, 
            BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm], 
         TrackedSymbols :> {
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$}], 
        DynamicModuleValues :> {}], 
       QuestionObject[
        QuestionInterface[
        "ShortAnswer", <|
         "Prompt" -> "What is the next step?", "Range" -> {1, 900}|>], 
        AssessmentFunction[{
         15 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
          Except[15] -> <|
           "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
            "The correct answer was 15"|>}, <|"ComparisonMethod" -> "Item"|>, 
         "Validated" -> True]]], "Key" -> 
     Inherited}},ExpressionUUID->"fd83deb7-f987-4157-9751-ebb2fc0dc9dd"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          20 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[20] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 20"|>}, <|"ComparisonMethod" -> "Item"|>,
           "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            20 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[20] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 20"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              20 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[20] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 20"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {52.208496160991494`, 58.924316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> InterpretationBox[
       DynamicModuleBox[{
        QuestionFramework`Private`input$$ = Null, 
         QuestionFramework`Private`interpreter$$ = Identity, 
         QuestionFramework`Private`result$$ = "", 
         QuestionFramework`Private`buttonenabled$$ = True, 
         QuestionFramework`Private`submissionCount$$ = 0, 
         QuestionFramework`Private`submittedvalue$$ = "", 
         QuestionFramework`Private`questionnotebookflag$$ = False, 
         QuestionFramework`Private`qmflag$$ = False, 
         QuestionFramework`Private`fieldtype$$ = Expression}, 
        DynamicBox[
         ToBoxes[
          Framed[
           Grid[{{
              Style["What is the next step?", {FontSize -> 15}], 
              SpanFromLeft}, {
              InputField[
               Dynamic[QuestionFramework`Private`input$$], 
               QuestionFramework`Private`fieldtype$$, 
               Apply[Sequence, 
                
                Lookup[<|
                 "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                  "What is the next step?", "Range" -> {1, 900}|>, 
                 "FieldOptions", {}]], ImageSize -> 
               If[QuestionFramework`Private`qmflag$$, 
                 Scaled[0.5], Automatic]], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                20 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                 Except[20] -> <|
                  "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                   "The correct answer was 20"|>}, <|
                "ComparisonMethod" -> "Item"|>, "Validated" -> True], 
               QuestionFramework`Private`interpreter$$]}, {
              If[
               TrueQ[
                Function[{QuestionFramework`Private`af}, 
                 Or[QuestionFramework`Private`af === None, CurrentValue[
                    EvaluationNotebook[], {
                    TaggingRules, "FormNotebook", "SubmissionOptions", 
                    "GroupSubmissionFlag"}] === True]][
                 
                 AssessmentFunction[{
                  20 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                   Except[20] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 20"|>}, <|
                  "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
               
               Function[{
                QuestionFramework`Private`func, 
                 QuestionFramework`Private`buttonenabled}, 
                Button[
                 Framed[
                  Style[
                  "Submit", 12, FontColor -> White, FontWeight -> Plain], 
                  FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
                  ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
                  Background -> If[QuestionFramework`Private`buttonenabled, 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588], 
                    RGBColor[
                    0.7686274509803922, 0.9019607843137255, 
                    0.9725490196078431], 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588]]], QuestionFramework`Private`func, 
                 Evaluator -> Automatic, ImageSize -> {Automatic, 21}, 
                 Appearance -> None, BaselinePosition -> Baseline, Enabled -> 
                 Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
                 "Preemptive"], {HoldFirst}][
               QuestionFramework`Private`result$$ = 
                 QuestionFramework`Private`postProcessAssessment[
                   
                   AssessmentFunction[{
                    20 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                    Except[20] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 20"|>}, <|
                    "ComparisonMethod" -> "Item"|>, "Validated" -> True][
                    Interpreter[QuestionFramework`Private`interpreter$$][
                    QuestionFramework`Private`input$$], "SubmissionCount" -> 
                    QuestionFramework`Private`submissionCount$$], <|
                   "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                    "What is the next step?", "Range" -> {1, 900}|>]; 
                QuestionFramework`Private`submittedvalue$$ = 
                 QuestionFramework`Private`input$$; 
                QuestionFramework`Private`submissionCount$$ = 
                 QuestionFramework`Private`getSubmissionCount[
                  QuestionFramework`Private`result$$]; 
                QuestionFramework`Private`buttonenabled$$ = If[
                   QuestionFramework`Private`reachedMaxSubmissionsQ[
                   QuestionFramework`Private`result$$, 
                    QuestionFramework`Private`submissionCount$$], False, True,
                    True], QuestionFramework`Private`buttonenabled$$]], 
              If[
              Head[QuestionFramework`Private`result$$] === 
               AssessmentResultObject, 
               Row[{
                 If[Head[
                    QuestionFramework`Private`result$$["Explanation"]] === 
                  String, 
                  QuestionFramework`Private`result$$["Explanation"], ""]}, 
                Spacer[5]], ""]}}, 
            Sequence[
            Alignment -> Left, Spacings -> {1, 1}, 
             Dividers -> {False, {2 -> RGBColor[
                  Rational[229, 255], 
                  Rational[229, 255], 
                  Rational[229, 255]]}}]], ImageSize -> 
           Which[QuestionFramework`Private`questionnotebookflag$$, {
             Full, Automatic}, QuestionFramework`Private`qmflag$$, {
              Scaled[1.], Automatic}, True, Automatic], 
           Sequence[
           Background -> GrayLevel[1], FrameStyle -> 
            RGBColor[
             0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
            RoundingRadius -> 5, FrameMargins -> 10, 
            BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm], 
         TrackedSymbols :> {
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$}], 
        DynamicModuleValues :> {}], 
       QuestionObject[
        QuestionInterface[
        "ShortAnswer", <|
         "Prompt" -> "What is the next step?", "Range" -> {1, 900}|>], 
        AssessmentFunction[{
         20 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
          Except[20] -> <|
           "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
            "The correct answer was 20"|>}, <|"ComparisonMethod" -> "Item"|>, 
         "Validated" -> True]]], "Key" -> 
     Inherited}},ExpressionUUID->"eb143059-ae18-4124-9d9e-1075b7152f80"],

Cell[BoxData[
 DynamicModuleBox[{QuestionFramework`Private`input$$ = Null, 
  QuestionFramework`Private`interpreter$$ = Identity, 
  QuestionFramework`Private`result$$ = "", 
  QuestionFramework`Private`buttonenabled$$ = True, 
  QuestionFramework`Private`submissionCount$$ = 0, 
  QuestionFramework`Private`submittedvalue$$ = "", 
  QuestionFramework`Private`questionnotebookflag$$ = False, 
  QuestionFramework`Private`qmflag$$ = False, 
  QuestionFramework`Private`fieldtype$$ = Expression}, 
  DynamicBox[ToBoxes[
    Framed[
     Grid[{{
        Style["What is the next step?", {FontSize -> 15}], SpanFromLeft}, {
        InputField[
         Dynamic[QuestionFramework`Private`input$$], 
         QuestionFramework`Private`fieldtype$$, 
         Apply[Sequence, 
          
          Lookup[<|"FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
            "What is the next step?", "Range" -> {1, 900}|>, 
           "FieldOptions", {}]], ImageSize -> 
         If[QuestionFramework`Private`qmflag$$, 
           Scaled[0.5], Automatic]], 
        QuestionFramework`Private`generalquestionTest[
        QuestionFramework`Private`result$$, QuestionFramework`Private`input$$,
          QuestionFramework`Private`submittedvalue$$, 
         AssessmentFunction[{
          25 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
           Except[25] -> <|
            "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
             "The correct answer was 25"|>}, <|"ComparisonMethod" -> "Item"|>,
           "Validated" -> True], QuestionFramework`Private`interpreter$$]}, {
        If[
         TrueQ[
          Function[{QuestionFramework`Private`af}, 
           Or[QuestionFramework`Private`af === None, CurrentValue[
              EvaluationNotebook[], {
              TaggingRules, "FormNotebook", "SubmissionOptions", 
               "GroupSubmissionFlag"}] === True]][
           
           AssessmentFunction[{
            25 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
             Except[25] -> <|
              "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
               "The correct answer was 25"|>}, <|
            "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
         Function[{
          QuestionFramework`Private`func, 
           QuestionFramework`Private`buttonenabled}, 
          Button[
           Framed[
            Style["Submit", 12, FontColor -> White, FontWeight -> Plain], 
            FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
            ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
            Background -> If[QuestionFramework`Private`buttonenabled, 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 0.6352941176470588], 
              RGBColor[
              0.7686274509803922, 0.9019607843137255, 0.9725490196078431], 
              RGBColor[
              0.043137254901960784`, 0.3803921568627451, 
               0.6352941176470588]]], QuestionFramework`Private`func, 
           Evaluator -> Automatic, ImageSize -> {Automatic, 21}, Appearance -> 
           None, BaselinePosition -> Baseline, Enabled -> 
           Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
           "Preemptive"], {HoldFirst}][
         QuestionFramework`Private`result$$ = 
           QuestionFramework`Private`postProcessAssessment[
             
             AssessmentFunction[{
              25 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
               Except[25] -> <|
                "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                 "The correct answer was 25"|>}, <|
              "ComparisonMethod" -> "Item"|>, "Validated" -> True][
              Interpreter[QuestionFramework`Private`interpreter$$][
              QuestionFramework`Private`input$$], "SubmissionCount" -> 
              QuestionFramework`Private`submissionCount$$], <|
             "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
              "What is the next step?", "Range" -> {1, 900}|>]; 
          QuestionFramework`Private`submittedvalue$$ = 
           QuestionFramework`Private`input$$; 
          QuestionFramework`Private`submissionCount$$ = 
           QuestionFramework`Private`getSubmissionCount[
            QuestionFramework`Private`result$$]; 
          QuestionFramework`Private`buttonenabled$$ = If[
             QuestionFramework`Private`reachedMaxSubmissionsQ[
             QuestionFramework`Private`result$$, 
              QuestionFramework`Private`submissionCount$$], False, True, 
             True], QuestionFramework`Private`buttonenabled$$]], 
        If[
        Head[QuestionFramework`Private`result$$] === AssessmentResultObject, 
         Row[{
           If[Head[
              QuestionFramework`Private`result$$["Explanation"]] === String, 
            QuestionFramework`Private`result$$["Explanation"], ""]}, 
          Spacer[5]], ""]}}, 
      Sequence[
      Alignment -> Left, Spacings -> {1, 1}, 
       Dividers -> {False, {2 -> RGBColor[
            Rational[229, 255], 
            Rational[229, 255], 
            Rational[229, 255]]}}]], ImageSize -> 
     Which[QuestionFramework`Private`questionnotebookflag$$, {
       Full, Automatic}, QuestionFramework`Private`qmflag$$, {
        Scaled[1.], Automatic}, True, Automatic], 
     Sequence[
     Background -> GrayLevel[1], FrameStyle -> 
      RGBColor[0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
      RoundingRadius -> 5, FrameMargins -> 10, 
      BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm],
   ImageSizeCache->{
    293.13281243741517`, {52.208496160991494`, 58.924316276423625`}},
   TrackedSymbols:>{
    QuestionFramework`Private`result$$, QuestionFramework`Private`input$$, 
     QuestionFramework`Private`submittedvalue$$}],
  DynamicModuleValues:>{}]], "FormElementCode",
 TaggingRules->{
  "FormNotebook" -> {
    "Type" -> "Default", "Mode" -> "CODE", "FormExpr" -> InterpretationBox[
       DynamicModuleBox[{
        QuestionFramework`Private`input$$ = Null, 
         QuestionFramework`Private`interpreter$$ = Identity, 
         QuestionFramework`Private`result$$ = "", 
         QuestionFramework`Private`buttonenabled$$ = True, 
         QuestionFramework`Private`submissionCount$$ = 0, 
         QuestionFramework`Private`submittedvalue$$ = "", 
         QuestionFramework`Private`questionnotebookflag$$ = False, 
         QuestionFramework`Private`qmflag$$ = False, 
         QuestionFramework`Private`fieldtype$$ = Expression}, 
        DynamicBox[
         ToBoxes[
          Framed[
           Grid[{{
              Style["What is the next step?", {FontSize -> 15}], 
              SpanFromLeft}, {
              InputField[
               Dynamic[QuestionFramework`Private`input$$], 
               QuestionFramework`Private`fieldtype$$, 
               Apply[Sequence, 
                
                Lookup[<|
                 "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                  "What is the next step?", "Range" -> {1, 900}|>, 
                 "FieldOptions", {}]], ImageSize -> 
               If[QuestionFramework`Private`qmflag$$, 
                 Scaled[0.5], Automatic]], 
              QuestionFramework`Private`generalquestionTest[
              QuestionFramework`Private`result$$, 
               QuestionFramework`Private`input$$, 
               QuestionFramework`Private`submittedvalue$$, 
               
               AssessmentFunction[{
                25 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                 Except[25] -> <|
                  "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                   "The correct answer was 25"|>}, <|
                "ComparisonMethod" -> "Item"|>, "Validated" -> True], 
               QuestionFramework`Private`interpreter$$]}, {
              If[
               TrueQ[
                Function[{QuestionFramework`Private`af}, 
                 Or[QuestionFramework`Private`af === None, CurrentValue[
                    EvaluationNotebook[], {
                    TaggingRules, "FormNotebook", "SubmissionOptions", 
                    "GroupSubmissionFlag"}] === True]][
                 
                 AssessmentFunction[{
                  25 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                   Except[25] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 25"|>}, <|
                  "ComparisonMethod" -> "Item"|>, "Validated" -> True]]], "", 
               
               Function[{
                QuestionFramework`Private`func, 
                 QuestionFramework`Private`buttonenabled}, 
                Button[
                 Framed[
                  Style[
                  "Submit", 12, FontColor -> White, FontWeight -> Plain], 
                  FrameStyle -> None, ImageMargins -> 0, RoundingRadius -> 2, 
                  ImageSize -> {Automatic, 21}, BaselinePosition -> Baseline, 
                  Background -> If[QuestionFramework`Private`buttonenabled, 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588], 
                    RGBColor[
                    0.7686274509803922, 0.9019607843137255, 
                    0.9725490196078431], 
                    RGBColor[
                    0.043137254901960784`, 0.3803921568627451, 
                    0.6352941176470588]]], QuestionFramework`Private`func, 
                 Evaluator -> Automatic, ImageSize -> {Automatic, 21}, 
                 Appearance -> None, BaselinePosition -> Baseline, Enabled -> 
                 Dynamic[QuestionFramework`Private`buttonenabled], Method -> 
                 "Preemptive"], {HoldFirst}][
               QuestionFramework`Private`result$$ = 
                 QuestionFramework`Private`postProcessAssessment[
                   
                   AssessmentFunction[{
                    25 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
                    Except[25] -> <|
                    "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
                    "The correct answer was 25"|>}, <|
                    "ComparisonMethod" -> "Item"|>, "Validated" -> True][
                    Interpreter[QuestionFramework`Private`interpreter$$][
                    QuestionFramework`Private`input$$], "SubmissionCount" -> 
                    QuestionFramework`Private`submissionCount$$], <|
                   "FieldType" -> Expression, "MinAnswers" -> 1, "Prompt" -> 
                    "What is the next step?", "Range" -> {1, 900}|>]; 
                QuestionFramework`Private`submittedvalue$$ = 
                 QuestionFramework`Private`input$$; 
                QuestionFramework`Private`submissionCount$$ = 
                 QuestionFramework`Private`getSubmissionCount[
                  QuestionFramework`Private`result$$]; 
                QuestionFramework`Private`buttonenabled$$ = If[
                   QuestionFramework`Private`reachedMaxSubmissionsQ[
                   QuestionFramework`Private`result$$, 
                    QuestionFramework`Private`submissionCount$$], False, True,
                    True], QuestionFramework`Private`buttonenabled$$]], 
              If[
              Head[QuestionFramework`Private`result$$] === 
               AssessmentResultObject, 
               Row[{
                 If[Head[
                    QuestionFramework`Private`result$$["Explanation"]] === 
                  String, 
                  QuestionFramework`Private`result$$["Explanation"], ""]}, 
                Spacer[5]], ""]}}, 
            Sequence[
            Alignment -> Left, Spacings -> {1, 1}, 
             Dividers -> {False, {2 -> RGBColor[
                  Rational[229, 255], 
                  Rational[229, 255], 
                  Rational[229, 255]]}}]], ImageSize -> 
           Which[QuestionFramework`Private`questionnotebookflag$$, {
             Full, Automatic}, QuestionFramework`Private`qmflag$$, {
              Scaled[1.], Automatic}, True, Automatic], 
           Sequence[
           Background -> GrayLevel[1], FrameStyle -> 
            RGBColor[
             0.7490196078431373, 0.7490196078431373, 0.7490196078431373], 
            RoundingRadius -> 5, FrameMargins -> 10, 
            BaseStyle -> {"Panel", FontSize -> 14}]], StandardForm], 
         TrackedSymbols :> {
          QuestionFramework`Private`result$$, 
           QuestionFramework`Private`input$$, 
           QuestionFramework`Private`submittedvalue$$}], 
        DynamicModuleValues :> {}], 
       QuestionObject[
        QuestionInterface[
        "ShortAnswer", <|
         "Prompt" -> "What is the next step?", "Range" -> {1, 900}|>], 
        AssessmentFunction[{
         25 -> <|"Score" -> 1, "AnswerCorrect" -> True|>, 
          Except[25] -> <|
           "Score" -> 0, "AnswerCorrect" -> False, "Explanation" -> 
            "The correct answer was 25"|>}, <|"ComparisonMethod" -> "Item"|>, 
         "Validated" -> True]]], "Key" -> 
     Inherited}},ExpressionUUID->"1221c6f3-a4ec-4a3e-a0ae-2c6eec4b2f03"]
},
WindowSize->{574.8, 579.6},
WindowMargins->{{0, Automatic}, {Automatic, 0}},
TaggingRules->{
 "FormNotebook" -> {
   "SubmissionOptions" -> {
     "ButtonText" -> "Submit", "ButtonTextColor" -> GrayLevel[1], 
      "ButtonTextBackground" -> 
      RGBColor[0.30980392156862746`, 0.6352941176470588, 0.796078431372549], 
      "DockedCellColor" -> GrayLevel[0.96], "DockedCellText" -> 
      "Generated Form", "DockedCellTextColor" -> GrayLevel[0.2], 
      "WholeNotebookSubmission" -> False, "ResourceCellObject" -> None, 
      "GroupSubmissionFlag" -> False, "AssessmentMethod" -> "Local", 
      "DeployLocation" -> "MyQuiz", "QuizLocation" -> "MyQuiz"}, "InsertBar" -> 
    "Closed", "ToolsBar" -> "Closed", "InsertHistory" -> <||>, 
    "PreventSettingsDialog" -> False, "InputAssoc" -> <||>}},
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (May 18, 2023)",
StyleDefinitions->"Wolfram/QAFormNotebook.nb",
ExpressionUUID->"7ccb80ec-91a6-4375-9ad0-4605a56c2c30"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 13181, 261, 126, "FormElementCode",ExpressionUUID->"ff1b06a0-8a70-46a4-852d-df5d90211d98"],
Cell[13742, 283, 13181, 261, 126, "FormElementCode",ExpressionUUID->"9c55f396-1e07-4c25-8c92-71e31703eb0c"],
Cell[26926, 546, 13181, 261, 126, "FormElementCode",ExpressionUUID->"0b4f3030-e584-4676-aa71-e14691616a3f"],
Cell[40110, 809, 13181, 261, 126, "FormElementCode",ExpressionUUID->"500a296c-8f1c-449b-924d-9c9e58b3b11d"],
Cell[53294, 1072, 13181, 261, 126, "FormElementCode",ExpressionUUID->"73908727-6b28-4d11-8450-07fead719028"],
Cell[66478, 1335, 13202, 261, 126, "FormElementCode",ExpressionUUID->"a7da84be-2d8a-41b7-b74c-efc28b9521ab"],
Cell[79683, 1598, 13202, 261, 126, "FormElementCode",ExpressionUUID->"fd83deb7-f987-4157-9751-ebb2fc0dc9dd"],
Cell[92888, 1861, 13202, 261, 126, "FormElementCode",ExpressionUUID->"eb143059-ae18-4124-9d9e-1075b7152f80"],
Cell[106093, 2124, 13202, 261, 126, "FormElementCode",ExpressionUUID->"1221c6f3-a4ec-4a3e-a0ae-2c6eec4b2f03"]
}
]
*)

(* End of internal cache information *)


Notebook[{

Cell[CellGroupData[{
Cell["RhumbLineDistanceList", "Title",
 Deletable->False,
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.896722140783618*^9, 3.896722144773687*^9}},
 CellTags->{"Name", "TemplateCell", "Title", "TabNext"},
 CellID->863144461,ExpressionUUID->"3c2847bc-b929-4786-b3e5-b7713cc6cbe4"],

Cell["\<\
Successive pairwise rhumbline distances between a list of geodetic positions\
\>", "Text",
 Deletable->False,
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.896722153533333*^9, 3.896722191475475*^9}},
 CellTags->{"DefaultContent", "Description", "TabNext", "TemplateCell"},
 CellID->660820806,ExpressionUUID->"c9850eef-c58a-4383-a298-cdf61e92c524"],

Cell[CellGroupData[{

Cell[TextData[{
 "Definition",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Function", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Define your function using the name you gave in the Title line \
above. You can add input cells and extra code to define additional input \
cases or prerequisites. All definitions, including dependencies, will be \
included in the generated resource function.\n\nThis section should be \
evaluated before creating the Examples section below.", "MoreInfoText"], 
        Background -> GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> 
        GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoFunction"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "90aea203-bb08-4107-ac56-ce920314c679"]
}], "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Function"},
 DefaultNewCellStyle->"Input",
 CellTags->{"Definition", "Function", "TemplateCellGroup"},
 CellID->292731158,ExpressionUUID->"8250cfdf-f407-4ec5-8046-9c5c4269f517"],

Cell[BoxData[
 RowBox[{"ClearAll", "[", 
  RowBox[{"RhumbLineDistanceList", ",", "RhumbLineDistance"}], "]"}]], "Input",
 TaggingRules->{},
 InitializationCell->True,
 CellChangeTimes->{{3.8967271623246584`*^9, 3.8967271758134985`*^9}},
 CellLabel->"In[411]:=",
 CellID->4644295,ExpressionUUID->"6e6be287-9cf6-41a3-a7ad-16ec9665bc7e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"Options", "[", "RhumbLineDistanceList", "]"}], "=", 
   RowBox[{"{", 
    RowBox[{"UnitSystem", "->", "\"\<Metric\>\""}], "}"}]}], ";"}]], "Input",
 TaggingRules->{},
 InitializationCell->True,
 CellChangeTimes->{{3.8967277215609007`*^9, 3.8967277384730444`*^9}},
 CellLabel->"In[412]:=",
 CellID->5390632,ExpressionUUID->"c532958e-2939-4293-b63c-62013a567048"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{"RhumbLineDistanceList", "[", 
     RowBox[{
      RowBox[{"{", "loc_", "}"}], "/;", 
      RowBox[{"!", 
       RowBox[{"MatchQ", "[", 
        RowBox[{
         RowBox[{"Head", "[", "loc", "]"}], ",", 
         RowBox[{
         "GeoPosition", "|", "GeoPositionENU", "|", "GeoPositionENU", "|", 
          "GeoGridPosition"}]}], "]"}]}]}], "]"}], ":=", 
    RowBox[{"EchoEvaluation", "[", 
     RowBox[{
      RowBox[{"{", "}"}], ",", "loc"}], "]"}]}], ";"}], "*)"}]], "Input",
 TaggingRules->{},
 InitializationCell->True,
 CellChangeTimes->{{3.896727226400053*^9, 3.896727238695056*^9}, 
   3.896727906958556*^9, {3.8967284477467594`*^9, 3.896728469698439*^9}, {
   3.8967286094894247`*^9, 3.896728648887765*^9}},
 CellLabel->"In[413]:=",
 CellID->185820558,ExpressionUUID->"1b457db7-7daf-46f7-ae49-ba3373419658"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"RhumbLineDistance", "[", "pointA_", "]"}], ":=", 
   RowBox[{"GeoLength", "[", 
    RowBox[{"GeoPath", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"Here", ",", "pointA"}], "}"}], ",", "\"\<RhumbLine\>\""}], 
     "]"}], "]"}]}], "*)"}]], "Input",
 TaggingRules->{},
 InitializationCell->True,
 CellChangeTimes->{
  3.8967222304867*^9, {3.896727169809283*^9, 3.896727171985854*^9}, 
   3.896727297772407*^9, {3.89672849081038*^9, 3.896728492727214*^9}, {
   3.896728523599597*^9, 3.896728524274577*^9}, {3.896728578981371*^9, 
   3.8967285842252693`*^9}},
 CellTags->"DefaultContent",
 CellLabel->"In[414]:=",
 CellID->876320555,ExpressionUUID->"f08cbeb5-2ee8-4434-a812-b86394fb2669"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RhumbLineDistance", "[", 
   RowBox[{"pointA_", ",", "pointB_"}], "]"}], ":=", 
  RowBox[{"GeoLength", "[", 
   RowBox[{"GeoPath", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{"GeoPosition", "[", "pointA", "]"}], ",", 
       RowBox[{"GeoPosition", "[", "pointB", "]"}]}], "}"}], ",", 
     "\"\<RhumbLine\>\""}], "]"}], "]"}]}]], "Input",
 TaggingRules->{},
 InitializationCell->True,
 CellChangeTimes->{
  3.8967222304867*^9, {3.896727169809283*^9, 3.896727171985854*^9}, 
   3.896727297772407*^9, {3.896729523053629*^9, 3.896729528417391*^9}},
 CellTags->"DefaultContent",
 CellLabel->"In[458]:=",
 CellID->407063717,ExpressionUUID->"41daa320-3caa-4c08-86ab-3ed70d3ea57b"],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"RhumbLineDistanceList", "[", 
    RowBox[{"locs_", ",", 
     RowBox[{"opts", ":", 
      RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
   RowBox[{"UnitConvert", "[", 
    RowBox[{
     RowBox[{"QuantityArray", "[", 
      RowBox[{"RhumbLineDistance", "@@@", 
       RowBox[{"Map", "[", 
        RowBox[{"GeoPosition", ",", 
         RowBox[{"Subsequences", "[", 
          RowBox[{
           RowBox[{"Thread", "[", "locs", "]"}], ",", 
           RowBox[{"{", "2", "}"}]}], "]"}], ",", 
         RowBox[{"{", "2", "}"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"OptionValue", "[", "UnitSystem", "]"}]}], "]"}]}], 
  "*)"}]], "Input",
 TaggingRules->{},
 InitializationCell->True,
 CellChangeTimes->{{3.8967272726523914`*^9, 3.8967272864823103`*^9}, {
   3.8967275168639183`*^9, 3.8967275200100813`*^9}, {3.896727750658557*^9, 
   3.896727776107416*^9}, {3.8967278312480183`*^9, 3.8967278328960514`*^9}, 
   3.8967278805885077`*^9, {3.8967279672389507`*^9, 3.8967279841841393`*^9}, {
   3.8967280519615536`*^9, 3.8967280562306156`*^9}, {3.8967287216659036`*^9, 
   3.8967287265454416`*^9}, {3.8967288623124313`*^9, 3.896728874044463*^9}, 
   3.8967294022944884`*^9},
 CellLabel->"In[438]:=",
 CellID->62397093,ExpressionUUID->"f4e7491e-ac1e-4fb9-979b-ef498e051a23"],

Cell[BoxData[
 RowBox[{
  RowBox[{"RhumbLineDistanceList", "[", 
   RowBox[{"locs_", ",", 
    RowBox[{"opts", ":", 
     RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
  RowBox[{"QuantityArray", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"RhumbLineDistance", "@@@", 
      RowBox[{"Subsequences", "[", 
       RowBox[{"#", ",", 
        RowBox[{"{", "2", "}"}]}], "]"}]}], "&"}], "@@", 
    RowBox[{"GeoPosition", "[", 
     RowBox[{"MapAt", "[", 
      RowBox[{
       RowBox[{"GeoPosition", "@*", "LatitudeLongitude"}], ",", "locs", ",", 
       RowBox[{"Most", "/@", 
        RowBox[{"Position", "[", 
         RowBox[{"locs", ",", 
          RowBox[{
          "GeoPositionXYZ", "|", "GeoGridPosition", "|", "GeoPositionENU"}]}],
          "]"}]}]}], "]"}], "]"}]}], "]"}]}]], "Input",
 TaggingRules->{},
 InitializationCell->True,
 CellChangeTimes->{{3.896729406639246*^9, 3.896729432534608*^9}, {
  3.896729534362076*^9, 3.8967295464678383`*^9}, {3.8967296244224243`*^9, 
  3.89672963725745*^9}, {3.896730273934602*^9, 3.8967302872401667`*^9}},
 CellLabel->"In[509]:=",
 CellID->645252690,ExpressionUUID->"cdfaed7b-3cc6-467a-9349-d590bf54b5cb"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"RhumbLineDistanceList", "::", "usage"}], "=", 
   "\"\<RhumbLineDistanceList[{\!\(\*SubscriptBox[StyleBox[\"loc\", \"TI\"], \
StyleBox[\"1\", \"TR\"]]\),\!\(\*SubscriptBox[StyleBox[\"loc\", \"TI\"], \
StyleBox[\"2\", \"TR\"]]\),\!\(\*StyleBox[\"\[Ellipsis]\", \
\"TR\"]\),\!\(\*SubscriptBox[StyleBox[\"loc\", \"TI\"], StyleBox[\"n\", \
\"TI\"]]\)}] returns the list of loxodromic distances between consecutive \
pairs of locations.\>\""}], ";"}]], "Input",
 InitializationCell->True,
 CellChangeTimes->{{3.896732788595636*^9, 3.8967328027951107`*^9}},
 CellLabel->"In[549]:=",
 CellID->688151410,ExpressionUUID->"7d133a5d-6554-46eb-9bc3-409f0e41b452"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Documentation", "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Documentation"},
 CellTags->{"Documentation", "TemplateSection"},
 CellID->337507785,ExpressionUUID->"e740f5cf-7ae3-4b3d-babe-e6fe1739205d"],

Cell[CellGroupData[{

Cell[TextData[{
 "Usage",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Usage", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Document input usage cases by first typing an input structure, \
then pressing ", 
           Cell[
            BoxData[
             StyleBox[
              DynamicBox[
               ToBoxes[
                
                If[$OperatingSystem === "MacOSX", "\[ReturnKey]", 
                 "\[EnterKey]"], StandardForm], SingleEvaluation -> True, 
               Evaluator -> "System"], ShowStringCharacters -> False]]], 
           " to add a brief explanation of the function\[CloseCurlyQuote]s \
behavior for that structure. Pressing ", 
           Cell[
            BoxData[
             StyleBox[
              DynamicBox[
               ToBoxes[
                
                If[$OperatingSystem === "MacOSX", "\[ReturnKey]", 
                 "\[EnterKey]"], StandardForm], SingleEvaluation -> True, 
               Evaluator -> "System"], ShowStringCharacters -> False]]], 
           " repeatedly will create new cases as needed. Every input usage \
case defined above should be demonstrated explicitly here.\n\nSee existing \
documentation pages for examples."}], "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoUsage"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "9fc74223-a503-4717-9ebd-d46846c7c5c7"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Usage"},
 DefaultNewCellStyle->{"UsageInputs", FontFamily -> "Source Sans Pro"},
 CellTags->{"TemplateCellGroup", "Usage"},
 CellID->38054786,ExpressionUUID->"3092f0a0-5ef0-49c1-a6a3-4f37fb26951b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RhumbLineDistanceList", "[", 
  RowBox[{"{", 
   RowBox[{
    SubscriptBox[
     StyleBox["loc", "TI"], 
     StyleBox["1", "TR"]], ",", 
    SubscriptBox[
     StyleBox["loc", "TI"], 
     StyleBox["2", "TR"]], ",", 
    StyleBox["\[Ellipsis]", "TR"], ",", 
    SubscriptBox[
     StyleBox["loc", "TI"], 
     StyleBox["n", "TI"]]}], "}"}], "]"}]], "UsageInputs",
 TaggingRules->{},
 CellChangeTimes->{{3.896732705552828*^9, 3.8967327249587765`*^9}},
 FontFamily->"Source Sans Pro",
 CellTags->{"DefaultContent", "TabNext"},
 CellID->67839508,ExpressionUUID->"27e3ca96-f003-4c0b-b059-0925dab985b2"],

Cell["\<\
returns the list of loxodromic distances between consecutive pairs of \
locations.\
\>", "UsageDescription",
 TaggingRules->{},
 CellChangeTimes->{{3.896732721369131*^9, 3.8967327293399706`*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->746063541,ExpressionUUID->"f495c8d9-6b2d-4f3e-8618-d673722b4a21"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Details & Options",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Notes", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Give a detailed explanation of how the function is used and \
configured (e.g. acceptable input types, result formats, options \
specifications, background information). This section may include multiple \
cells, bullet lists, tables, hyperlinks and additional styles/structures as \
needed.\n\nAdd any other information that may be relevant, such as when the \
function was first discovered or how and why it is used within a given field. \
Include all relevant background or contextual information related to the \
function, its development, and its usage.", "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoNotes"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "56d27bfc-112a-41d0-8c59-75e04a420449"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Notes"},
 DefaultNewCellStyle->"Notes",
 CellTags->{"Details & Options", "Notes", "TemplateCellGroup"},
 CellID->447261062,ExpressionUUID->"74e5be09-7a21-42aa-9048-70e4277eedce"],

Cell[TextData[{
 "The locations ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["loc", "TI"], 
   StyleBox["i", "TI"]]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "d01f14eb-f283-4e95-b123-9377eaf301ab"],
 " in ",
 Cell[BoxData[
  RowBox[{"RhumbLineDistanceList", "[", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox[
      StyleBox["loc", "TI"], 
      StyleBox["1", "TR"]], ",", 
     StyleBox["\[Ellipsis]", "TR"], ",", 
     SubscriptBox[
      StyleBox["loc", "TI"], 
      StyleBox["n", "TI"]]}], "}"}], "]"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "2f1ce500-7a7c-4afe-8719-95d49024f573"],
 " can be given as pairs ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["lat", "TI"], ",", 
    StyleBox["lon", "TI"]}], "}"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "1e11745b-eb3d-4c8d-944d-e1d44454caa0"],
 " in degrees, ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["GeoPosition"]], "paclet:ref/GeoPosition"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "fb1947d7-c3ec-4bfa-8508-5b45ed6aa3f7"],
 " objects, geographic ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["Entity"]], "paclet:ref/Entity"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "ab099a1e-b9d0-4660-b169-3d79ef872289"],
 " objects, or any other specification of a location."
}], "Notes",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.896732747903514*^9, 3.8967327621054544`*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->422531486,ExpressionUUID->"324ca11f-3cc9-4f16-ba2c-00200af8ee72"],

Cell[TextData[{
 "The result is returned as a ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["QuantityArray"]], "paclet:ref/QuantityArray"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "fca677fb-724f-48d6-9fe9-ffe725a2e380"],
 " object with dimensions of length. The unit used can be chosen with the \
option ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["UnitSystem"]], "paclet:ref/UnitSystem"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "fb70f1df-4884-4840-b694-c5a6712336df"],
 ", which has \"Metric\" as its default value."
}], "Notes",
 CellChangeTimes->{{3.89673277180888*^9, 3.8967327744009423`*^9}},
 CellID->207986252,ExpressionUUID->"3f7676e0-4958-4aa7-bff0-823d08dbd458"],

Cell[TextData[{
 "If the input list of locations has length ",
 Cell[BoxData[
  StyleBox["n", "TI"]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "b5bfe1d3-eaa8-48de-8ebe-0d24e6d2c067"],
 ", the resulting list of distances has length ",
 Cell[BoxData[
  RowBox[{
   StyleBox["n", "TI"], "-", "1"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "86b5616b-badf-43e2-b22a-025accdaaf59"],
 "."
}], "Notes",
 CellID->794040797,ExpressionUUID->"6f577380-1724-4a92-8b5c-c9063b659826"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Examples",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Examples", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Demonstrate the function\[CloseCurlyQuote]s usage, starting with \
the most basic use case and describing each example in a preceding text cell.\
\n\nWithin a group, individual examples can be delimited by inserting page \
breaks between them (either using ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"[Right-click]\"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontColor -> GrayLevel[0.28627], 
                 FontSize -> 14, StripOnInput -> False], 
                StyleBox[
                "\" \[FilledRightTriangle] \"", FontFamily -> 
                 "Source Sans Pro", FontSize -> 13.86, FontColor -> 
                 GrayLevel[0.5], StripOnInput -> False], 
                StyleBox[
                "\"Insert Page Break\"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontColor -> GrayLevel[0.28627], 
                 FontSize -> 14, StripOnInput -> False]}, "RowDefault"], 
              ShowStringCharacters -> False]]], 
           " between cells or through the menu using ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"Insert\"", FontFamily -> "Source Sans Pro", FontWeight -> 
                 "SemiBold", FontColor -> GrayLevel[0.28627], FontSize -> 14, 
                 StripOnInput -> False], 
                StyleBox[
                "\" \[FilledRightTriangle] \"", FontFamily -> 
                 "Source Sans Pro", FontSize -> 13.86, FontColor -> 
                 GrayLevel[0.5], StripOnInput -> False], 
                StyleBox[
                "\"Page Break\"", FontFamily -> "Source Sans Pro", FontWeight -> 
                 "SemiBold", FontColor -> GrayLevel[0.28627], FontSize -> 14, 
                 StripOnInput -> False]}, "RowDefault"], ShowStringCharacters -> 
              False]]], 
           ").\n\nExamples should be grouped into Subsection and \
Subsubsection cells similarly to existing documentation pages. Here are some \
typical Subsection names and the types of examples they normally contain:\n  \
", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Basic Examples: \"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontSize -> 14, StripOnInput -> 
                 False]}, "RowDefault"], ShowStringCharacters -> False]]], 
           "most basic function usage\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Scope: \"", FontFamily -> "Source Sans Pro", FontWeight -> 
                 "SemiBold", FontSize -> 14, StripOnInput -> False]}, 
               "RowDefault"], ShowStringCharacters -> False]]], 
           "input and display conventions, standard computational attributes \
(e.g. threading over lists)\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Options: \"", FontFamily -> "Source Sans Pro", FontWeight -> 
                 "SemiBold", FontSize -> 14, StripOnInput -> False]}, 
               "RowDefault"], ShowStringCharacters -> False]]], 
           "available options and parameters for the function\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Applications: \"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontSize -> 14, StripOnInput -> 
                 False]}, "RowDefault"], ShowStringCharacters -> False]]], 
           "standard industry or academic applications\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Properties and Relations: \"", FontFamily -> 
                 "Source Sans Pro", FontWeight -> "SemiBold", FontSize -> 14, 
                 StripOnInput -> False]}, "RowDefault"], ShowStringCharacters -> 
              False]]], "how the function relates to other functions\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Possible Issues: \"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontSize -> 14, StripOnInput -> 
                 False]}, "RowDefault"], ShowStringCharacters -> False]]], 
           "limitations or unexpected behavior a user might experience\n  ", 
           Cell[
            BoxData[
             StyleBox[
              TemplateBox[{
                StyleBox[
                "\"\[FilledSmallSquare] \"", FontColor -> 
                 RGBColor[0.8, 0.043, 0.008], StripOnInput -> False], 
                StyleBox[
                "\"Neat Examples: \"", FontFamily -> "Source Sans Pro", 
                 FontWeight -> "SemiBold", FontSize -> 14, StripOnInput -> 
                 False]}, "RowDefault"], ShowStringCharacters -> False]]], 
           "particularly interesting, unconventional, or otherwise unique \
usage"}], "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoExamples"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "fdf641a1-a25f-4f16-9483-204eb3bc6561"]
}], "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Examples"},
 CellTags->{"Examples", "TemplateCellGroup"},
 CellID->671320372,ExpressionUUID->"dda23d39-1e1e-4070-9aa2-6a2fc43cc4e2"],

Cell[CellGroupData[{

Cell["Basic Examples", "Subsection",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->619504543,ExpressionUUID->"edeb5a09-ed45-47f7-a2c2-86039e76402c"],

Cell["List of consecutive loxodromic distances between cities:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.89672966632046*^9, 3.8967296694926105`*^9}},
 CellID->883933416,ExpressionUUID->"d502cd96-7e17-4185-93f3-0d23fe172e27"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RhumbLineDistanceList", "[", 
  RowBox[{"{", 
   RowBox[{
    TemplateBox[{"\"Buenos Aires\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"City\"", ",", 
          RowBox[{"{", 
            
            RowBox[{"\"BuenosAires\"", ",", "\"BuenosAires\"", ",", 
              "\"Argentina\""}], "}"}]}], "]"}], 
      "\"Entity[\\\"City\\\", {\\\"BuenosAires\\\", \\\"BuenosAires\\\", \
\\\"Argentina\\\"}]\"", "\"city\""},
     "Entity"], ",", 
    TemplateBox[{"\"Rio de Janeiro\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"City\"", ",", 
          RowBox[{"{", 
            
            RowBox[{"\"RioDeJaneiro\"", ",", "\"RioDeJaneiro\"", ",", 
              "\"Brazil\""}], "}"}]}], "]"}], 
      "\"Entity[\\\"City\\\", {\\\"RioDeJaneiro\\\", \\\"RioDeJaneiro\\\", \\\
\"Brazil\\\"}]\"", "\"city\""},
     "Entity"], ",", 
    TemplateBox[{"\"Mexico City\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"City\"", ",", 
          RowBox[{"{", 
            
            RowBox[{"\"MexicoCity\"", ",", "\"DistritoFederal\"", ",", 
              "\"Mexico\""}], "}"}]}], "]"}], 
      "\"Entity[\\\"City\\\", {\\\"MexicoCity\\\", \\\"DistritoFederal\\\", \
\\\"Mexico\\\"}]\"", "\"city\""},
     "Entity"], ",", 
    TemplateBox[{"\"New York City\"", 
      RowBox[{"Entity", "[", 
        RowBox[{"\"City\"", ",", 
          RowBox[{"{", 
            
            RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", 
              "\"UnitedStates\""}], "}"}]}], "]"}], 
      "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
     "Entity"]}], "}"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{3.896729738149621*^9},
 CellLabel->"In[472]:=",
 CellID->103701699,ExpressionUUID->"5fb3be65-e514-48e1-ae16-c303501b0a38"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantityArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              
              RasterBox[{{{0.66, 0.66, 0.66}, {0.49, 0.49, 0.49}, {0.74, 0.74,
                0.74}}, {{0.4, 0.4, 0.4}, {0.8, 0.8, 0.8}, {0.52, 0.52, 
               0.52}}, {{0.72, 0.72, 0.72}, {0.59, 0.59, 0.59}, {0.79, 0.79, 
               0.79}}, {{0.58, 0.58, 0.58}, {0.66, 0.66, 0.66}, {0.32, 0.32, 
               0.32}}}, {{-0.25, -0.33}, {1.25, 2.33}}, {0, 1}], {{
               Antialiasing -> False, 
                GrayLevel[0.3], 
                
                LineBox[{{{-0.25, 2.33}, {1.25, 2.33}}, {{-0.25, 1.67}, {1.25,
                  1.67}}, {{-0.25, 1.}, {1.25, 1.}}, {{-0.25, 0.33}, {1.25, 
                 0.33}}, {{-0.25, -0.33}, {1.25, -0.33}}}]}, {
               Antialiasing -> False, 
                GrayLevel[0.3], 
                
                LineBox[{{{-0.25, -0.33}, {-0.25, 2.33}}, {{0.25, -0.33}, {
                 0.25, 2.33}}, {{0.75, -0.33}, {0.75, 2.33}}, {{
                 1.25, -0.33}, {1.25, 2.33}}}]}}}, PlotRangeClipping -> True, 
             Background -> GrayLevel[0.93], 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {None, None}, FrameStyle -> {{
                Directive[
                 GrayLevel[0.2], 
                 AbsoluteThickness[1]], 
                Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]]}, {
                Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], 
                Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]]}}, FrameTicks -> {{{{-0.25, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {0.583, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {1.417, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {2.25, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {0.028, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {0.306, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {0.861, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.139, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.694, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.972, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}}, None}, {
               None, None}}, GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImagePadding -> 2, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
               Automatic}, PlotRangePadding -> {{1, 0}, {0, 0}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "3", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Unit: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"Kilometers\"", Short[#, 2]& ], "SummaryItem"]}]}},
              GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              
              RasterBox[{{{0.66, 0.66, 0.66}, {0.49, 0.49, 0.49}, {0.74, 0.74,
                0.74}}, {{0.4, 0.4, 0.4}, {0.8, 0.8, 0.8}, {0.52, 0.52, 
               0.52}}, {{0.72, 0.72, 0.72}, {0.59, 0.59, 0.59}, {0.79, 0.79, 
               0.79}}, {{0.58, 0.58, 0.58}, {0.66, 0.66, 0.66}, {0.32, 0.32, 
               0.32}}}, {{-0.25, -0.33}, {1.25, 2.33}}, {0, 1}], {{
               Antialiasing -> False, 
                GrayLevel[0.3], 
                
                LineBox[{{{-0.25, 2.33}, {1.25, 2.33}}, {{-0.25, 1.67}, {1.25,
                  1.67}}, {{-0.25, 1.}, {1.25, 1.}}, {{-0.25, 0.33}, {1.25, 
                 0.33}}, {{-0.25, -0.33}, {1.25, -0.33}}}]}, {
               Antialiasing -> False, 
                GrayLevel[0.3], 
                
                LineBox[{{{-0.25, -0.33}, {-0.25, 2.33}}, {{0.25, -0.33}, {
                 0.25, 2.33}}, {{0.75, -0.33}, {0.75, 2.33}}, {{
                 1.25, -0.33}, {1.25, 2.33}}}]}}}, PlotRangeClipping -> True, 
             Background -> GrayLevel[0.93], 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {None, None}, FrameStyle -> {{
                Directive[
                 GrayLevel[0.2], 
                 AbsoluteThickness[1]], 
                Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]]}, {
                Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], 
                Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]]}}, FrameTicks -> {{{{-0.25, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {0.583, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {1.417, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {2.25, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {0.028, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {0.306, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {0.861, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.139, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.694, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.972, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}}, None}, {
               None, None}}, GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImagePadding -> 2, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
               Automatic}, PlotRangePadding -> {{1, 0}, {0, 0}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "3", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Unit: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"Kilometers\"", Short[#, 2]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"MinMax: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{
                    
                    TemplateBox[{
                    "1965.785987081344`", "\"km\"", "kilometers", 
                    "\"Kilometers\""}, "Quantity", SyntaxForm -> Mod], ",", 
                    
                    TemplateBox[{
                    "7676.261336059058`", "\"km\"", "kilometers", 
                    "\"Kilometers\""}, "Quantity", SyntaxForm -> Mod]}], 
                    "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuantityArray[
   StructuredArray`StructuredData[{
    3}, {{1965.785987081344, 7676.261336059058, 3366.7576462714133`}, 
     "Kilometers", {{1}}}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967296712376103`*^9, 3.8967297393231287`*^9},
 CellLabel->"Out[472]=",
 CellID->667354178,ExpressionUUID->"cf212b13-3c13-4e1f-9da6-869e06f3e4c4"]
}, Open  ]],

Cell[TextData[{
 "Convert the ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["QuantityArray"]], "paclet:ref/QuantityArray"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "1202d8c0-551d-40aa-ae22-0f5d9c50f128"],
 " object to its normal form:"
}], "ExampleText",
 TaggingRules->{},
 CellID->189738904,ExpressionUUID->"a4b1d1bf-6e11-4b2d-aaba-0fdae03fb995"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "[", "%", "]"}]], "Input",
 TaggingRules->{},
 CellLabel->"In[473]:=",
 CellID->1150126525,ExpressionUUID->"ba92c66b-ba1f-47ed-9077-ede2877a9dd0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "1965.785987081344`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "7676.261336059058`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "3366.7576462714133`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967296814324455`*^9, 3.8967297412686625`*^9},
 CellLabel->"Out[473]=",
 CellID->682032651,ExpressionUUID->"669284d5-e628-4c8d-83ca-213de4313504"]
}, Open  ]],

Cell["Draw the three rhumbline segments on a map:", "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.8967297030724497`*^9, 3.8967297068944807`*^9}},
 CellID->268985217,ExpressionUUID->"d84b345b-2b7b-4673-a881-6c3637ef6efd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GeoGraphics", "[", 
  RowBox[{"{", 
   RowBox[{"Red", ",", "Thick", ",", 
    RowBox[{"GeoPath", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        TemplateBox[{"\"Buenos Aires\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"City\"", ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"BuenosAires\"", ",", "\"BuenosAires\"", ",", 
                  "\"Argentina\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"City\\\", {\\\"BuenosAires\\\", \\\"BuenosAires\\\", \
\\\"Argentina\\\"}]\"", "\"city\""},
         "Entity"], ",", 
        TemplateBox[{"\"Rio de Janeiro\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"City\"", ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"RioDeJaneiro\"", ",", "\"RioDeJaneiro\"", ",", 
                  "\"Brazil\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"City\\\", {\\\"RioDeJaneiro\\\", \
\\\"RioDeJaneiro\\\", \\\"Brazil\\\"}]\"", "\"city\""},
         "Entity"], ",", 
        TemplateBox[{"\"Mexico City\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"City\"", ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"MexicoCity\"", ",", "\"DistritoFederal\"", ",", 
                  "\"Mexico\""}], "}"}]}], "]"}], 
          "\"Entity[\\\"City\\\", {\\\"MexicoCity\\\", \
\\\"DistritoFederal\\\", \\\"Mexico\\\"}]\"", "\"city\""},
         "Entity"], ",", 
        TemplateBox[{"\"New York City\"", 
          RowBox[{"Entity", "[", 
            RowBox[{"\"City\"", ",", 
              RowBox[{"{", 
                
                RowBox[{
                 "\"NewYork\"", ",", "\"NewYork\"", ",", "\"UnitedStates\""}],
                 "}"}]}], "]"}], 
          "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
         "Entity"]}], "}"}], ",", "\"\<RhumbLine\>\""}], "]"}]}], "}"}], 
  "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8967296916993113`*^9, 3.896729694344648*^9}},
 CellLabel->"In[471]:=",
 CellID->900125551,ExpressionUUID->"dafad4c2-209f-4ad6-a0d7-6728f07628b5"],

Cell[BoxData[
 GraphicsBox[{{
    TagBox[{
      {Texture[
        GraphicsBox[
         TagBox[
          RasterBox[CompressedData["
1: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
           "], {{0, 472.}, {351., 0}}, {0, 255}, ColorFunction -> RGBColor], 
          BoxForm`ImageTag[
          "Byte", ColorSpace -> "RGB", Interleaving -> False, 
           MetaInformation -> <|
            "Exif" -> <|
              "Software" -> 
               "Created with the Wolfram Language: www.wolfram.com"|>, 
             "GeoMetaInformation" -> <|
              "GeoModel" -> "ITRF00", 
               "LonLatBox" -> {{-101.937, -40.40299999999999}, \
{-38.37371369000001, 44.42798749000001}}, 
               "PlotRange" -> {{-101.953125, -40.25390625}, {-38.49609375, 
                44.47265625}}, "Projection" -> "Equirectangular", "Software" -> 
               "Created with the Wolfram Language: www.wolfram.com", 
               "TileSources" -> {"Wolfram", "OSM"}|>|>], Selectable -> False],
          DefaultBaseStyle -> "ImageGraphics", ImageSizeRaw -> {351., 472.}, 
         PlotRange -> {{0, 351.}, {0, 472.}}]], 
       PolygonBox[{{-101.937, -38.37371369000001}, {-101.937, 
        44.42798749000001}, {-40.40299999999999, 
        44.42798749000001}, {-40.40299999999999, -38.37371369000001}, \
{-101.937, -38.37371369000001}},
        VertexTextureCoordinates->{{0.00026134852801540376`, 
         0.0014750139058379297`}, {0.00026134852801540376`, 
         0.9994616194651601}, {0.9975835390946505, 0.9994616194651601}, {
         0.9975835390946505, 0.0014750139058379297`}, {
         0.00026134852801540376`, 0.0014750139058379297`}}]}, {
       TagBox[
        {RGBColor[0.2196078431372549, 0.3058823529411765, 0.4235294117647059],
          Opacity[1], 
         StyleBox[{
           InsetBox["\<\"South Pacific\\nOcean\"\>", {-130.001220703125, -45.00365115687186},
             Center], 
           InsetBox["\<\"South Atlantic\\nOcean\"\>", {-14.996337890625, -45.00365115687186},
             Center], 
           InsetBox["\<\"North Atlantic\\nOcean\"\>", {-40.001220703125, 40.002371935876475},
             Center], 
           InsetBox["\<\"Sargasso Sea\"\>", {-59.99633789062501, 30.002516938570686},
             Center], 
           InsetBox["\<\"Baffin Bay\"\>", {-66.99462890625, 73.0001215118412},
             Center], 
           InsetBox["\<\"Beaufort Sea\"\>", {-135., 70.00180966478055}, 
            Center], 
           InsetBox["\<\"Gulf of Alaska\"\>", {-144.99755859375, 59.0009698708429},
             Center]},
          StripOnInput->False,
          LineSpacing->{1.2, 0},
          FontFamily->"Source Sans Pro",
          FontSize->Scaled[0.03316004962076716],
          FontSlant->Italic]},
        Annotation[#, {
         "symbol", "water_name_seas", "water_name", {"TextPadding" -> 5}}, 
         "WolframGeoGraphics"]& ], 
       TagBox[
        {RGBColor[0.2196078431372549, 0.3058823529411765, 0.4235294117647059], 
         StyleBox[{
           InsetBox["\<\"Atlantic\\nOcean\"\>", {-38.3203125, 13.581920900545844},
             Center], 
           InsetBox["\<\"Pacific\\nOcean\"\>", {-120.9375, -0.7031073524364783},
             Center]},
          StripOnInput->False,
          LineSpacing->{1.2, 0},
          FontFamily->"Source Sans Pro",
          FontSize->Scaled[0.03748527348434548],
          FontSlant->Italic,
          FontTracking->Scaled[0.0074876836681544885`],
          FontVariations->{"CapsType"->"AllCaps"}]},
        Annotation[#, {"symbol", "water_name_ocean", "water_name"}, 
         "WolframGeoGraphics"]& ], 
       TagBox[
        {RGBColor[
         0.40784313725490196`, 0.40784313725490196`, 0.40784313725490196`], 
         StyleBox[{
           InsetBox["\<\"Benin\"\>", {2.26318359375, 9.524914302345891}, 
            Center], 
           InsetBox["\<\"Dominican\\nRepublic\"\>", {-70.301513671875, 19.093266636089712},
             Center]},
          StripOnInput->False,
          LineSpacing->{1.2, 0},
          FontFamily->"Source Sans Pro",
          FontSize->Scaled[0.031241121120301227`],
          FontWeight->Bold]},
        Annotation[#, {
         "symbol", "place_country_3", "place", {"TextPadding" -> 5}}, 
         "WolframGeoGraphics"]& ], 
       TagBox[
        {RGBColor[
         0.40784313725490196`, 0.40784313725490196`, 0.40784313725490196`], 
         StyleBox[{
           InsetBox["\<\"Cuba\"\>", {-80.83740234375, 23.008964269673108}, 
            Center], 
           InsetBox["\<\"Guatemala\"\>", {-89.901123046875, 15.633616989544775},
             Center], 
           InsetBox["\<\"Guyana\"\>", {-58.64501953125, 4.839207001225759}, 
            Center], 
           InsetBox["\<\"Mali\"\>", {-2.28515625, 16.372850601795864}, 
            Center], 
           InsetBox["\<\"Sierra Leone\"\>", {-11.84326171875, 8.635334050763124},
             Center], 
           InsetBox["\<\"Republic of the\\nCongo\"\>", {15.644531250000002, -0.7250783020332547},
             Center], 
           InsetBox["\<\"Namibia\"\>", {17.325439453125, -23.231250923897775},
             Center], 
           InsetBox["\<\"Niger\"\>", {9.327392578125, 17.738222936441765}, 
            Center], 
           InsetBox["\<\"Angola\"\>", {17.567138671875, -11.878102209376577}, 
            Center], 
           InsetBox["\<\"Ireland\"\>", {-7.976074218750001, 52.86249745970948},
             Center], 
           InsetBox["\<\"Iceland\"\>", {-18.10546875, 64.98400542589391}, 
            Center], 
           InsetBox["\<\"Libya\"\>", {18.12744140625, 26.82407078047018}, 
            Center], 
           InsetBox["\<\"Norway\"\>", {9.0966796875, 60.50052541051131}, 
            Center], 
           InsetBox["\<\"Poland\"\>", {19.13818359375, 52.214338608258196}, 
            Center], 
           InsetBox["\<\"Algeria\"\>", {2.999267578125, 28.004101830368654}, 
            Center], 
           InsetBox["\<\"Greece\"\>", {21.983642578125, 38.993572058209466}, 
            Center], 
           InsetBox["\<\"Morocco\"\>", {-7.338867187500001, 31.175209828310845},
             Center]},
          StripOnInput->False,
          LineSpacing->{1.2, 0},
          FontFamily->"Source Sans Pro",
          FontSize->Scaled[0.03412460369602011],
          FontWeight->Bold]},
        Annotation[#, {
         "symbol", "place_country_2", "place", {"TextPadding" -> 5}}, 
         "WolframGeoGraphics"]& ], 
       TagBox[
        {RGBColor[
         0.40784313725490196`, 0.40784313725490196`, 0.40784313725490196`], 
         StyleBox[{
           InsetBox["\<\"Argentina\"\>", {-64.962158203125, -34.99400375757576},
             Center], 
           InsetBox["\<\"Belgium\"\>", {4.669189453125, 50.6390102812587}, 
            Center], 
           InsetBox["\<\"Brazil\"\>", {-53.19580078125, -10.336536087082962}, 
            Center], 
           InsetBox["\<\"Canada\"\>", {-107.99560546875, 61.0689165862774}, 
            Center], 
           InsetBox["\<\"Colombia\"\>", {-73.7841796875, 2.8881803785839963}, 
            Center], 
           InsetBox["\<\"Spain\"\>", {-4.833984375, 39.32579941789298}, 
            Center], 
           InsetBox["\<\"Italy\"\>", {12.67822265625, 42.64204079304426}, 
            Center], 
           InsetBox["\<\"Mexico\"\>", {-99.99755859375, 22.50240745949775}, 
            Center], 
           InsetBox["\<\"Peru\"\>", {-75.047607421875, -6.871892962887516}, 
            Center], 
           InsetBox["\<\"United States\"\>", {-100.447998046875, 39.78321267821705},
             Center]},
          StripOnInput->False,
          LineSpacing->{1.2, 0},
          FontFamily->"Source Sans Pro",
          FontSize->Scaled[0.03604353219648604],
          FontWeight->Bold]},
        Annotation[#, {
         "symbol", "place_country_1", "place", {"TextPadding" -> 5}}, 
         "WolframGeoGraphics"]& ], 
       TagBox[
        {RGBColor[
         0.32941176470588235`, 0.32941176470588235`, 0.32941176470588235`], 
         StyleBox[{
           InsetBox["\<\"North\\nAmerica\"\>", {-108.995361328125, 50.999928855859636},
             Center], 
           InsetBox["\<\"South\\nAmerica\"\>", {-60.99609375, -21.002471054356715},
             Center], 
           InsetBox["\<\"Africa\"\>", {17.75390625, 11.501556900932487}, 
            Center]},
          StripOnInput->False,
          LineSpacing->{1.2, 0},
          FontSize->Scaled[0.03892701477220493],
          FontTracking->Scaled[0.008106626855637402],
          FontVariations->{"CapsType"->"AllCaps"}]},
        Annotation[#, {"symbol", "place_continent", "place"}, 
         "WolframGeoGraphics"]& ]}},
     Annotation[#, "GeoBackground", "WolframGeoGraphics"]& ], 
    TagBox[
     TagBox[
      TooltipBox[
       {Opacity[0], RectangleBox[Scaled[{0.8, 0}], Scaled[{1, 0.2}]]},
       TagBox[
        GridBox[{{
           StyleBox["\"Geo data sources\"", Bold, StripOnInput -> False]}, {
           
           TemplateBox[{
            "\"Wolfram Knowledgebase\"", "\" (\"", 
             "\"https://www.wolfram.com/\"", "\")\""}, "RowDefault"]}, {
           
           TemplateBox[{
            "\"\[Copyright] MapTiler\"", "\" (\"", 
             "\"https://www.maptiler.com/copyright/\"", "\")\""}, 
            "RowDefault"]}, {
           
           TemplateBox[{
            "\"\[Copyright] OpenStreetMap contributors\"", "\" (\"", 
             "\"https://www.openstreetmap.org/copyright\"", "\")\""}, 
            "RowDefault"]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
         DefaultBaseStyle -> "Column", 
         GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Column"]],
      Annotation[#, 
       Column[{
         Style["Geo data sources", Bold], 
         Row[{
          "Wolfram Knowledgebase", " (", "https://www.wolfram.com/", ")"}], 
         Row[{
          "\[Copyright] MapTiler", " (", 
           "https://www.maptiler.com/copyright/", ")"}], 
         Row[{
          "\[Copyright] OpenStreetMap contributors", " (", 
           "https://www.openstreetmap.org/copyright", ")"}]}], "Tooltip"]& ],
     Annotation[#, "Metadata", "WolframGeoGraphics"]& ], {
     {RGBColor[1, 0, 0], Thickness[Large], LineBox[CompressedData["
1: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
       "]]}, 
     TagBox[{},
      Annotation[#, "GeoGridLines", "WolframGeoGraphics"]& ]}}, 
   TagBox[{},
    Annotation[#, "GeoScaleBar", "WolframGeoGraphics"]& ]},
  CoordinatesToolOptions:>{
   "DisplayFunction" -> (
     GeoGraphics`GeoGridPositionDisplay[#, "Equirectangular", "ITRF00"]& ), 
    "CopiedValueFunction" -> (
     GeoGraphics`GeoGridPositionCopiedValue[#, "Equirectangular", 
      "ITRF00"]& )},
  DefaultBaseStyle->"GeoGraphics",
  Method->{"OriginalInput" -> HoldForm[
      GeoGraphics[{
        RGBColor[1, 0, 0], 
        Thickness[Large], 
        GeoPath[{
          Entity["City", {"BuenosAires", "BuenosAires", "Argentina"}], 
          Entity["City", {"RioDeJaneiro", "RioDeJaneiro", "Brazil"}], 
          Entity["City", {"MexicoCity", "DistritoFederal", "Mexico"}], 
          Entity["City", {"NewYork", "NewYork", "UnitedStates"}]}, 
         "RhumbLine"]}]], 
    "BasicGeoRange" -> {{-34.61000000000001, 
     40.664273800000004`}, {-99.14, -43.199999999999996`}}, 
    "GeoGraphicsOptions" -> {GeoBackground -> {
        GeoStyling["StreetMapNoLabels"], 
        GeoStyling["VectorLabels"]}, GeoCenter -> 
      GeoPosition[{3.0271368999999986`, -71.17}], GeoGridLines -> None, 
      GeoGridLinesStyle -> GrayLevel[0.4, 0.3], 
      GeoGridRange -> {{-101.937, -40.40299999999999}, {-38.37371369000001, 
       44.42798749000001}}, GeoGridRangePadding -> None, GeoModel -> "ITRF00",
       GeoProjection -> "Equirectangular", 
      GeoRange -> {{-38.37371369000001, 
       44.42798749000001}, {-101.937, -40.40299999999999}}, GeoRangePadding -> 
      Full, GeoResolution -> Automatic, GeoServer -> {Automatic}, 
      GeoZoomLevel -> 3, 
      MetaInformation -> <|"GeoMetaInformation" -> <|"Attribution" -> Row[{
             Hyperlink["Wolfram Knowledgebase", "https://www.wolfram.com/"], 
             ", ", 
             Hyperlink[
             "\[Copyright] MapTiler", "https://www.maptiler.com/copyright/"], 
             ", ", 
             Hyperlink[
             "\[Copyright] OpenStreetMap contributors", 
              "https://www.openstreetmap.org/copyright"]}], "AttributionType" -> 
          "Tooltip", "GeoModel" -> "ITRF00", 
          "LonLatBox" -> {{-101.937, -40.40299999999999}, {-38.37371369000001,
            44.42798749000001}}, 
          "PlotRange" -> {{-101.953125, -40.25390625}, {-38.49609375, 
           44.47265625}}, "Projection" -> "Equirectangular", "Software" -> 
          "Created with the Wolfram Language: www.wolfram.com", 
          "TileSources" -> {"Wolfram", "OSM", "MapTiler"}|>|>}},
  PlotRange->{{-101.937, -40.40299999999999}, {-38.37371369000001, 
   44.42798749000001}},
  PlotRangeClipping->True,
  PlotRangePadding->None]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.8967296958291326`*^9, 3.8967297075080376`*^9}},
 CellLabel->"Out[471]=",
 CellID->17647894,ImageCache->GraphicsData["CompressedBitmap", "\<\
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
mDd/3nKMrabgm25Lcx0KU1l7jFeYfMq9XcLSBYXdmKfHvXXaMoPQzAHaX9QS
eyHttl3IhG12cKM/1iLixlp8ZI+oXWmLUcOomVe2bJv3fNJUpIdjs92UnB8y
5mAlRpFIu3AFobIPKCPi3c11k+XAIrEd0ODlwQ7a9P6fvSQIPpQJxltf6wsS
TgP7+U6QCjvOSpsJrr108w26VfoTKqx4n2obrkqQH55ooYK7F81nFlw2t/aU
EyStD4LAtrXlNjU33RQsHBJ8mH2XhLVaTRckVTI5B0iTzHlaMw9ekfTxQK70
pDsPCMrPfviqJ0iHfQilPCAZmFAByLoblZDjaLjWA37bDDd5MHmAGMX2tvM0
xQLj2BQP6CLTiG1FjD68h+HgdmeU2kMmYWuHobquB9wTAqihqU4amOyjyCwv
9nyCItPjkhFA1QOhOCwN5ppNLrCbNGksxj1lXgzaYcFgoCKi+EVfvHyR08wM
1JO1sVBT5s7+nW0/aXDjn69w/IBL/vbVr1FBy2kq5Edx61kqa70gI1jr229S
WbWRpJf/5n/Q0GCVFCnxLeYEpxs2kEljYySkQloJ8cDL3zRoKZRNR4drJCuJ
shlsLPQXigOAEsb5vRB4wCZbcct0MeJDRM0vuHAQ4CcB1EvUA/RgDp+VWNEV
p+g1VyjE/aZSFaA0s110ay2mviuuhPbA/559uMCF1NuyJjIwk2k67JiPyXO6
KyYQ9Sf3yiwLX1FvlAZj0s2TbWVORgytDFE/70pbYpB6kyHqSGJ43IS0OWDo
HLiEZbDaQly6qIBGRv7FkzmYNNsd+YB8obNmL+oSeE/169LbHI1rgURXdLZd
sttIP1+u+olc89rZf+JXmHRF2eBlKuo8T3cb36e82pMGJ/U8FVWeprKqc9TU
couG2PVMJbppfnZIsKNzswM0Gq+jsXg9xVJt9PWv/3d5W0xh1OaOZUGWGBcQ
v2EbwSgJlhokxQ7w8fz6lspJQMhr3LipBXHdXAugTYOq18Ii5vIRAC7cN8BN
5zzKSFCt2iChj/aZ+9vBJFyvXG5Wc38Jm/CZg2w3uEGfOOvIujHQa+4aMwyc
nXevCddS5NaPxJS1xYjXEy6zPbGQoI6pBLVPpqg52kN1fWVUVXWBuruKxCFB
8zPECtxOtsczQ9U2ZMvrNUzDaKptQtyq8uQzsvjyhF45KC+wwF8uMwrsx1df
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
u+/T7ao71Jw0ya1xNhO2ZvJha5vhGiAOhWUw3Hl+N66XXIKixIVra1C78SyX
ajabBJzQEzJ5I0urwnYbrCrDdITVEPUPlFNz+21q7b5Dw2PVNDnVLZwSvomR
lbH03rxDvi0xfj0mFMSFymInSHPtm9LywGFaJ4f4QJeALx2iBXsCHBywnE+5
8CUA95ky+D3HXv0RuT9gr7QyBJ8G/wf/oJUmgWzB3VoTgl3lHTXzSYCcQwXJ
2soDamvFaYGJoHRs2/AhlxlDUHK+OUKX20yqfdfrVhQg3LbPCnFMBAV+BtJ6
AEZjuhdyJZ3WYYUMIs3gE/eAdXFkpIFOvv9tull2gyr7O20kkyUJdmtEMnQs
KjwB9IIgmTXHq7ApUw4DidF7ynb3FBg5I+SmGGomtXRJwRZVHtb7bBX4GX4f
YFXgAd53Fv2INMMvLg1SS88dKmk+SwXNp6i08Rx1DZfIHmM0wFFvbVQ2/ABu
iYMUNM6zpnJ9xmvITCcoORdXql6XGXlYNk2Rb4qnMB1hw1J3nlrsPebvkE32
2FlNrhr/tLPGMGBIDqLzEJgoSBByDHgz5BuAbwX6Gd1tyn2gfGDI2UP9maJG
4qBS7n7i9oITNy3txulyu6nuICfGQWpQXLbgAVPzTimCVDMqKMHA0iEeVifZ
kzYVtrnlOHUONdO5y29QUXMlNUyMOWEbQ8Fwy583c9gJG46hIamPBZUUv6PU
7JmZrDJVL7M2miOF/CgVSHtTOP8I2NX5YwDpg58xs9xvZeuE7ANg//iYutFb
7GxdobL+S+yTn6HusVIJenVKj90Ddw6xIJLL4udU/iDjizJxKOp6u5ZXOEqa
C9HIJAdrKzFhYtH32DcF5/VdKFZEy7a4V9bHKmjqMuN/AUt3kGk85ik3KC+I
F6obYRad1TU0pQxJrxFgYYp8hAKEsoOyht+NZhVAiaFWLYL+A0ibR7fhpA1d
xhdbonRXoFYJIatDOsSQzZivi0+FjV8HW7elG/J09wnxsqHZujT1zg8Eapgl
aafzqpC40FfNHTQaXr8sUGbHLbRt82fwokPs6zeNdNO1wgvS81fV3+WLqdZ8
1EHCfiMCxiItCqG4HBJXWgzma1oX4ZAYD9QjcXyx1pDW2gmogZssRiZ3DZWA
zCqahnJs2GigfL2SdYW4Ktlj+dBlKuk+z6fqDA1MVGp61fZRRgPCXWFPRN3/
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
Epv4+cB6Zg9aBxkZcXg9sCawUsurg6JfYLk2tpZkpZHkXZzvFoDD7lasyCw7
esYSrICBP8WS6wnQhlICjfdaj+is7P301KkfU2i8TVIoIG9F8sMUNaCipHuS
v1LDVD+uvwm5D+COQ+ONIhHwQvhiP6EvBslpdBj3jVRT/4yaK42E6mS2jwKJ
Phrk1/qj49QXmeWNs0xNMwmqAkP3CLJqZ4V/QS+yrMkdK10sC6sT/HqZ/6t7
4kkPJvg/bhKrQYUnQFqie0kYy8Rzv+0soJk8cHNfZoSYEpZxOYwNxmZGburW
fl5BBP247GBdSqNdjmutL6KEZP5eRB4G/aM+FxX1FC/2MPVdqUI1/te0qCGR
pVmyNXPocTES5a0v0Ws1p6i88WXqD7L3wm/FXgSAZHt9uegL+qqWFnoEX7y3
C2BR7qgjwWLjbxlS5YckNwmegr7QRQ6N+iiUHqah+Ah1LU1Q+8ICNc/GqX4S
dlzHMiiJW6xb5j/eU/vq7anzkb95T5xmCU1UdNq1e9SunZ8OPz+u0kBT6RxH
XP4cR00QKwHKiUN7d1+lVv35pzqmkRltKgP+kFXZesfuq+Sj/SxjsnUJxUbt
/BUIGBV98pJZMwQ7YxqUfVxzvkKbjyVbaWqeN+BMh9BlYutAd5q1AnYRmNhc
dhKb84jz5e/KDEXUcQravvDlHdEBGJy0qalO6hvroq7pEC/UsgzSBJnx+bEk
nRtJUoUZxOIHoAAceu6q/aULrB3JGmDtb3xIcAqdaoLTTxocw6H6Rd1kmgLx
RRmvxTfw84cuS7O7mnuKfWHafTj2e8SxoU4qziD2wSKGu49iP6vHL5lds7ss
Uw2wa45rXsW+xTrqn6ilwOhFwaGgDYm9kS/qm5jnm7640E/zi8O0teG3xyAx
gEAsWsjTgufRTCZLM2kOrHbyPiyzVBznlc28EG7s7eVNBylOWXFO50FwR4te
lromZ+lScJouBOepahQjVdUohGLkq4oBaTYqUd1AxRam1+jiPfF5JT4+j4/4
lMnjm8UICiUvXZiK0zDbZm9jXqBNrHqKvuhUF97zQb18+zlS2wlTYn2G1q5F
VGqeL+im1nLv3zba86Rc6C0dOKAMj3oMOq6Qd4ZiMf1/+BvV8pt7gixjr+LY
AXQjHsgQIkkAQ8XLYhYVYS5wEUPJy4oL0nhKAtSF3z1bS51XzlJ3T4XYS+wL
3l/m8lbZM51fZksUClI0G5X6DDjewGA1FPGoje3/xak01YRSVDueoiUPI1XW
tkAGg/VLcCwznshJeh1xDUYu4fmcSEeOJlMeDYTZj5j1eNt56rYPRkRPqjEt
ihXrL+5Svf5l6chPm+W0HC4gTkxT01yYxtL9kmNR06fyWp08YFGv+/sprQRZ
PFkWwxs5Wlr3KL+To112SVd3Vyh/bUVy6LdvFR7U5gArCqoBoZG5uiSNzOhA
mRhvltwtr6Dww+Pv+blu2UCAkWkeM7Ofr+8AqTjDxqkR2C27Q9muTWTUDjVs
4WBPQeMc4ii0HoQibTQQrBEAZkfHGWEf2d9NftHsfb6GkUiSqoNhrFcx6zzM
BK9hD71qNCVkTRXBBHyMBF8OVrR+Iq0ebMXqJrKSmcOAuLrJHNVP5aT2f4Gf
rwulqRoMOCOK84mVZjGWsajENNNLvPHVO5A1yoJ9WAbvs1pJ2jl1/PsCn04/
X4i3saCH4tiGFWw5DjXwW/fynNQBq2dpsYFA8HYKtLBWoOX1FaSd5Xd4Y4Uy
27It9Tb9tCJt3M8Ja5m0FgiSrleoCbDdlpf6NJa2h+bmrtDC/BUBa2GBgRVE
82SYj4GbAQabyYl2GhlponhM+Cv+jj5twFp1IFJU4sz9wGQahDrIzMJJRAe4
d3WS0ulRaml9S/hXMZ5kc23xcyaNCQ26l5dEFqiRG6d5BwzJroLGDKSxKIrV
yKjOYEa7Df6AJNzolGU/KhZ9W6bQdvp5xeqYgfkLWndT7z53oWs/Ikzqc4eC
R1hDyFgwloN74U4iN/GB4Yw1z93Wl37beiKqeHRTRrmmpPj5njO+HXp5nb3a
+aumEltKM6sFirKSuyF4iIKRA6hG8ITOzXaKy7F+dVmGe8IwojgDBFVkeQjN
nfxcv/Q0QlaALwUUZWz0knAmIhU5wm7n/HyfDAjVGZMv6GjfuTrlPN/OS3kL
u1xHLJI9MQOWMI0TwSwyLTgOtWLxyVnXDPTVyEAXMGis5qZ1MU7VlUFJFVuB
as6x96PihPKhKITEcLydNRkni7g8YiNHf2CkyEepfQs8VjVb61uOCFR/CLzI
zU19/nD+YASdHTnqWMjBXyixjtwxZ3ENeEi3FhUZ2CfqOhhvlloLaW3v09si
c5fbKtDsqr/wk3mPFlcytAUBMlr9fonlhwbqRGtfk+ksOQEHwTajdxt3Gqiu
2zeA3swUSy+ZGr4spvtaXEgAN1nRA46Bt3Hs+EUnF2ucardXGLAk6APpkIbK
PyntUUhYG4fjYJ1BNZL39Z6n2ppnhTiZo9Oiz+h8lMnPTaUy1MDeZQ3rcehp
FyMmO1gAXqgne99x1q/qI+Z/vqCzQOW8nocrLq3zObq26ydKlV9qATSSNUYu
Hk6LqhmZu6GGGu+rocYnndUF+QZ4rZEPVNOkP7CIiJ3rBcpsrfB2XjELPMEO
6dyKR4VtQFQ9M/QDzOVgZUJTC1aKV8cOmkJbAHDSiZURivMDtZDURki+GYVq
VBAN4AJUl8hOyeAQM55C2rykJFPYQsovtznNP3d2o5LM/MCiPcokB9TdeVYQ
vZ3t5ZA7PVG4RFS6wmcZJOVxMUxbrOJnshl2oFLG7FobCXv7jLOG5z8ikuWL
upoLsZA8Ie9pJKIvTgHml5eq2Xu3dFivqw2+T58UEQWjl0UslsnSAqwKBIHu
KLLTuF2F957UwBQnz9LKkNT2lRJUqh3FOGC2ltdWwPGki3KlNHuVVfZ6jjcN
gJUab31E41XiYnYVzfMMvCFTvEXIs1BQA6nG9KxRPQZRVCvK7Hy2RmvCKYR2
hcbFhQCwpPOTELiyA0GaJ+fOkoCslqeH0yAvhDFFLc1vUk/XOdEoyBoCjoDO
ZVYND2hPFMXu9R0FzDNBHP7mEJ4jIo/tIi/KSNKx1Zho5T3rrHflR8z4qPW+
X7WAaJ76Cl5vqIgpdtCR9TE5OWfNbUHg1oFA3yw5NgGWXFlftrw3UxY25+s8
X3JMVQ40TWy//EHoMMQ5oY2LrK2YBU9v4dZ4fFsEPW0WHGFSLDoo2HEM3UZY
ZYFSJTJwVmwox0Cl8rNEU4eLYnXso/IYUPrY2Inxb/S6FsSh2ruRL7OKSfU2
AxAUWw0WCxHaCfEzYCOAZAYPfXPTm9R4+VWZ69DfX0NL7CDy3jboPsRUGOuC
mAjDonG7M1fzNBxh72ciBYfcT0GMes87K1zxEUOhoyopWG46fo9qPsCEfCjH
AOwmehyLC0mlD2R09vcxZXgx0rtMZT9veZoOQKWQ3HKjcc7MB0F5y9Dtm6a5
+RO2JxMyfZWjqtRmlnLskngry9L1BzAB2B6QpUC+CEA2JHuQXIdH7WUmJDcI
ZjPMsJsMAeQwNdHK6wJvC942MrPvm5zPw5oOKiNq+rbOUMv/Ul2dkfgJjCqm
NmWGMo+mMAwmyBIQ1qpeYZaBUYKEg3l8G4vGC5jihbvKC3rzhtHTH1dT49mE
IBCHmoEXrwaDxm1LJ7LFuDzUeUCbkogNSxAhhUR2JE3e6z6dJIEdTfN3hZJ5
CrBOHgjnqGuBdfSEbwdMYfoFR2LOfqTElCcZrazpehjVLWICF8+qpAsfbwnd
5Tn8PBgCnLSyppvOh+N0bjQtyIur23kJskocWdMZ4CK/+U+176sMswJIaPSO
I6N5E9RZGNod6efbBtx7H3+WR1usJFZW5ygaHRLcCjB+geGLFAhcFId9hu83
71v+jqHBOl5rOO0Y14MgDvliND2DXA9UZWirAs/0Mb3WkDHI1/5+Us5Z+S1p
cSMQv4MGAXhB1HQUeU2PVNVBorK8MslyGLHopc9pbSRTFzCz+lpBvHXMY59O
e7Sx7aTTjgpSKbc1LagPMyTc25qER2KbeMQV2Y3R9HS7DKhranxdds/etYQW
rSPy9SubBepG2XDCNL2kDgYFqvDgSlb5PbNsZW6WTXXCDsNVQzh6RKRCg870
6yCOTh3RyQO05GjbZtESkgiQ0YkxuhBK01BEeg8MkgHyAHWDJmM8YIlUl4WP
bVeVi5Q4Ig86qutgQ9cnRY62eU0Co/U0OFwnshIMNAi7YXPHWzQ21ijBPzI9
KRnV3CqUEiD6bG15mwZY32dSowL3VzECDFLuuMmeI5H+rgzfylqYpWFauSnE
OXHxia8L93JGKi3Z9Qh7kXFxEdjv+Ly+bIwFQ47tSjjDrlqKLk6m2GPNiSry
B36nhet2ItsupWM0o95QUEsrIziFa2z0ensrqb7+RWq6/LoksNh5ssMkga1H
AxOyQabsqBex6GVHKE7f00B9Qhko01RlokpeVXSunB8LU9XYMv+dUOVqHUrA
46kOJViFTFPv8hT1LUeofT7JdlJY9G12Q7cUmAygSh+N+h2uFYEYVQcmqWsy
RAvxOQ7hvBK7JKXOvoNHombLd0tdXclTynd01KApYBK0OJ08IE3uEL5P2EFg
KyszNDXTRpdaXqWBYC3F0wHKe1MUTQzTbLiblhIDlM1P0sb6Em1tLlMyG6Sp
ZXZOZy/T1EIHJZJB6TVBoPKA1YQ5kxUu8ostOenKUEjLnGrLgqRkWHiyEgMj
037jhu7lvV3Q8eJR0QLiiazlKMTOQcN0lpUOmKyNNKlxMNhcUGpoc9ZEpAZN
h+AXdRkM9wNCfHK8RTKeezuJIuOwwcVtXcjwYmtAlaqfvOLI0Dv3TBOW2p7Q
cjWrWPIPuhe6OrRIF6ZmpRkKc8ZYjJQKO8nSlaJLM+zcZqcocXWKjXaUFnMZ
6WG6PONJvrNqNGmdYWSgjxm8ljZmShpTVDsWpeaJIboy1ipFQ7TqglRDj/c0
YuDDqfOyn8EwZcZdqyb7YYFWQx8dFqwbMn3dO2oEtGDmyr1nS3gaTQEwLSsY
nMPEZDO1dL4pbH6jM41SGzLrZbpTd67HRaEgUgGqGk3V6P9FyrGwKZNAiz6v
F8rwYkBeLOLptu41KBOu6TA7sZdnVStY8mreionx9gVnBxFRus50hMP1gb+O
sU7oj0GOjQMhIyHwQCGEl2cyOuCR5vRXHQl5+575xTKbX3TGMcFZETFBogom
p2EmRE2zASUq4ykzc7smlGPlkoNfLPjVvHTsFKSMFc7naTSRk9mMNmUaTB8z
oZRYKKUXa0MZapuLUTDeR829p6mq6pQMWsdEP8wmsqMyT9g7BeKPMT0YHVIS
TClCd/Qps1S4UKzb4odLPuioTY4d0aGFcAtwtIoFhlAiu1BT/wzVND5DbYEz
FE4PqBLILT1lDvrhuJUngILn1AAQm3aE44KcxxetNH5Bi0ASMQt2EItA97LH
O0o3rItSNfk6ZNCbGt8QhyvDPj2+8aRe6tXNvNC3VI2bru47lvpNvTbIVRzM
Ix61eUQxRENxmwcpHxHDwJtYTWCum5ilhqkJWe4aNiZ1vN0bZ1P8f5xa5+Ks
5tLsz+esHwqx32SDB/LzphmNoULjRiClWtA5bvTzlRlqnovQUHycH63U2P8m
VdY8RRcuPU9tHW8L/xOMK/IH+6r4ZBMf8BGF10mzyhnKHjRSrwryM+YbqUN5
8DLH6rx/4LlP62g2o8YGsxSg/6t34DxNL3dSJDNM61uLFlYh1f8baZtShYqR
fkxWGUh9AXMDkQC+W/cE/6rVEBj2osaTQkvs78vbTXYLOwczGvGyyWQZjz26
kmdzrpBMjcAqZHKWSxfuKchyYEE4pDceCCr7+fWcbMLL0x5HyWmNkMwWveYI
zBt3SVwqgTliOwntJPChGD5DMBi8G6vHw+wAs4xMLFPnQpKGoymhw2hbmKfB
6CLrBV7DGzljbAGAQDkbY1rrJwEVYFVTYugo5TNlbIoSxc8p0USqJZgSn6Y/
gp6sYRpNt1HXRCU1dL9CF7teptrLz1FT6xu0HO2nzIoiKXhXL5dqQUoKWBeZ
KyQz4PtDkyMTiXQVyEY+rd1ZJJmAlglNttDqxhybX82fo4n94DYDOnh1B1yv
Cf7sjA2lIEKAWaEYheUXoq79lK8CjomfAWlRNI85qcRc21U97o4RNH1CEIOd
3bw4shALyXXphINx5gHmHk+yIl7gAHcpRzPZvIEJWW8UOVsQfgHOCZJc2L+t
tSUE1jowOyrfhdUZjWVZXrK2mAh5ed2Rl9fvmSQ95iZJtaKxE6+hp8q0uykY
knE1/Cxa8PgOgDw3SsHEBE1nZp149KgU0/vCqpwqQ7Ql3FGOdKnGY/mIIDUx
Hl97nh3v1vkZvh3TwgSOBTG4tsH4JWoaeEsGnwj102S1pDP3hZkGuuOoCBAq
jki0QqXjfYhDYfI/6wgLRtJiKNgqe6wrm3Pij1wXgpOMlFZmpYmwj+by42yd
llkBqDjmliZXhz6T9Gq2TbqTWAoMdEf6trYXDOHGER2hv28cDRaInet5gysS
P2B1qyBRMMBk79/2OZzxP5xVZF4AOkEW5sYeuvh8IYGNQ0ckWPjAdYGsHGg8
Ct60Za5CKi7EwobM51mN/uHFfcORj1fvmVS9302q+nw6KKmxXjGJFDXuURKs
xTowQa61lgOYdvaDcxsKWY3U1lU+242dZIneXJD6AkvwWDInKTs1OSxtxKXY
lOn04KXyYUySRCH/s8aJlar5bDbC16mmm8Mjk5Y6tjDQ6oNLDdQ0xO5Uzc+p
s6+cJpcHaDaTpgUvR+k1dWaK9xyd3XO0wFKFotStfWcOe6kCtuxbH/Golick
Z5H9bm9/h/r7q+jqmiJIAXGsmbCQ24BMDXBwCnqgAQlQEYMB8Av5RkUcuNi4
jJ0QboDPmhIJTuxaGAVyFnNMPy2RQ7SudAhfChZ6855TitphwdreLcCXzcvH
+dbVeALwAiBjyL5B3sDYZUiQThodiPiOXVgkL5ExQjYAQ5zB7swKyQSX+HhZ
TbZfl6ayTi1O+BhckXvlnui/I3dQOCkdkiimM31zaMjTUlc5hr6VJEc+GVZP
WfZys5LbQVkVZI7b1/KGxMXBleHSpjN5gQ+yflPh05dMbcnPCcLsQi9BzAMm
WZ1ywGweTaVTHDpm7e5GHg60nJAeJKowyOlM5U8FHz0fmaDuxYyMD8HJ3b6p
yc3Qk3s9LQYK/tAtBbq1Urd/F6lTZVh0eGAqbH39C0I4irw+isJrOwvFvJgx
vlPAgqMrAyTqYGoFVykEE0lhuOAA3kD5sZRpPr8SS++u3DElIijsxVaFXt2O
Ssf7kPs2/drvaTwsGo9ZzaEaCIYLsP6a0Ep78tqJk7rA2lbBAnAf0SltlBkw
L3F6qo096gvCb6WKXClbM9vWqWJ4So3Thm/Rz9e86Yjay/dMD590cYvaa9Jp
XaSbh2N0pmuETncGLL3duTFgwepCiLTqJlIcjKckRT2XyYlyZuky/U1Ytq6l
vJUoOT1I1HDSIPr856UMIoPoRrwSXW5GzxQwk0s5T6R2a0d5FTvXkyJiCKYw
TK/83JOC3cB0mjaW/R4WsXlPwUWUH/uoguPvpWVoH8o28CRgqwA7R9gO0dNE
zOJjgaYEPhEkCKKZWpuQdBF8MHaRDZU2vG+pDN3yIwsIGVD9/ZrJFX+DBRbs
cQ/abHbB8cbFDvK1Q2JUBABB2r/hZ8TFDd1Szz2q7y8uCU4Rst2ALEE/SW8j
3yLssKaZnNxCB3ijgmotFi/dM7dbqnO7nrE7xVADIEZCWrd/ls40NdG5pjpq
6OUIfzHNjnOGArE0BWNQCh4t53OUQeWWdSE2gFanRx1ljaQmYEzoim6YxuTX
pLFw6ts+ozCD/FQFC0oV6zjBI06m5KKU1c0JOeiVcI7i/HHYExvX4lJshPpp
CXBcfulZIdTqGemjoagiusXxaFVFWczCj27Zfi/tgJRYm/K+KYWLHj2uJQrS
hFIv6AIR+aNZBGZ0V6aNhcVKXVf8xOKJX7ueYCs2x04bB1wFjHtaEM8blXEW
n0cdyUAMadA/kBojWbCrU6o5RiQLdSzw34II0qAVTceeqs6mFWXfDTQeZiy7
FFKFJqDD8gC8id/sqj+qkwxI8+UxvWWyl8YXp2gmo+7bZd7vVcE4Vegyo4YB
unL1wj3Tw4/4lk06kZJUNbpIF0Mz1DYdprrxOFUNz1NrXys1tZ+nrv5LtJxJ
sN+XJm8dGXIFNb2+V7Dk4LdVpx7q59CGU+msGJnaUJoqA4kSEaQSSTaLEI0j
Z1A7kWL/G0KEyLRhWmFYhmJ5Edtr18EcN8t+Sa9gaes6XqIzFU9RfVsVXQpi
oFBW3oeOfniuUOd3E6ISxyzc0pxG75u6zsFDfY4ZP7l8VCeXAR/B/FHhONSD
6AApVtjHjKTdFAwubfGQ22CjvbpMU7l5muY1zLD7BXdL0/0WHRY1tLpD3PxK
7lFJDSC8QOnUzFZEyhwshA/qsphtDt1PysPwt+xptw+SvbKNR5RdPriBEdan
Yf47yp+TlABSsPw3tV8iiBg+PY1tl3sGzXdDm1VgyhFa6tHydO1ahhJemLrG
R6l5fI41nh69i3hrSPEPsgY77Qjn8/e0hQ+58FTLYQyN1zgzRiPJIXaWI+y+
ZKiZPaf0VY9GxtoFCKzncH1C31YEt+jOQ6ZRf5SmNHqEmudy4urHWF2BP2YN
KHleOkR60kEZq1cSV/MSNUxMsfmLUs0EEtuewAluqRyLace4dVO1B+8pPMnd
kBimeQIJWYAcMTwsEQscscnJgk7jxjnkXKTpwiJNFFL8iLOq6eO1m0GHyBe0
WCjvbsTOBoEThWiTlV2R2xSmBkRht2GQ+IMSCSATvrm7JJ1dECVoLrTL4m9U
zzHvJL2OiBTM3jlZafbF+TN4i/O9g1+O53DB23htz5cOxHjoisQ9DaVySFOK
tOB+xb0ItYam6HwgjOU0AGa3mnTGkZDn7pl3/pSLa1UPPcMZlaehyBKFC0sc
aqYFeLHkebSxmaTBwXphxkWghGhGzzSkwvasJAEV1brvGuAyEepiljS8enU2
Nhb8hASbMGMjrIFgYJGlxz24ua/uO7Y66K2QOmrgyOx0czOdCyzxzkhJyHBe
MuBZmkxlJe5xaWSw83ACEKibNwvFjhJTgKi8XyQr0bot7yixYwewf3iAlBik
rGn+vbsdMwkBBZ+LS4ViJjdMk7kITeRjNJ6bZZ2jJmzDafJTF8c1jp+Nweak
eOJQz0inAtmFSgjuomqE+pQt+5r5JLDEEF4IIcDWCDU3+T1IvsOXxMAb9HDn
2CKvX4vyDciKZdnaUe479BS4lPlyi4pFTT1smwJwZ3AjF3J56ougqME+OT86
WQn0LuepZTZD1cIurdPJw1Y1KeiGlrxnHMP5YXDaYgPK1NIHqtVhTBBfzdAi
B/VQQNvX1CxADL/CMOpYbJgKazOSHjLDcJZ5A67tRAWGsLeXZY8kyjouK/Xl
eMHjR5aSKx5/Xk4giXBSDyR++b4EY1kxiVZKlapjpaUoYkY4PkG/j1bZ1r7s
83fm2R4MRIN0YWSYzvSEVKgp9V6FCID0I6uHaBo7ApvfxoCfUeA5FDv3FIQQ
yyRR6I2C7Al4OFg2Pxtvw0hrupAn8atxOUHrgEZ4ezNMPsGx6lRV9KcTLCqD
LHKTFPImaNwLSGoXOgwb2lDMqZ475R180joram464BxoDoUOhZsa5mXgGOLj
ppys347KM9QmSCzA7w+1CSlf5cgktTFO84U+wasqWpO4lnRVy1OqwCdR1N4r
mieOyCaGw4TeQaEjGJM8tkpMltlI8qzv4R2Q0lMfETRcqlfRTgPg0K9zPkPh
PExDwWAxQqONVHfhebrU9AqNzDXKnRTsDDhrWGDh+aE2l12PUV90mAPOqMmH
yEaqGk3whkvRXNaTq9LJH59PSAkFvrV7KVeMaRd8UkCfV+oHktDIhbH8GGOJ
exjjHdAA4FUgYXteghm7CU09Eelr1EjhxJi+BSOZ8Klhmbx1KI2tHbxWgNXf
ymucR05zK9p+TUsDihoRcmPIxwKThswTcEq7W9EynScwwaN5bO/GhFAO2Q20
XU7qIWIoPOooQ5d+cmJAsZ99zIr9S+MCybBCA2SPPGJE1IXEsZ+w1aGsaGTI
KiJlfBvLaTHltqdgQuEZ7KkhGMcdJf6B7oBAbIJ7NJ3JSqBfMZbVFZWzlp33
QK/mqKfQkVoUn76nqT6IfS6xSEm0A0piKy7RZSCckgV61wJh8wLowVjAqpqn
qb71ZRqaaxA8cXxtmILxWepYiHPA4FE/R0N9ywlqnJ3m6DQqaTRVHvqSDHBE
QHt5MkkDy2kOLBQKVOMxRCJRQrm65bHbwnHk1axYD1RaUWkajedlyDO0Hpiv
xSRDxd3IW9AufuP/cN7jmCctrV7I2CA37QPG035CpVSUMrq+EXvvXtfS/iuq
E/imqtJALtKsrwsbQuUksPD9G5qJcD8v+PstlVMVbYPkB7hQBhcbaGi+gWbD
XTQ6fkmSo6jeIDl/S3P8G9cA5QTYnaU87hi7MUUP8B3KUmEzwRouLE0SWbbx
oBn19PwxSJmCeuYcZ6dgqCcgp9DjcBk4CD9qvQwF74U5+MAizlXKRlfRJGZX
CBrffTWgRQPMVACuHBlyQBAWbOwuypnhK9EIYMBoR7Vn/Z4A/JKymc3sUsku
8TrCPb04LaNNig+ryYDi8tDyXumI+1NOleLD2Hwdcf+0CmJYHKpGYtQ6Hadw
LiOnYIZL4PIxG6Y/UEN1TS9QS+AMBSNNvOPBqjnN8hIRsIMY9fEM1YUSHEcv
s4jHFfoGXsyv6+4hxThXO56kDtb0k8ksRXIeixtL+Tr7ASzlMY4tVjZRjwTt
YoSWCzGKraQla379uvIpIIO7+u8bWuKNk7/Iu6JnCTD2lOwyZQaUpSrX51Du
z0Iy9RNkq9HaurrpowXfv2UR8DqC/7yIOr4GfjWsDrxb0+2rTq3Aoas6Zpej
z1yOXdHpJtY0b8rglo7ecmrvPE2jo5eEReTGbkKMNvLSV7eXaPt6jGOgKFu4
GepejhRT3RSK4tiU6KZFIgbJcMQEKlxSeaTbeqwjkjfQ3vq07CAC3ZwATQ3n
FmklVslHnQvFibOjZMmbDKTAb9kp2AhEJHff1JmlV0OVGMts4K94OwA6TLNx
gWVA24WiclBFl9kMWkkRwliMsS2OqxYzWaSic46A/9xxLT6MEUG5Fp+1nDbo
6T83EqfmmSRFV3KipIw6F7QMXwhG/XRh8uPwaQrEG6U+Op0dY5UL4GFS8CJy
ntpBV6QOwtRQavxtBWLVSeyE0AkAyx+IZmgiyTFzMs6+8jJr80k23bCE47KC
6jSUtoY2Qr7fFEChaRC4Io8vCQNbEk46vvD9Wj1k1fO+ObR1oNpQSjwW3VWC
sRVaPD4v341K+fY13+2ABCHI29ZIQWhI5M/X1sLS3nD+/C/onTM/prfe+SGd
rXxS8AUAbdzW1h4Ji4E45vv0cSwxRon1KeoJj/JGWyrWCHFFIu5Jlhd5Oyfn
bdFwcF6R1dwXSELOoMfe1dOAEAWCYQulHY6dP+moaA2PKvJ5EXJycrp94Zj2
kW6zhwIWBSQYgKNAzBhfDwrzyLv63iNrLRnDMZ9OyUcJeqpNTovok/dEEhz1
aymassABPxepMtunlCpmlxX4VnTtQS/uKgpMXR5ekDmcSIzgyrtGzlNTz1s0
utBEUY6Tl/Lz7LDG6GIoRlVB9joGw0iZC/btbnB9GyuO+lQWAvHnazvH+vMC
6+rGqSTHqtg6MX6w/5julPga23p9J8LK0BOXYYmtVjSvMhtTqZyU8lrnFLKy
wu8qNrpXu3En/e+2ncjqONAb4Z63LWTZC8jSvKeGJ/CaFBnZlcGsOrgD9siw
kRlCUBPUSSzOMSxIjIHBQ6fkhcYXqTt4ntKZcenXBJAFlTxcl6Ita+IgrJ0G
4wMcry9QdShpPE9oLWSGUSbQ3qrN6BrnASkzNuzFpqznGWgksjxol0P7Cfzu
W6o9+VGrXi1Hi3U0XKSXGSV3wlom5Xzo9xwziX7NagCfG0AP4PgmvA7ytqbk
rmDLQatAO1QYrSKaQ2rR1Y5Q//Se8IcHFSGxLgpWymyXpB6ZpQgTayDMs2nq
X0rTWDzN7ijYNnMSaxbrU0WSObOuSrHY0ki69Adrqb7xZeq6cpaC0700uDTH
OjgmfkrFcFS5sdJ3nFUUtJ/SeGAF4gBotG4iSUPRBI0lZ4RhqS86oOA42RiN
xLPioXcvedS7pLgXUSc9Z7n3klYOsWuOGlkd0Sgi+R7zukfnx7NiztDmgrwO
KuiaJLSoxGqtgs5pm4WVBbNKDayVm2E1c7znNF0Zq6H1zSUDQkVxBtVIUACj
vtwT6aamuXEBM54b0zikEnGADiIYjtmWNRQxkeiSHqh95TLsmzmFpVJa396N
a683bdBKJttuMnYGFPy+03Tt8ApZd6HMho5myixsLaqfKJKi+jmcbKVZLyTK
AzzcWISzitolpTOwhu3KFcef3LOAdD/NvXXZwhMqWO/Vsg6sCcaoEu4o/3+e
f7dOJySHdc2EOCdEAr2NafGOkH/BmaKFv7rmeao49wyVN16iM70TNjcsGFWl
QR/QgC0fgoNxXAm6NLNEvcuzwmyLApL482JBPKX59e9yjStX7CeK+eR+ky/z
sWZKb/MqIb0L2ORNl7LbwIJzkoRk4TquhQrIcAzu6R+qpaaOt6hQmAExmZkS
jeteXgmwaZ6mWomwPT3s426S9KC4frt7UUkZwKMDnghTfTGSD6rTz6UpKCgi
eDOT2E/tKXVs5Al/A/OFcutvmtr1bZVMxucn2TceTIAjo4e6lqYEOIPUn6LW
8vn76xwR+et7lnEeEJHpaJ3QIK2okGTUjUZoOpmWkKRnIS21AJjQQDQtfj6f
2xFHiAGWBZY+v6VSepH0AnWMBaiia4DKr0ziI62x9XvptKg84uBnWCiHwmxo
l6WlAEFL9Rgb3pGU+KySYtMYGwMpM6gu/nTVandC0zbiLWqowTnAEENRqmX9
F4hlD6e8VPZJYewcScEWBtMdkBLNzW/K/LCdzYgdM76PJGucroSlwH70nkLy
0IFGWqgYqB8sJHBaqPu9a+uSylCCb3RN6N99ArJit8nNzcyaMB0aCBLz69qR
M3NhjFTBIQDOsrDBQWYhTEOxCWqenae6Mb7fAax6VOMqs6ZIfUCCfnxP9MMD
Cv0gcUWCqoMRap+Js31K0GQiyd+pKnH9YY9tVZy6F1KUWAVCViMDjknMtHEt
Kjn46VSamqdiMhdAzUNNP6ojftWtmxL3rdyUBNCSJ4ALYPzKtOKI60fSmU/1
kEhY5fAyK6Mom6c4VYlIxDmiSQuq6r1bJhuqltBkJfUgVDMhGmS5aF3HhL2V
wrTp3cTRSAANR/NWY8ArAl9ArGAy4w/blIgmS7TFFuUhRXXPpBoWj/5YsA+D
oxlGSOPTi5wGrftdsLvtkVe+TtbCG/f0iCx+/gtGo2gZQg/qqrDkZyl7NU1z
6RQNRzIUjCTZR4lR62yY9yJ8DEw4Kx+MFOl2RF0KvODIyA/vaYge1EgGlZ+s
Zjlom2GjUxCjI3KKQA8OLZwF0N3MpPMK4WoBJqr9BqjDSD7HPpRKufN5fMZk
cQy1a1CTsGggqAGemxGlqCtVBkQQ+L/z4wn+gr5wUmpY+/smieGDjQyZtAHq
A8UCMD5SQIlU0Bn3o/PnfFsn+fQrx3LGC6mbUPkU3oH6ah6wJTckK4AmBlL4
urA4ZcWHBVIY3h+mQiikX8Zogvwh3lDRDRZbrkbqwPwgwZHgaBOAUvyvi9x+
Z5wSF5WsLKD4rDrV/eEBD1gpK1jYItIVcE9CHI8lVuPUObvM235ZqrqVwxFW
J6zt2bFAXBBMaM2dVKkmXoZ6R2L+6pfAC/SoQ6XSebWvsPOAhofryj7K/pxI
5kS7BOI5ScVeU8wchi0XmxJouyYgcUZtJkCEBlrb+4TOkQCBfG4sLq2XlSPx
Yi0ZiPS8TdbMuzkDJ5C9hlXeUZGobeTDRNjx8UZq7zlDMwudZs57sXO/ESGh
gnJ+PGfSzOfZeLfPZySJxvdeBSyPKAovhEbXl2n3RlQC/Ju6IG6IKAE7gamA
9rilErPWImicXLEIncArBbrsOsIQKaD2UDxBTAQ/GrWzQ3KCBAxS69Ms1CNx
vpzBGM4btcrlnAFZ5Is1qs8lPzCwHAP2ROgOK4TJCXAC6yczdHmSrcYI62R2
S5EK7ZqP01A4QYEImprByJ1lS5WV22SzYSxHrub5wT0rGw8eBCFodPD5kQSF
4hlLWX5TZh7EaD6bZC2UFTlCucc0YKh0VIEWshx+z2YUu4AOhf47+e4HfVB7
UNGbVo6l5H8MkI2AUOlazuw0G4LraR46nj1pLfu+rsvKsRqevcvnl0yOyLzM
8almDes2EKRS8csA47w0A5hfzqRyOxeyvEoy2VirnjKpClxnIwTRun4D4/fS
RW4/3Xu6R5INlcFqvaundG3KbLXYSoJXtbARE5ycacTxo3RPYlYkZVAJw29V
UFMab2OHxW41TUusx8Hd0BfOCUiIbSXwZpPIhsFudi5m2aFK8bdFWSyX2UmI
CCeSnJMIWtGnrN1DRZ5PjoOnrLQvQLyqQ34PAqr+lbw01eMgCkqzoc7wfUGm
JicMjSAVwJeWm65FXlpXxL5/T7TBMRdtYOF6CPZrx5I0k8oYrMf2rpoFh2SH
cu6s+obGNw0YWHwwh3Yv+H3l/Im/pUPuAw03fHGATiAZjp4QF+AE+dlTEGOd
r3/AmjNkfDEHdpWt/zq/75qd4cH6cztK3d1naXyyUVKBLGMm9IVq5b0v96li
VJWD5zyVWDxhZUtVr/BAFeq9W1lbLlA1d8+EQFZVAdKFbqvk2jQt5udpITdL
0ZVJGfVlUMZ+j2fOkhBtytifrE7o56WfezYbp8uzEaD7lR/2qPBwVYympYft
0gwSr2Mse/zxO3GLiFL+s4oZTdIMp3ftukcrWygUT1IwDnBbrtTkPgzMX686
+ggQustNB2XCridSaDqlD0vU97RE3WvOr0EGlGgFY/wbKJ/xeNqeIlxFFE0Q
Y6DhbOe6qYx4xpmwpfaN7RzLVZIlM2HP6X+wuRy/qxu7oH7So2BUwQSMYF3f
s3Q4Ti7nQRGevX3lTibW1eDW+avgk2TToQdq4VxBAY/WS9CLmMlZbmIFtdLR
uEd1IcwZ8aSRySdnLjvIs6QD6VJdZkHfHiQCQutXEAvsPmdoxouxvVpgJ2GG
HyEaZUUaXZli13dJXGtVu2F1hjrOXgTwg91lPRAExmH7WpaCHChcnkHbWQbK
XufA7ic1rySDrmlpn+1YiLF2SQsOJ8C7BW3SwDtpvL/hhsquLdJUepyG4yPU
OIuYxFRqHvCj2xF/Tg+4x3H7d3YRUaWkSd/GRKpC5AZs3/2Ixf5SI10Wvp6g
zrmkoJlQTZSJ8/sGQauqMvAlbtxQtAof2FSGajPBCiPLcm1XZb/rxlUSlE/v
t21qSLc2syaDOm6fy0jRU7U/5m0B/QOd9UCfHWIkJOR2+A5khAaL3bpVM5Ho
OE2tssCtqSkwOAb0saMjl6U4A9T/rb2MxXYiMd8+lxXhZm/Ehee9q+dgPqid
MMgGZAr7S6UIVRgdTGSpjZ3RxllWCaxtmuYWqXlunnqXl3jNozSRStJUJkaz
XpS1WayY5nMR/v6FXJSW8ykWCVZUGU9G6VSOeSq/9Z+xCIBjIiMTBbDkrXM5
VjpqDBoHkfLNYB2BHvbWoxQuzLG+m6HBaIS/OU59kSg7l3FWcuimhZsTZvc7
LDv63GiGutigJlZycqO3dtF3kBGorFl7XcVxxejbH7GIfsRiULJiaqtHY9Qx
h949r8j3DP1uMtPtjywvQNsYDgoKwmw6JNjbGG/YoeWURBAsOr/jlv0DSgeC
mTeUzLIbws4Oy4tWIfiGG/ypG/yJ2XX2jXczlN+BeCpJSW2t0HV+LhoZlqHP
YDACM43jO1ufSmUueO95YEyykmJ6+3wia8UqI9mbrXn5G9SiownWolNGU9wn
97lmIk0XppK8zpCcBEsOHklqmvWkx+zytLhvmjjq7+BvujgNfoacuHY4BvVv
VJM6F8ALmxfzD00J8q3chseXnWTZAGJkkaKrszSRXmD5iAgjTt1khOMg3vuD
Yams9S6lWSayWCg5Z3wOEJlqYT0/688ar9YRjG85xeeDPeUHp9MqwTiuKmno
TuEIsT40S/2RSf7OuIS8cIiApjc5RQgCkPvjY5eFXArIGBCoNHQ1UlXfqCSr
WCh+12QRpb6SlPwTaJh7lz1RPdd2/dQIPG3omCB7/QBopjcLSiBOiEDcvIFs
X1KGU/f2nJOZFkJT5BedTLkKoS8yFJALfJI2w+CNKKhw2R+fC48vLyiDMdFg
+Y0UdS7NAaOuyFQAsEMWG72I5+3DKxZrUCKLX6Fv5P1aiFQbj//AbAM4ukAr
4XfdhMqgNEzDm+alZCcZtgLkNRen0zJ688Ika96JrCTgYboqRlT7Ggpf6I9t
Z9cTMTWUD0d8QnBtBMKZySBCUeMIxRMf0egoipDPaIqQOAtFmC6OsyJbCnEc
k5C54Oubi5TzJimdBOndqGBNQYoHEjyk8EE1DKYy9Jemk6MUXh6m+qZKOtvS
Qqd7JhQigd2b3zX5vxG/lIXfQOlAIYLGvbCZlYaj1NWYsBt08PVPs34OrxZo
aV1oNtWI0E/wzwJNFNKU2cqaipYYGHTK4ZRAbW5yM8rBV+44GmCwVI0zWfFw
UldzgjK5te92S91nBUijn9j/QI4YLKvCMrQGbbFAVaGUnptQIuDM6gmlNY7o
PYdvwi6Gp36JtUfPkgjFCeNfHGC0y/mps+GYZjrNyMQi4IDwdiid8yamLPWr
0yoUdyXg8XvWRg/ai+NaAlR7OEve0DJdDE5T/9QYrayGaWs9TF52mkbHO6ln
oJE6ehuo68oFGhxqkMaewYEaGmPtjXl2oPzFHr+6Fqf63h4q7xmlM2iG05Rp
/+AuEmCcXACmAzF2d1bhHM5S68Ii75AEdS9naZrNrrezIlNhJ1dWSuyo4jxN
s3bNbSd01Pyo6v/KTlF/X41IAbwg4MlvAit+A8OPEebmJUmAxvqGqaxwyy3n
VEO/AWPfkhAkb+YIXd9LsRLnq5pGGSNrVhxxF7Y4b3e74tj+6OREcgn2AakA
jj7uc0yPnc9hptpo3I7DESOZFYOxMyEeftvBLSNZd7m/oQGo7W3T9N4hCNLs
m5dt7vWERpPiI84MLFH5wCLVDwSol5d2YPASXeHfbf3tVD80RheCs3RpbIE6
p+dpfEFtdvBG73IYZkZCQMGubKSpbnhGYTqCmaJ/KN/xoB3bBcVyZmCZzrE7
Ai+0cSrOmz4ptBEomMHzQZ4WYPj4ZoFmLP15CU3xLo/xXtu8ZjIjn9B9xjHp
M0YXI+iwF+d6Kc8RK1Cnw1HsN3WbkUzEvBuw+NRPqbT2eEIhVBGbXb+Rd/Kr
qrcstRajgWhUEAhQrJ804N4RT/dwesoDYn8CcgRlj32OHnaset2kmYOMY45p
jy4h98DgXgTrJ3gp9kn5BRyMp7U+wEfiElC5MG/VrRc/9JlTy+jlzgX63lut
9NVnquU3/68m336M3rgS/Vj5T2pDIgIqd6tE4Kv6cpZfrL6LbfgzESEccZ8R
Fd2uURWIUM98nAbZve4ZD1DjwADVXRmk81fGxG6AgAx5RDhbyXxMGkuxVArh
pKorAAmmVjNUO6KAx78n3/GrvkawCLaEzu3Z1nDWgwoWAXK00VSW+ll5d0c8
6uHooYuXvCuiUuHZ9azUd20xZj9Lq/lpSkSHaYFVAnzNhfC4gJuVPvWcPqWT
cu+hslHMBpsp+rKQb0SCCr1ZBoGqejFU0sWyZu+rpk7A9gciSdbZKbWLf8XH
Myu1UaMNRbHKf+M2fFIpSpNWMgVWTbLiKg11m9zXMpKWhQRWh7KKmkzjqY3I
fEIb/G++3EB//5/+Of2zL/+E/vgvX6M//Maz9Hv/9jvy/DtDqWNKep5vmfoY
DpMfRUVfc6zJ4dHf+P+gNfG1nIJsJSUB1zmHtc/JvYFneIl9n/Njig0Lrhe2
FnJoyVXBrPqNWZ4qwrH7hjBiwUN6OqZdH+8fm9ySa0+Gkwcyc9WhtLj44nFN
pAU0VwtaPdyqMZXznEx7dHUnq9mBCgaIsMeeMTyK0emAJMJrQp6eb35CThg2
BM4LGtcVXzKwkvgo1JXh+vKFcJjICgPZexwCamX0sCCtwmpDjUI7qnx8AzYd
dvn+DPThvgO4DOP6QcPhAsEj6CDZLHvC0w1jst68vkVGAH9U0WPWvMhUzHnt
5TiWiSJtVL56zzriQUbnE2bVzXAb1BbHk5LavapnKsmqL8EBgifj2VVHuDWZ
yhlebzOxEj7Xtb2YdAtNgWolMUANk1MSSWsmtqLf10vvm1TtFFsRSErG49xo
SuwM1qtizNO/lcOlojoOVcJpKTZc37NLj9EIGE81OhOkS4EQb6q0nip+XNR+
1bjC2sHYg0qiazHKgX+IroRjaDnnKxwIw3rDCYA+wbEwDeeUJf9Ns+76rM0M
CyO0uMJjdlN5B3w921wS8LOHhpgFpgBr6+eU1HpjbVkWbFHc6AG2E2a9/4Lu
VQUsUegUPQNHrfcjfqoKpGEsfs0zaCHNCm8Q9hF6oEbjWb5yT4x8zYQndw6S
j9IAknF2hroK1pA7RHOZYF5jzdS+2E11oSkz47HoD8wJmNmRQfNIu1NkDHSi
RHucWPLaSSwzWFyks8nk5MVGocl1KTJOncO9VD84QjWDLGrDC2yDQJaUOaZ1
J0wDlAWyid1LyBVwuDQ9J7PraydzmGAkLmDIc07OnlipTK0pMUhGk6ixRU8U
qaRwNZa1U4b0ZZYbQjn3Mkeypqzto2S9Ivucf4fUd5rj9KY1NBqQlT/96Rnn
bEqsXTj8nJErLS9f+RCr4M4yu++A358SAHrrbFqqj8gHwJLe2GNXOZOitjnV
3owbotJwnhQ48xsaxm/kJGJn7l6J1VNv9DJdnBxV0KURTwXpMiDvd032wwYd
plFFqjnAQ+kewodli4JtA3UoMNwgv4eswyrye+xhDo52UXewn1oCQarqH6WK
wQXD22b3bKne1zBlmBUEfofZbILVBFLLSaxuUfGBdRN8XpFt1rOwmQR/lju0
ym3gU/YC0lIFRDXbQxC8VYypVICF6ria0WhHxZ4NNkAfSGrExuFHN+bH30yW
QFmbkwPiYcwMOw72OYgQxMYRmf/0EU3K/VZkMgJcaJrOSGsG8r6qeOZxvJZi
E5NVvj788Alli5GFw9Q/XjkjMihxbMhMK9X/3xvlSHYpwOHINEeoYQ1kZLk7
ps+v3OeC1mFrqXM3M4fvomaX0gv7sHgVUBYIOdBOHIirhPH+XpZDp5RkxTc3
ohSLj1NDE9/X5suSK1EJNdVibRpRByKKJATZeLBWTadBm6VVm57WKH2BYeUv
momeAUGW3l2EdMNzEG4ju1MTi+wXzVLdxDzr6DDvvYwesFt6YP5yeUBfdOkB
jLHuV1LDetBAIakEdUYS80jcExXtJ3HT6x8iR2yO5HmOZu6qjrQc/dmHmCp3
XNtJvSAG9l09mqDplKqlfaDbVkGhvbadFOw1OiThkuDvSMHU3BS3SZkt3uYk
W4peEtAJ9sVaqHt5jOpDC36xyHhyAWuPyvR6KoJPo8fNKHXvHxzW5YpB3Jlz
ZgdgO8mBUvFg4F5gd6yb1Dg7UBgrvRmhyFI/heaHqHd2WvBjlZLHVw6UEqFP
C+sHqlrvCqkf0uWeSLBvQlIW83k2oOaRAgtqVaoxugE/n2HkzQZWx20EUymU
lHHWWlGruc6OZmUTyoREo60dRLK+I6VaiA6Y+qCmbB/JnjB7QljV4wJlOc+h
ZmXAgFQllDQk3giBjOk74jwHF8p1n1yXSsvfl/VLaDM4LH8wfWaKnNJjH7er
KrA7lsHWGTaZm54qq91ALiIl3DLbu2kOcJV7hF4VRZSRkZyjHmKts/MnRamh
Vop25YnMFRpNTrGeXHaoy53uCZVstZfkdLcXKVx7qQq8jW8y4v3PZjv7ZNX6
o3yrIfuetwTSH+3sA4PyTAG0crZfBKcJty5SWKZLU5AcPXbYuGefFrsLn+rq
FpwAT7AyFaPG31Upcegz7GBJs49nhFnLSAi8eqQHWHH5xwfN69ljpNt6pLlJ
QmyZrJrSA8TLzfP2hqVK7jCRWQ2TPmbrXjUcddVNpiTUMWnMs750QbNBajiw
stKF/w9Ll2s5tXT9fx9iJV1Gjfu1jvNXUzUBts6kaDmXk6XYvY7yiCeDOkAX
AMjejT0gJdmWsm6Bf4MWZHRv7QmdhEEpHBFNp+ppCQFf9C3JOpSaRgjTjOK6
Jc6AU+u9Kva8ImMxXVuk1N4nSYW/ulnQCeDM58CDr59KU9tCkoLxBOuppJBx
CEXZXlQ4bWMrcVD8KZIvV8KOqJQLu+WNvF51ozEFtQ7EVeP7A1b0q0Oq+Fet
WxrNVkItB7ASvK7GwobxDUKoXFTid96JbSxX00aT+g4ZKKySuDLHhze5LTWx
RhnRB7U1NOMMJXJhx6Y6lCoyDSiG1BBHvqXvPkuPSBGHetZumpDetaV4Tus9
I23/8ZfYUg3+1Lb0ASttlRpZNcyxczSPymWOQ78kS1lCoMvY0YBZCpnJLYu3
gE64LlDzZQ2G1swN0viOuMxjfydNA8scVI26lG0HGlKKDPGHH/YnSMOM5U7J
VKBAWifJMkX/6MDxbuio7myat9O5UYz0SHGECsxjkjcRqpRZWs4nKZRKCWEB
MIs6+WJIc9VHpmwTbuVwlCqGwtJEIcSA+PSTugUnLSk6SNS5Ub81B1cAQtSL
kxk5RqUAxdUKmkk3ZsTpERPOmRnTqjXnjr6OR7ThNf3L0jw5lpFKo20K1ikm
o7VgDyEf0FqHNdTPagaVJvsYxEzlB//46Y7VoqL/90PMoTtU9X5nt5/VbXHI
G4OwpG8pTbm1rCAZUW+Jr4ZpPBmlvmVFD7S2bWjmCpYiSeaPC72CM8XhPjIz
A8wAx8JmmGbSEdFflyfj0qjnmzA1SkhTeTrKrFTdJMnWp31HppTMyB+1e3O/
fziaE4GCLviicvRGMpIe6eDQFvuim2MUTDA2Y6jO2m/2fOE0Hv3gslTqK5Fg
59+aa0jdPD4FCON5g6b2M0JKr5VJIOAkEsW5skprxM45Kvq7pNIqLumN1e6G
jF7fCD7Ft/WNgLMOYYFzzn8XOzpGp5WLdD6Zjd7Hdn7rn3+9qOhPHNv2YWxR
RtsoA8JfPbAkA8WA5kJHOEbhoesYpAFg39i5nsLgdsOwYVACYr7QNH3LU3BF
haQ0kgIpQWAIPz4gvbUtdCVyhaP1GWqZiXGEv6SUuFlhw6tuFsCdFuXePexG
laz6dWdh09a2YaHgR4P+BL8rjB4Q10U3GNpSgNZ6LBAVw8vSQFXNivdcIMYB
1qJOQWQUjcrgshT1pLgXSPotfdKrFdG+uaQJZLnkon7TXJ+RvP4F/u/MFYwI
PdM3p8pPrHKMkkDZySxwMcKzYikTKCtkFlBrChaGj/V//YVLRUX/Qb/7XiO2
Dc7ypP3ppxfRMdA4meBdDOaZrPSDgsFkY1fhBvdlJJueB6inAZlhIs7fBtgC
vQH7Y/IBV2IXqSfSSp1LE9Q0E5ctVx5MHXciF5+lI+2n5Oz/XtE/kWM/66Ts
fKXrzKd2dmrqLq8pWcdCIp+vBEOxNuiisBEiKJiEeOfWF/ChABom9PesGtNv
Qy1+MFyK2pD2WrQrZkAwLC0v6sXDJsZywo015UXe4xJiacfhj/WC/jKUiVrQ
+5zkCYKguBSC+5ZSlMxHaOXqLCW9UcqvT7HbGinywYCqeug39xyzFUUzi08N
cbVw5jK9yAKi5vgIHHnY3xPZLgqlr9BQfJqDlYQOhTMn3DjHsnykXCKion+m
wzgT2ju684CYOuGC/7phxwmmDljcf2jCCStI2QNhoi7emfqMbzJl6OEdxt5l
C/13H6JjXfCHXHqpqfY6FCHt82EaDC/QwMI0XZlopZ5ANfUMnKNIdJC2N8J6
JU4Keh6gMQPzVQ1vKaEozGxMUW5rRtQrJsfplksdvh6X92ALb1+PSApmZzcl
7uNkOql9rIzOHJf6tKZKZP9QSatVx07PGd+X3zM31i6oHeXlhxfB9BEr+Lix
TmHFGTrPb3E5Nv/oI2qwY/a0szZ1zw81EO6kzpMkVT5F88HVjS1Tw/gcNYxM
0vD0AI1PtVEweFG67mPhQX3HT0iIBrMnPYo3MtL/ChcHXc9AuaG5ld2eYk3A
bEbp+FDP44pT3G6bvMDt0Y46nkjbG3+/va9q3AdC5mJdvyh3wrd/c0g6/brc
UdcUquNNIkGlcEZtZUueS4k7jJFGKNGeNSZtxDsg2f/2I6qcEishxSa9rYN8
QOvOs9GtHYeXdoHDqs9KTxoaGYG37uDfsDTnAmwsBxaoYmCOaobnaD42R9nM
pPSddnWUYxynoBP3dhPSOYv2L1DCgM0OxYx13hbgQkL/BV6/uZ854bQFulyj
CM+HwmmDsT1w75XycLzUjE022wDIhRTpNXjLhON6DYAOQDkFo7N1at8ilgxd
HaYWIUbuXPTo0pSlO3CjdZcv2yz9L1MypujsZJJ1JFumExYJ8YKaZzywqvNr
7OLxoiDnvXNNpceQtIjk0lQ3skDnB6apLjjHbnRcOHfRMwzAe/+VKqq/8AK1
tLxB8VRA4HrXNXBgbWdJMCHYLWhx9vi5PUXtZljTZVcoIh7bgxVfyVLXQspY
ivvNTT3k+9mRTZKsNTfVIeTxiY/edNYFLiBIAwA+rzW8YO7e0OtyHpwhIUAX
lB+kwkWl69y98a/1jXb7WO6GBC42oZjtyFLqCA1zyGshVrk8laFglANfz5OF
KGzmi9FUwutyfc/C81Vbh7dI9d0t1DYySsOLYQ7/swKDUBiZnExZBANkw6WX
KZEO2lQmcgBoKjLtvRjvhDyhmqCr2y81gYQ+/NbNjFkawDZBan3uw5fGDmoI
HFwauyTGJR/JvmlUt8E78ZapHs8KfEBllFDncQIAs2s0wmAkqfsrfEiuuzp/
eE/NVXbHLCe8VxE13Ce7EhcJndQ1n5SuoV6WyUG+eAAnACdBR4s7iNhMkvng
tj8fM+dNU1PbWQrNBimZS0hlg2MlQwKTjAWoqek18ryQpgQUHWXBEDczeipA
TreDQI5290BTf2M/Zcl/ig+tmtZ85mnU3Yejntysw6tmXaOsbyncVfP7Ae3f
bM3fdOMx8xFOMKyUnVKKpY7FL3ezcNZrk2VzLf7/rVftzhF/9x2csGTDPy1b
GC/N4dnF8RiFPVRy0Pd5wvIuYwMBFi/cwA4z5gH2lDJazc/SFdZrGDB+cy8j
XfilesUyiVHqbD8jIH0hh1QjXw2aQo2vH5egF6uBbbdUGBCiWjBRg+a81HGy
b+4f1H1gNgQ++rxaqpN6GdxqgK/f0h+2Svz3W9ZgeS5TXbEeS6c8tIOICDuF
V8mDS+X7f+lFuVvLQ+hsm5EB7bCckJ0LxXZxIkEXBkeodfAKhbNxIbpQzfRS
rSjW9T3TVWLMM/oR0qkQhZcGBPiOu7WSn6GZqQ4Zrby82Efb68sq7PiMDIkH
McWV3nMycXlwsIYmp1p4A04Ipgjzf0ITzTSz0EEbm0viNIDaazTdIvHoLIcr
8O7gF6/szEl2W49A0O12Ps0BMCygvAabFd/uB/QdNDhCG1uq8em+YXJ5VlXV
4i3XGxaiqoQMLrk0De7MtGHxMIUM199zqW3/pdFyT71zh5a7/kd/St39c+Jt
tUyzwRdwZBP/PMHeV5KuLCbZ9LNmC/ULvDwRD8rI3vXVBSmcO0tkKAhxT7bW
l4UKYmzksoxthWOWTIzIpHS0kLQ0vSn3nJfIbCvjfIEnYISdbD6Mz6Srs7zo
YWpufYMd73qKR4Zkht+lS69QLy/lQriX5tK9skR2RE6yUai1wV2W3gxJOIPB
AWaLquCVTeB6lhpCcQ1pzTxg95J1xlychU8jnCU/EFWJ7bcdv1lxOSaoHrOM
FsET5qcl4fO67WP/5z312BFKPf069S5nBZSIfD14z1NrfK8TV9GqDlY04FxR
qsRcaOBnL158iS41vEyBoXr4XkUlel3AKyAEB5qn6vKlV2Ws+8X6F6m66hSV
n/0Z1dU/T03Nb7DuOot5d5BnQ7jmD4BQoCAUsdGYBgjvzlaU2ttPU2Xlz6my
4kl65/SP+eN+StW1z9CF1peodexMCRaFL0jmGGdaKLYWlMkN8AT399OmO9LE
P5jHlFxNsMcfp5pgxEzGO+mElDoe1uCco64vTO4kRBummKUZikqJqX4yxV6K
J2gnlepV2A53af75PbXZUco0t1FqNWt5XXc1oTL7YGJ+ERG6XPEYsaJmK7VS
B98sUOhjjDHbCBOyb2/GKB4fFaZjqKhgoF7adqC2gPCX4fGJIGXT45TneIc/
ssiQ68CGrAhJa1rL+COyNmDYhFhc4e02P9tFE3Mt1DFaQfUdL1Nt6wvsHr4i
E696lmpkVAimHywU+oUxGfQq7FnYxdFaTpp9d1McG2WoZ15z641kJYwwAFyb
qTYhthNsOtmce5fNjlt1V6HTsYg9a8aSbpr0wGL9H9aLO6zf2A/6ky9TbGkZ
cFd1d0p9fqAHRPWvrczR3Ewn65tKarz8Os3p8VcZtipiFnipMORyItQsayJb
w/rCJeKBYQ7c/g2jY+5XMPS9NK2xGwA1CBHAGo0mWqg1eJrv/4t07uIputj9
KrVNnC2WPVIqwycwbQOMNrysZbp7UhVWsrILJxJJvhdxZcctGuVgQGjswSE8
AdubE2RGENuyu0MR7SRY3rF+t8mOJ3zvzV8GdxX+qf7WuzXDXn31bQEc+3Qe
Zfqq/IeP5lH3D3YAqqqt9W3ZNmCRra4+RX295+ka5qerkZKqO8yytJbYogLa
ao862RVsxQ0OOedzfTLsiu87XWh/SSa+Xex5rUgtQokoKnC+7N1I2Jq70YFo
jm6dVSTBMv7l7HCs6OD4l3ve/DIDblC3znHYJAg1I8qdjB/epygEbXB5UEv9
7/fUUqWUa20W6IZmXyx1OAJwd+CY3lRcokVmlNr2RphGg5dFQZ2v+gVVsEZH
VmWJd8H+XroYzd5FisNGjz8pcqcEGe6+41qpoQSAuaEwzt2sZFrHy6my7hdU
yze9fbqSeiO1onhAnxouDCNnaakY8HkzqaS46hKCB5S+jx+620eN1XbTWiM2
naikvtRN8eJ+W+XjQG/f0MrncBN1z2KGWmYMcEwRKbtr8L/p9zkhJL3/935b
fl//N/+e+tsaaXUtqompzIZWziz6+c2cb10t1XfgQWmQy7KDOz7WSC0tb4qJ
HRqoFROAyAIZXDQ+KuBtVFbEdGhLt+RD2vWFm7q1u8wxRr8MR4W+v9DJNqDt
RWq48jp1TlZSx0QFtY2WU2+ohqYXOsXu5NjOINTBdMNbEuaYidIFCsXiVB0M
C1uYSh3pTJijhczSuJG9MQjlQV2mP+pk2jOScFTxn1Lyb2qbctapAoAg+MpS
RuhowQFqKTEPtub/r/fURmWUe+k0X+kIa/VqWmM/9t2buSLfC9VEMdcUMTs0
1km9bEiaVFc9zQFENWVSowJSR77Wj9pKNZ+w1WhmhJAanR0Rgt2B2EXqnDkn
i1BR/RQ1tb9B9Q0vUAX7YVWs5M6de4qq2C9rbuR4paeKpifbeREWZRFMOBqM
gDssInfJ9Y109Kd9o7I7fSNlMjQxqb+P7J0O6oEWfFfRFouWPEBG1EBsO13a
vdN/cE8ldIQiDR1wWGl+KShuP+zqrRsZ/2b5U3ZYR53UT+OoixdfpPm5Lo7z
4sUSXR1MmxvcyiYb1vzWsszLgSOEHaTahH9FlgA7CwNtdCAtwQB44zBrrDdc
Ry1jZ3gdXqELzS/SUKCOYhxgJNnRCi/3SyiJbtqRQAMF2afu7a6gQY4dp6a6
Kbuapr7FuFoDt7akAmS7Ifyxhj62zKHP1ma5zNVEpNPy+rWDBSV/nXx9Z0Dt
+A0Ano8tyP5EfyXqhACRAEBiqjOoIwLEi/bEo85xBgpnUNcAmuA49CCV4qcG
mvgSYFCyb/dF6PRwyskY3C2zdoxjzi/TaGhJ4ho4ztA2ra2n+YZ30sbqgrEp
19gpvnk9o/9TNgUma2V1DlzHAiRBLllXIkVsGi69RLPszO1sRhSLpHUqjrES
TFFhC1Tac2ybUobwzXyPEqkviZhBGeuBOvaQjfWwfCX8YxB25VaneXuERK/K
UHX2KXoWa6gtdJaaB96mpWif+ChCaslfvcFbGJkKtDyCSQHTtGBdOzrP0cjk
ADWPjFHlwIwCDPh16BIjSbaGnCu6aBxlIwUoEoxnJNgEXslJoFo+boNFc3Fn
BkPkioBpS4KoGBEAtMC0oZWi+PwxvNUVgf9JH3mqupue+PEp+vKXv8zLjZ9H
6LtPvSLPG9nW4W6pZmGe+f3fp689/gT1j4/JvcaSP/2Lv8ab6Wtf+3N67tmf
8vZro+9+5wl65aVTJibp7WqQQ/DAS7n0jH17S1N1iXz5/fTCaz+nzoE6WTms
6hNPfIO++tWv0KuvPimb/PpujM6887J8RPnpV01iFp+Op77DD+hbiGl4aVxd
0jF5aSrUi/PhQ75Js/P9YsiRV5BPwWEPUTw1RoveID35zA/lPL/5rcfo2Vd5
RZpeoce++VV68sW/EncTw4cRQriMyO9aclvVCh0ND1FX11mqrXueqhpr6Fz3
kGBKpDshECczT9viXgJiLy8ecEfT2mHFz1ILKNIe6M/0oQZZ7aLNoBiMVBw9
JD1oYDOSYtCNaGI84sjHb+vXf/xqlVk1lkL8LKHn6geN8Sgq1Yaj7V/8C7u6
84vjcld4TYr1Gx9//Ov0rScet4fwOlggwuLckH3eCIdWIzjOSCXW4vs/+rYc
UsHrMaUGXJmXz51/hRVJh0R9p57+iRxm5aMMEma/QPgPrwHDhbcepZ8/+eMD
JwDhAL//8nJAH3NExjO0tdfYY7717cfp8SceM9cHwYBbjFwW9MvV7Xlkq9nP
+DjdvKlyxzCaaphZnhK5GC3FZ2h0bpwax+Y0li51OIllE/JamShFIt5wsQQX
Zcr9Mvg33b1m5lQAWQbBgAoxgmEA1b7H57eLAJp4XD/nwvrLHMH4L/F3mbF0
jj9+VFu6FxtH7V167Ls/EmmBoXmlbYr+/LEn5PmlP3ui1NSb/58/pdbuKfrF
a+9oBXSCEhElQLx+cviPfvQdIU5JJydFOrQEGQZpV7OsrSxZ4WHB0h95lEZH
O8T7xrjvodkmmTKHqTBLhYA+5jhduHiW4rGAkPQ8+bO/ks974/XnxI/D57EM
2c/D//gu871QLjA+ofEufUwJLS4NiY8zPmqe+5y8x720l178hdjI6WgvfZ01
DJ772Ys/EH8H40qgacA4CQiOjNcFVmRHNcShRWs4mhcylvFkXoaHNUxlXFCm
as2TNiiD4VBycqCW4Je8HzBLKcnrlEC4QZeDDm3dkFL0C0fFQJJgZEoUfo2F
xpWfw54J/sfzh2Xqv3B1nqjBpA/T9qsXFhGiDZY8WLRMbfyNL/8Fbf7GbxyI
qmGscDHgIRiZnT4sYbBTIqiPfZXtexOtry6KjTggYaVUV3NGnoJ1cUagOoIH
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
h/6V/w/x0bZc\
\>", "ImageResolution" -> \
120.],ExpressionUUID->"25d45814-7bcd-4a0f-b3c9-088635e430b3"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Scope", "Subsection",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->313242344,ExpressionUUID->"dfbec481-8b7d-4cf4-8111-e6266301d42e"],

Cell[TextData[{
 "Specify locations as pairs ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{
    StyleBox["lat", "TI"], ",", 
    StyleBox["lon", "TI"]}], "}"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "8a291e9b-ef73-423c-99b0-e3e9152c119f"],
 " in degrees:"
}], "ExampleText",
 TaggingRules->{},
 CellID->149390599,ExpressionUUID->"a4bb7451-0011-4227-b71b-dca255ef0b6c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RhumbLineDistanceList", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10.5", ",", 
       RowBox[{"-", "22.9"}]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"10", ",", "150.9"}], "}"}]}], "}"}], "]"}], "//", 
  "Normal"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{3.8967297525980825`*^9},
 CellLabel->"In[474]:=",
 CellID->254371304,ExpressionUUID->"f505f97f-1a2f-4dfc-a82c-31fcb655c256"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "2788.2827292218794`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "19040.59205267037`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967297537196493`*^9},
 CellLabel->"Out[474]=",
 CellID->205400711,ExpressionUUID->"18dd90e5-10ef-40da-b5c6-cf8ce3639f99"]
}, Open  ]],

Cell["Latitude and longitude can also be given as DMS strings:", "ExampleText",
 TaggingRules->{},
 CellID->563383150,ExpressionUUID->"0912ecc3-e7e8-458c-a623-0576e802b657"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RhumbLineDistanceList", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<46\[Degree]25'12''N\>\"", ",", "\"\<21\[Degree]1'12''W\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<30\[Degree]13'48.''S\>\"", ",", "\"\<40\[Degree]30'36.''E\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<40d20m12s N\>\"", ",", "\"\<112d50m W\>\""}], "}"}]}], 
    "}"}], "]"}], "//", "Normal"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{3.8967297554341574`*^9},
 CellLabel->"In[475]:=",
 CellID->231631679,ExpressionUUID->"833d2114-ac3d-47b0-8cc3-d87a85eb9794"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "10530.791044730959`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "17696.134966278416`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967297563281574`*^9},
 CellLabel->"Out[475]=",
 CellID->699197404,ExpressionUUID->"8aaf802a-9955-41b9-984e-b71898459fe4"]
}, Open  ]],

Cell[TextData[{
 "Or as ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["Quantity"]], "paclet:ref/Quantity"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "93860fbe-b5bf-43f6-bb09-c3ca660836a5"],
 " angles:"
}], "ExampleText",
 TaggingRules->{},
 CellID->141265919,ExpressionUUID->"5299156d-b089-414e-a62a-2b54098b8005"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RhumbLineDistanceList", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       TemplateBox[{"0", 
         RowBox[{"\[InvisibleSpace]", "\"\[Degree]\""}], "degrees", 
         "\"AngularDegrees\""},
        "QuantityPostfix"], ",", 
       TemplateBox[{"1", "\"rad\"", "radian", "\"Radians\""},
        "Quantity"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TemplateBox[{"10", "5", "0", 
         RowBox[{"\[ThinSpace]", "\"\[Degree]\""}], 
         RowBox[{"\[ThinSpace]", "\"'\""}], 
         RowBox[{"\[ThinSpace]", "\"\\\"\""}], 
         "degrees,arcminutes,arcseconds", 
         RowBox[{"{", 
           
           RowBox[{"\"AngularDegrees\"", ",", "\"Arcminutes\"", ",", 
             "\"Arcseconds\""}], "}"}]},
        "QuantityMixedUnit3"], ",", 
       TemplateBox[{
         RowBox[{"-", "21.02`"}], 
         RowBox[{"\[InvisibleSpace]", "\"\[Degree]\""}], "degrees", 
         "\"AngularDegrees\""},
        "QuantityPostfix"]}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
       TemplateBox[{
         RowBox[{"-", "30.233`"}], 
         RowBox[{"\[InvisibleSpace]", "\"\[Degree]\""}], "degrees", 
         "\"AngularDegrees\""},
        "QuantityPostfix"], ",", 
       TemplateBox[{"40.5`", 
         RowBox[{"\[InvisibleSpace]", "\"\[Degree]\""}], "degrees", 
         "\"AngularDegrees\""},
        "QuantityPostfix"]}], "}"}]}], "}"}], "]"}], "//", 
  "Normal"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{3.8967297584006705`*^9},
 CellLabel->"In[476]:=",
 CellID->280699550,ExpressionUUID->"3f6c8824-f5fd-49cc-9a3a-8d7ef35419e5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "8744.634780714276`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "7961.540650266612`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967297593077135`*^9},
 CellLabel->"Out[476]=",
 CellID->735887497,ExpressionUUID->"7bf535d4-337b-4fc3-9b5c-7f87380f8a61"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "fa041dfc-2ab8-49fe-a46d-371a36721df2"],
  $Line = 0; Null]], "ExampleDelimiter",
 TaggingRules->{},
 CellID->14041876,ExpressionUUID->"a8a14634-7201-4091-a441-0ce0c86b4c31"],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["GeoPosition"]], "paclet:ref/GeoPosition"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "0d7ada31-ba8d-4c0f-bb62-8c67a23c2ab0"],
 " objects:"
}], "ExampleText",
 TaggingRules->{},
 CellID->555464187,ExpressionUUID->"f6d819b7-316f-4d5c-ae9b-de0b3de55f5b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RhumbLineDistanceList", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"GeoPosition", "[", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
     RowBox[{"GeoPosition", "[", 
      RowBox[{"{", 
       RowBox[{"10", ",", 
        RowBox[{"-", "30"}]}], "}"}], "]"}], ",", 
     RowBox[{"GeoPosition", "[", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "70"}], ",", "170"}], "}"}], "]"}]}], "}"}], "]"}], "//",
   "Normal"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{3.8967297615517435`*^9},
 CellLabel->"In[477]:=",
 CellID->285974285,ExpressionUUID->"27689211-e7eb-4cdd-a72f-15e2a2896770"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "3501.890311598198`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "15757.552785122674`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967297629487658`*^9},
 CellLabel->"Out[477]=",
 CellID->112066153,ExpressionUUID->"e0f6e48f-6e50-4a41-853a-c1c609589962"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RhumbLineDistanceList", "[", 
   RowBox[{"GeoPosition", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"10", ",", 
        RowBox[{"-", "30"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", "70"}], ",", "170"}], "}"}]}], "}"}], "]"}], "]"}], "//",
   "Normal"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{3.8967297649677672`*^9},
 CellLabel->"In[478]:=",
 CellID->106893620,ExpressionUUID->"8fc6f897-d298-4f71-9ee7-06946e3c2682"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "3501.890311598198`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "15757.552785122674`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967297659507666`*^9},
 CellLabel->"Out[478]=",
 CellID->494385845,ExpressionUUID->"5d22c012-6039-4dba-957f-36705bb5d9a3"]
}, Open  ]],

Cell["Use other forms of geodetic position:", "ExampleText",
 TaggingRules->{},
 CellID->22994759,ExpressionUUID->"eb30dfd6-f5ae-4933-b7ef-5364fdf06a3d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RhumbLineDistanceList", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"GeoPosition", "[", 
      RowBox[{"{", 
       RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
     RowBox[{"GeoPositionXYZ", "[", 
      RowBox[{"{", 
       RowBox[{"5.19*^6", ",", "3.00*^6", ",", "2.20*^6"}], "}"}], "]"}], ",", 
     RowBox[{"GeoGridPosition", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"1", ",", "1"}], "}"}], ",", "\"\<Albers\>\""}], "]"}]}], 
    "}"}], "]"}], "//", "Normal"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{3.896729768248767*^9},
 CellLabel->"In[510]:=",
 CellID->497605117,ExpressionUUID->"5d8df8e0-5d20-4eab-ab41-75deaefbee40"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "3967.6591737495637`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "5763.604583070354`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967297700817657`*^9, 3.8967303044340787`*^9},
 CellLabel->"Out[510]=",
 CellID->247407665,ExpressionUUID->"916bdf11-1862-4e12-9ce6-cf7862eba365"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "6ee2e12e-7f20-4e21-916b-b0133570013e"],
  $Line = 0; Null]], "ExampleDelimiter",
 TaggingRules->{},
 CellID->383708414,ExpressionUUID->"834d388b-7c22-4d00-8447-d37ed24b03e5"],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["Entity"]], "paclet:ref/Entity"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "3fa7940e-0da5-4c65-9c6d-aca530e1eaab"],
 " objects:"
}], "ExampleText",
 TaggingRules->{},
 CellID->161497331,ExpressionUUID->"d197bbc6-579c-4b9e-ac23-115faa69d5d1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GeoDistanceList", "[", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"Lisbon\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             RowBox[{"\"Lisbon\"", ",", "\"Lisboa\"", ",", "\"Portugal\""}], 
             "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Lisbon\\\", \\\"Lisboa\\\", \
\\\"Portugal\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     TemplateBox[{"\"Madrid\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             RowBox[{"\"Madrid\"", ",", "\"Madrid\"", ",", "\"Spain\""}], 
             "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Madrid\\\", \\\"Madrid\\\", \
\\\"Spain\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     TemplateBox[{"\"Paris\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             RowBox[{"\"Paris\"", ",", "\"IleDeFrance\"", ",", "\"France\""}],
              "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Paris\\\", \\\"IleDeFrance\\\", \
\\\"France\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     TemplateBox[{"\"Vienna\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             RowBox[{"\"Vienna\"", ",", "\"Vienna\"", ",", "\"Austria\""}], 
             "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Vienna\\\", \\\"Vienna\\\", \\\"Austria\\\
\"}]\"", "\"city\""},
      "Entity"]}], "}"}], "]"}], "//", "Normal"}]], "Input",
 TaggingRules->{},
 CellLabel->"In[512]:=",
 CellID->539058006,ExpressionUUID->"1b544662-6a97-4cda-b040-09b77b3d099f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "503.20012377571265`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1052.7575682839695`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1036.9827657008464`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967303271329927`*^9},
 CellLabel->"Out[512]=",
 CellID->329284332,ExpressionUUID->"70a740bc-cd39-44d1-9ffa-ea0dbab04c29"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Options", "Subsection",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->879773335,ExpressionUUID->"fae70764-c128-4c92-8071-2e5216d505c7"],

Cell[CellGroupData[{

Cell["UnitSystem", "Subsubsection",
 TaggingRules->{},
 CellChangeTimes->{{3.896727926779908*^9, 3.8967279281923437`*^9}},
 CellID->143394,ExpressionUUID->"d546b3aa-2a7a-46fe-950b-528b7fef87b1"],

Cell["The default unit of the result is \"Metric\":", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.896727790789649*^9, 3.8967277958208327`*^9}},
 CellID->27989308,ExpressionUUID->"462b990b-40a3-4be9-903e-e4465a05c06c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RhumbLineDistanceList", "[", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"San Francisco\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"SanFrancisco\"", ",", "\"California\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"SanFrancisco\\\", \\\"California\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     TemplateBox[{"\"Chicago\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"Chicago\"", ",", "\"Illinois\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Chicago\\\", \\\"Illinois\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     TemplateBox[{"\"New York City\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"]}], "}"}], "]"}], "//", "Normal"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{3.896727805798932*^9},
 CellLabel->"In[529]:=",
 CellID->188814731,ExpressionUUID->"775e004c-c655-414a-b8b3-5b08ac1c3722"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "3009.3513400434945`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1159.1981366949713`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967278066599145`*^9, 3.8967278382979765`*^9, 
  3.896730351248149*^9, 3.8967315016619596`*^9},
 CellLabel->"Out[529]=",
 CellID->120535189,ExpressionUUID->"9becdba2-be92-4f0e-986a-e4b14d5851e9"]
}, Open  ]],

Cell["Change to a different system:", "ExampleText",
 TaggingRules->{},
 CellID->974392002,ExpressionUUID->"4844132c-3e82-452e-b3c5-f07b85f901b8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GeoDistanceList", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      TemplateBox[{"\"San Francisco\"", 
        RowBox[{"Entity", "[", 
          RowBox[{"\"City\"", ",", 
            RowBox[{"{", 
              
              RowBox[{"\"SanFrancisco\"", ",", "\"California\"", ",", 
                "\"UnitedStates\""}], "}"}]}], "]"}], 
        "\"Entity[\\\"City\\\", {\\\"SanFrancisco\\\", \\\"California\\\", \\\
\"UnitedStates\\\"}]\"", "\"city\""},
       "Entity"], ",", 
      TemplateBox[{"\"Chicago\"", 
        RowBox[{"Entity", "[", 
          RowBox[{"\"City\"", ",", 
            RowBox[{"{", 
              
              RowBox[{"\"Chicago\"", ",", "\"Illinois\"", ",", 
                "\"UnitedStates\""}], "}"}]}], "]"}], 
        "\"Entity[\\\"City\\\", {\\\"Chicago\\\", \\\"Illinois\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
       "Entity"], ",", 
      TemplateBox[{"\"New York City\"", 
        RowBox[{"Entity", "[", 
          RowBox[{"\"City\"", ",", 
            RowBox[{"{", 
              
              RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", 
                "\"UnitedStates\""}], "}"}]}], "]"}], 
        "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
       "Entity"]}], "}"}], ",", 
    RowBox[{"UnitSystem", "\[Rule]", "\"\<Imperial\>\""}]}], "]"}], "//", 
  "Normal"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8967278522409425`*^9, 3.8967278629132133`*^9}, {
  3.8967278942582464`*^9, 3.896727895130682*^9}},
 CellLabel->"In[530]:=",
 CellID->1562233402,ExpressionUUID->"12da0ebf-0c5c-428d-88f7-f02dd5160875"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"1857.9325298076099`", "\"mi\"", "miles", "\"Miles\""},
    "Quantity"], ",", 
   TemplateBox[{"719.539343295747`", "\"mi\"", "miles", "\"Miles\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.896727854016167*^9, 3.8967279161259546`*^9, 
  3.89673035273215*^9, 3.8967315038940525`*^9},
 CellLabel->"Out[530]=",
 CellID->56957701,ExpressionUUID->"364d80f3-8315-46dc-bff0-51e916b36e62"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["Applications", "Subsection",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->542143288,ExpressionUUID->"2a471306-eab7-4d0f-aefc-b385414c12c1"],

Cell[CellGroupData[{

Cell["Properties and Relations", "Subsection",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->727494039,ExpressionUUID->"67636522-ad2c-4c91-9d03-40fbd86c0f6e"],

Cell[TextData[{
 "RhumbLineDistanceList is basically equivalent to a combination of ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["Subsequences"]], "paclet:ref/Subsequences"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "8a02b6b3-4eab-46a6-8b38-707b0d13f19f"],
 " and RhumbLineDistance:"
}], "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.89672759968351*^9, 3.8967276061237893`*^9}},
 CellID->245965071,ExpressionUUID->"38cccbc0-0e21-49f3-8597-ce30df45161e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"locs", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"GeoPosition", "[", 
     RowBox[{"{", 
      RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
    RowBox[{"GeoPosition", "[", 
     RowBox[{"{", 
      RowBox[{"20", ",", "10"}], "}"}], "]"}], ",", 
    RowBox[{"GeoPosition", "[", 
     RowBox[{"{", 
      RowBox[{"40", ",", 
       RowBox[{"-", "10"}]}], "}"}], "]"}]}], "}"}]}]], "Input",
 TaggingRules->{},
 CellLabel->"In[531]:=",
 CellID->1092545360,ExpressionUUID->"e01d10e4-9962-450a-9b28-6e48e8a8e9de"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"GeoPosition", "[", 
    RowBox[{"{", 
     RowBox[{"0", ",", "0"}], "}"}], "]"}], ",", 
   RowBox[{"GeoPosition", "[", 
    RowBox[{"{", 
     RowBox[{"20", ",", "10"}], "}"}], "]"}], ",", 
   RowBox[{"GeoPosition", "[", 
    RowBox[{"{", 
     RowBox[{"40", ",", 
      RowBox[{"-", "10"}]}], "}"}], "]"}]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.89672760821979*^9, 3.896731511152196*^9},
 CellLabel->"Out[531]=",
 CellID->196855091,ExpressionUUID->"ab0c856d-1ca8-4aff-98c8-7af68ed8c7a8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   TagBox[
    TagBox[
     DynamicModuleBox[{Typeset`open = False}, 
      FrameBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[GridBox[{
              {
               StyleBox[
                StyleBox[
                 AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                  BoxBaselineShift->-0.25,
                  BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                 
                 FontColor->RGBColor[
                  0.8745098039215686, 0.2784313725490196, 
                   0.03137254901960784]],
                ShowStringCharacters->False,
                FontFamily->"Source Sans Pro Black",
                FontSize->0.6538461538461539 Inherited,
                FontWeight->"Heavy",
                PrivateFontOptions->{"OperatorSubstitution"->False}], 
               StyleBox[
                RowBox[{
                 StyleBox["RhumbLineDistance", "ResourceFunctionLabel"], " "}],
                ShowAutoStyles->False,
                ShowStringCharacters->False,
                FontSize->Rational[12, 13] Inherited,
                FontColor->GrayLevel[0.1]]}
             },
             GridBoxSpacings->{"Columns" -> {{0.25}}}],
            Alignment->Left,
            BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
            BaselinePosition->Baseline,
            FrameMargins->{{3, 0}, {0, 0}}], 
           ItemBox[
            PaneBox[
             TogglerBox[Dynamic[Typeset`open], {True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeCloser"],
               ImageSizeCache->{11., {2., 9.}}], False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeOpener"],
               ImageSizeCache->{11., {2., 9.}}]},
              Appearance->None,
              BaselinePosition->Baseline,
              ContentPadding->False,
              FrameMargins->0],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{1, 1}, {0, 0}}],
            Frame->{{
               RGBColor[
               0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                0.5], False}, {False, False}}]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
        GridBox[{
          {GridBox[{
             {
              PaneBox[GridBox[{
                 {
                  StyleBox[
                   AdjustmentBox[
                    
                    StyleBox["\<\"[\[FilledSmallSquare]]\"\>", 
                    "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}],
                   ShowStringCharacters->False,
                   FontFamily->"Source Sans Pro Black",
                   FontSize->0.6538461538461539 Inherited,
                   FontWeight->"Heavy",
                   PrivateFontOptions->{"OperatorSubstitution"->False}], 
                  StyleBox[
                   RowBox[{
                    StyleBox["RhumbLineDistance", "ResourceFunctionLabel"], 
                    " "}],
                   ShowAutoStyles->False,
                   ShowStringCharacters->False,
                   FontSize->Rational[12, 13] Inherited,
                   FontColor->GrayLevel[0.1]]}
                },
                GridBoxSpacings->{"Columns" -> {{0.25}}}],
               Alignment->Left,
               BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
               BaselinePosition->Baseline,
               FrameMargins->{{3, 0}, {0, 0}}], 
              ItemBox[
               PaneBox[
                TogglerBox[Dynamic[Typeset`open], {True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeCloser"]], False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeOpener"]]},
                 Appearance->None,
                 BaselinePosition->Baseline,
                 ContentPadding->False,
                 FrameMargins->0],
                Alignment->Left,
                BaselinePosition->Baseline,
                FrameMargins->{{1, 1}, {0, 0}}],
               Frame->{{
                  RGBColor[
                  0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                   0.5], False}, {False, False}}]}
            },
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
          {
           StyleBox[
            PaneBox[GridBox[{
               {
                RowBox[{
                 TagBox["\<\"Version (latest): \"\>",
                  "IconizedLabel"], " ", 
                 TagBox["\<\"1.0.0\"\>",
                  "IconizedItem"]}]},
               {
                TagBox[
                 
                 TemplateBox[{
                  "\"Documentation \[RightGuillemet]\"", 
                   "https://resources.wolframcloud.com/FunctionRepository/\
resources/57ed03fa-96d6-44e5-b12c-9f2a20aed845/"},
                  "HyperlinkURL"],
                 "IconizedItem"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
            FontFamily->"Roboto",
            FontSize->11]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
              GrayLevel[0.8]}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open],
        BaselinePosition->Baseline,
        ImageSize->Automatic],
       Background->RGBColor[
        0.9686274509803922, 0.9764705882352941, 0.984313725490196],
       BaselinePosition->Baseline,
       DefaultBaseStyle->{},
       FrameMargins->{{0, 0}, {1, 0}},
       FrameStyle->RGBColor[
        0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
       RoundingRadius->4]],
     #& ,
     TagBoxNote->" "],
    {"FunctionResourceBox", 
     RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
     "RhumbLineDistance"},
    TagBoxNote->"FunctionResourceBox"],
   ResourceFunction[
    ResourceObject[<|
     "Name" -> "RhumbLineDistance", "ShortName" -> "RhumbLineDistance", 
      "UUID" -> "57ed03fa-96d6-44e5-b12c-9f2a20aed845", "ResourceType" -> 
      "Function", "Version" -> "1.0.0", "Description" -> 
      "Find the distance between two geographical locations along a rhumb \
line", "RepositoryLocation" -> 
      URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
      "SymbolName" -> 
      "FunctionRepository`$16221af3d3c340c4a2128043e8fb9e38`\
RhumbLineDistance", "FunctionLocation" -> 
      CloudObject[
       "https://www.wolframcloud.com/obj/80efd290-9d04-4f39-8dc2-\
74780cdb9e47"]|>, {
     ResourceSystemBase -> 
      "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
   Selectable->False], "@@@", 
  RowBox[{"Subsequences", "[", 
   RowBox[{"locs", ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8967276240895195`*^9, 3.896727626885111*^9}},
 CellLabel->"In[532]:=",
 CellID->1899620692,ExpressionUUID->"b331e3c9-ae5b-48f2-9a76-48771eaa66da"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "2466.523688305327`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "2928.536302132377`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.8967276279746428`*^9, 3.896727651887099*^9}, 
   3.896731512639163*^9},
 CellLabel->"Out[532]=",
 CellID->97990527,ExpressionUUID->"5fe0f899-9478-4595-987e-cf88f50f3de3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"%", "==", 
  RowBox[{"RhumbLineDistanceList", "[", "locs", "]"}]}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8967276312829337`*^9, 3.896727646743475*^9}},
 CellLabel->"In[533]:=",
 CellID->1880179229,ExpressionUUID->"5842cc7d-6b6e-4460-8deb-c7bcf0c6691a"],

Cell[BoxData["True"], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.896727636981883*^9, 3.8967276531111*^9}, 
   3.8967315145299215`*^9},
 CellLabel->"Out[533]=",
 CellID->315253,ExpressionUUID->"9cb9658e-5387-40f7-9461-4c241e7178af"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "c758f189-40c5-41bb-9d6a-477c293d5ee5"],
  $Line = 0; Null]], "ExampleDelimiter",
 TaggingRules->{},
 CellID->616506299,ExpressionUUID->"47050b30-dd08-4eac-902b-ae84f9d003ec"],

Cell["\<\
For the moment, the definition of RhumbLineDistance in this notebook is \
different than in the Function Repository, so they are actually not \
equivalent:\
\>", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8967322515744724`*^9, 3.896732283451335*^9}},
 CellID->91022651,ExpressionUUID->"d3db3595-a77e-4fcc-ae58-d8b1efa5fb16"],

Cell[BoxData[
 RowBox[{
  RowBox[{"locs", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
      "\"\<46\[Degree]25'12''N\>\"", ",", "\"\<21\[Degree]1'12''W\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "\"\<30\[Degree]13'48.''S\>\"", ",", "\"\<40\[Degree]30'36.''E\>\""}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"\"\<40d20m12s N\>\"", ",", "\"\<112d50m W\>\""}], "}"}]}], 
    "}"}]}], ";"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8967323078043857`*^9, 3.8967323090334225`*^9}},
 CellLabel->"In[534]:=",
 CellID->642939373,ExpressionUUID->"c5aa5b2d-bfa5-4d05-864e-ce8e12b14a22"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "@", 
  RowBox[{"RhumbLineDistanceList", "[", "locs", "]"}]}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.896732316249176*^9, 3.89673234086602*^9}},
 CellLabel->"In[537]:=",
 CellID->35510273,ExpressionUUID->"04fb131b-fde5-414e-b2a0-3ebe05b94944"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "10530.791044730959`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "17696.134966278416`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.8967323270066767`*^9, 3.896732341000535*^9}},
 CellLabel->"Out[537]=",
 CellID->812422227,ExpressionUUID->"755d1685-3082-44f9-8461-5c46f3132222"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   TagBox[
    TagBox[
     DynamicModuleBox[{Typeset`open = False}, 
      FrameBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[GridBox[{
              {
               StyleBox[
                StyleBox[
                 AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                  BoxBaselineShift->-0.25,
                  BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                 
                 FontColor->RGBColor[
                  0.8745098039215686, 0.2784313725490196, 
                   0.03137254901960784]],
                ShowStringCharacters->False,
                FontFamily->"Source Sans Pro Black",
                FontSize->0.6538461538461539 Inherited,
                FontWeight->"Heavy",
                PrivateFontOptions->{"OperatorSubstitution"->False}], 
               StyleBox[
                RowBox[{
                 StyleBox["RhumbLineDistance", "ResourceFunctionLabel"], " "}],
                ShowAutoStyles->False,
                ShowStringCharacters->False,
                FontSize->Rational[12, 13] Inherited,
                FontColor->GrayLevel[0.1]]}
             },
             GridBoxSpacings->{"Columns" -> {{0.25}}}],
            Alignment->Left,
            BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
            BaselinePosition->Baseline,
            FrameMargins->{{3, 0}, {0, 0}}], 
           ItemBox[
            PaneBox[
             TogglerBox[Dynamic[Typeset`open], {True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeCloser"],
               ImageSizeCache->{11., {2., 9.}}], False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeOpener"],
               ImageSizeCache->{11., {2., 9.}}]},
              Appearance->None,
              BaselinePosition->Baseline,
              ContentPadding->False,
              FrameMargins->0],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{1, 1}, {0, 0}}],
            Frame->{{
               RGBColor[
               0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                0.5], False}, {False, False}}]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
        GridBox[{
          {GridBox[{
             {
              PaneBox[GridBox[{
                 {
                  StyleBox[
                   AdjustmentBox[
                    
                    StyleBox["\<\"[\[FilledSmallSquare]]\"\>", 
                    "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}],
                   ShowStringCharacters->False,
                   FontFamily->"Source Sans Pro Black",
                   FontSize->0.6538461538461539 Inherited,
                   FontWeight->"Heavy",
                   PrivateFontOptions->{"OperatorSubstitution"->False}], 
                  StyleBox[
                   RowBox[{
                    StyleBox["RhumbLineDistance", "ResourceFunctionLabel"], 
                    " "}],
                   ShowAutoStyles->False,
                   ShowStringCharacters->False,
                   FontSize->Rational[12, 13] Inherited,
                   FontColor->GrayLevel[0.1]]}
                },
                GridBoxSpacings->{"Columns" -> {{0.25}}}],
               Alignment->Left,
               BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
               BaselinePosition->Baseline,
               FrameMargins->{{3, 0}, {0, 0}}], 
              ItemBox[
               PaneBox[
                TogglerBox[Dynamic[Typeset`open], {True->
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeCloser"]], False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeOpener"]]},
                 Appearance->None,
                 BaselinePosition->Baseline,
                 ContentPadding->False,
                 FrameMargins->0],
                Alignment->Left,
                BaselinePosition->Baseline,
                FrameMargins->{{1, 1}, {0, 0}}],
               Frame->{{
                  RGBColor[
                  0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                   0.5], False}, {False, False}}]}
            },
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
          {
           StyleBox[
            PaneBox[GridBox[{
               {
                RowBox[{
                 TagBox["\<\"Version (latest): \"\>",
                  "IconizedLabel"], " ", 
                 TagBox["\<\"1.0.0\"\>",
                  "IconizedItem"]}]},
               {
                TagBox[
                 
                 TemplateBox[{
                  "\"Documentation \[RightGuillemet]\"", 
                   "https://resources.wolframcloud.com/FunctionRepository/\
resources/57ed03fa-96d6-44e5-b12c-9f2a20aed845/"},
                  "HyperlinkURL"],
                 "IconizedItem"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
            FontFamily->"Roboto",
            FontSize->11]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
              GrayLevel[0.8]}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open],
        BaselinePosition->Baseline,
        ImageSize->Automatic],
       Background->RGBColor[
        0.9686274509803922, 0.9764705882352941, 0.984313725490196],
       BaselinePosition->Baseline,
       DefaultBaseStyle->{},
       FrameMargins->{{0, 0}, {1, 0}},
       FrameStyle->RGBColor[
        0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
       RoundingRadius->4]],
     #& ,
     TagBoxNote->" "],
    {"FunctionResourceBox", 
     RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
     "RhumbLineDistance"},
    TagBoxNote->"FunctionResourceBox"],
   ResourceFunction[
    ResourceObject[<|
     "Name" -> "RhumbLineDistance", "ShortName" -> "RhumbLineDistance", 
      "UUID" -> "57ed03fa-96d6-44e5-b12c-9f2a20aed845", "ResourceType" -> 
      "Function", "Version" -> "1.0.0", "Description" -> 
      "Find the distance between two geographical locations along a rhumb \
line", "RepositoryLocation" -> 
      URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
      "SymbolName" -> 
      "FunctionRepository`$16221af3d3c340c4a2128043e8fb9e38`\
RhumbLineDistance", "FunctionLocation" -> 
      CloudObject[
       "https://www.wolframcloud.com/obj/80efd290-9d04-4f39-8dc2-\
74780cdb9e47"]|>, {
     ResourceSystemBase -> 
      "https://www.wolframcloud.com/obj/resourcesystem/api/1.0"}]],
   Selectable->False], "@@@", 
  RowBox[{"Subsequences", "[", 
   RowBox[{"locs", ",", 
    RowBox[{"{", "2", "}"}]}], "]"}]}]], "Input",
 TaggingRules->{},
 CellLabel->"In[536]:=",
 CellID->691967810,ExpressionUUID->"e70601f1-f76c-44f9-a8c7-b5d2c19581ae"],

Cell[BoxData[
 TemplateBox[{
  "GeoPath", "invspty", 
   "\"\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"\\\\\
\\\"46\[Degree]25'12''N\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"21\[Degree]1'12''W\\\\\\\"\\\"}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{\\\"\\\\\\\"30\[Degree]13'48.''S\\\\\\\"\\\", \
\\\",\\\", \\\"\\\\\\\"40\[Degree]30'36.''E\\\\\\\"\\\"}], \\\"}\\\"}]}], \
\\\"}\\\"}]\\) is not a valid specification for a geo path of type \
\\!\\(\\*RowBox[{\\\"\\\\\\\"RhumbLine\\\\\\\"\\\"}]\\).\"", 2, 536, 67, 
   34146917596968182656, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 TaggingRules->{},
 CellChangeTimes->{3.896732334160715*^9},
 CellLabel->"During evaluation of In[536]:=",
 CellID->38557190,ExpressionUUID->"a18ad59d-4df5-47d2-8294-497269df686b"],

Cell[BoxData[
 TemplateBox[{
  "GeoPath", "invspty", 
   "\"\\!\\(\\*RowBox[{\\\"{\\\", RowBox[{RowBox[{\\\"{\\\", RowBox[{\\\"\\\\\
\\\"30\[Degree]13'48.''S\\\\\\\"\\\", \\\",\\\", \
\\\"\\\\\\\"40\[Degree]30'36.''E\\\\\\\"\\\"}], \\\"}\\\"}], \\\",\\\", \
RowBox[{\\\"{\\\", RowBox[{\\\"\\\\\\\"40d20m12s N\\\\\\\"\\\", \\\",\\\", \\\
\"\\\\\\\"112d50m W\\\\\\\"\\\"}], \\\"}\\\"}]}], \\\"}\\\"}]\\) is not a \
valid specification for a geo path of type \
\\!\\(\\*RowBox[{\\\"\\\\\\\"RhumbLine\\\\\\\"\\\"}]\\).\"", 2, 536, 68, 
   34146917596968182656, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 TaggingRules->{},
 CellChangeTimes->{3.8967323344367747`*^9},
 CellLabel->"During evaluation of In[536]:=",
 CellID->504947605,ExpressionUUID->"1d216ed8-1d70-40f2-8c1d-cdb7c095b04f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"0", "\"m\"", "meters", "\"Meters\""},
    "Quantity"], ",", 
   TemplateBox[{"0", "\"m\"", "meters", "\"Meters\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967323347098026`*^9},
 CellLabel->"Out[536]=",
 CellID->106909539,ExpressionUUID->"0d00d97d-d994-46f2-82dd-1316abc5933d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "d80ff7d3-7c40-4948-a2d8-bcba897cbf73"],
  $Line = 0; Null]], "ExampleDelimiter",
 TaggingRules->{},
 CellID->1494212479,ExpressionUUID->"e59285f0-ee56-4a69-ba3e-4623991f2556"],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"RhumbLineDistanceList", "[", 
   RowBox[{"{", 
    StyleBox["loc", "TI"], "}"}], "]"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "01321ea4-7362-4ac3-b34b-89534ef1d152"],
 " returns an empty list:"
}], "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.8967273261461167`*^9, 3.8967273261461167`*^9}},
 CellID->21716504,ExpressionUUID->"a30c0f8b-03e5-4b6a-a0e9-8ebb9e1f0b72"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RhumbLineDistanceList", "[", 
  RowBox[{"{", "Here", "}"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{3.896727319864987*^9},
 CellLabel->"In[538]:=",
 CellID->1161604715,ExpressionUUID->"bf26f3d1-14a0-4222-95ed-1728d0af21ba"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.896727321249054*^9, 3.8967323506241493`*^9},
 CellLabel->"Out[538]=",
 CellID->291180193,ExpressionUUID->"cc61ec80-1672-40d9-830f-8bf58e5abcd6"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  RowBox[{"RhumbLineDistanceList", "[", 
   RowBox[{"{", "}"}], "]"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "472bada9-d934-4fc3-b851-12c57e2db376"],
 " is defined, unlike GeoDistanceList:"
}], "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.8967273309844723`*^9, 3.8967273592235775`*^9}},
 CellID->555366535,ExpressionUUID->"19f18be1-0d54-4e66-abe8-ae0692d28cf9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RhumbLineDistanceList", "[", 
  RowBox[{"{", "}"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{3.8967273323623977`*^9},
 CellLabel->"In[539]:=",
 CellID->1511391981,ExpressionUUID->"c4cb0925-f4a8-4dd5-97d0-aee26e430891"],

Cell[BoxData[
 RowBox[{"{", "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967273338092203`*^9, 3.8967323522830667`*^9},
 CellLabel->"Out[539]=",
 CellID->883649662,ExpressionUUID->"b665451c-5cd3-4642-82d4-ec01d2280562"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GeoDistanceList", "[", 
  RowBox[{"{", "}"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.896727360740988*^9, 3.896727364366108*^9}},
 CellLabel->"In[540]:=",
 CellID->417330789,ExpressionUUID->"cdab224e-34cd-4748-bc83-8567cabb38f8"],

Cell[BoxData[
 TemplateBox[{
  "GeoDistanceList", "locs", 
   "\"Argument \\!\\(\\*RowBox[{\\\"{\\\", \\\"}\\\"}]\\) at position \
\\!\\(\\*RowBox[{\\\"1\\\"}]\\) does not represent a non-empty list of \
locations.\"", 2, 540, 69, 34146917596968182656, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 TaggingRules->{},
 CellChangeTimes->{3.89672736471111*^9, 3.896732354389491*^9},
 CellLabel->"During evaluation of In[540]:=",
 CellID->2344797,ExpressionUUID->"4e2be008-125b-40b6-9184-6ea787271c2b"],

Cell[BoxData[
 RowBox[{"GeoDistanceList", "[", 
  RowBox[{"{", "}"}], "]"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.896727364820075*^9, 3.896732354656609*^9},
 CellLabel->"Out[540]=",
 CellID->325203090,ExpressionUUID->"eb81229b-1456-4e16-825e-fee3bf446e11"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 InterpretationBox[Cell[
  "\t", "ExampleDelimiter",ExpressionUUID->
   "6bcdff8a-918b-4986-a7a5-0ae02c4e8840"],
  $Line = 0; Null]], "ExampleDelimiter",
 TaggingRules->{},
 CellID->621347593,ExpressionUUID->"c76e0ad2-0b7c-450d-9af9-ad5f18f441f8"],

Cell[TextData[{
 "RhumbLineDistanceList reports distances along the rhumb line. \n",
 ButtonBox["GeoSpatialDistanceList",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://resources.wolframcloud.com/FunctionRepository/resources/\
GeoSpatialDistanceList/"], None},
  ButtonNote->
   "https://resources.wolframcloud.com/FunctionRepository/resources/\
GeoSpatialDistanceList/"],
 " reports straight-line distances through space. ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["GeoDistanceList"]], "paclet:ref/GeoDistanceList"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "e609fd30-d8d6-4b5e-a66c-c708da948c38"],
 " reports geodesic distance. ",
 Cell[BoxData[
  TemplateBox[{
    Cell[
     TextData["TravelDistanceList"]], "paclet:ref/TravelDistanceList"},
   "RefLink",
   BaseStyle->{"InlineFormula"}]], "InlineFormula",
  FontFamily->"Source Sans Pro",ExpressionUUID->
  "3c289b55-20c1-466d-8a08-6b0513a4e164"],
 " reports distance by road:"
}], "ExampleText",
 TaggingRules->{},
 CellChangeTimes->{{3.896727386514166*^9, 3.8967274482709246`*^9}},
 CellID->1923503837,ExpressionUUID->"9c0d23a6-fa67-4322-ae8a-01724f1f8e1c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"RhumbLineDistanceList", "[", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"San Francisco\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"SanFrancisco\"", ",", "\"California\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"SanFrancisco\\\", \\\"California\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     TemplateBox[{"\"Chicago\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"Chicago\"", ",", "\"Illinois\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Chicago\\\", \\\"Illinois\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     TemplateBox[{"\"New York City\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"]}], "}"}], "]"}], "//", "Normal"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8967275280549293`*^9, 3.8967275483002825`*^9}},
 CellLabel->"In[541]:=",
 CellID->191257863,ExpressionUUID->"5ee3028f-7472-45a2-b6da-3b8a7f2aad9d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "3009.3513400434945`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1159.1981366949713`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.896727534093378*^9, 3.8967275485922813`*^9}, 
   3.89673235762632*^9},
 CellLabel->"Out[541]=",
 CellID->207110197,ExpressionUUID->"258f6045-511b-47ed-bd06-9bef36ea8e23"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  InterpretationBox[
   TagBox[
    TagBox[
     DynamicModuleBox[{Typeset`open = False}, 
      FrameBox[
       PaneSelectorBox[{False->GridBox[{
          {
           PaneBox[GridBox[{
              {
               StyleBox[
                StyleBox[
                 AdjustmentBox["\<\"[\[FilledSmallSquare]]\"\>",
                  BoxBaselineShift->-0.25,
                  BoxMargins->{{0, 0}, {-1, -1}}], "ResourceFunctionIcon",
                 
                 FontColor->RGBColor[
                  0.8745098039215686, 0.2784313725490196, 
                   0.03137254901960784]],
                ShowStringCharacters->False,
                FontFamily->"Source Sans Pro Black",
                FontSize->0.6538461538461539 Inherited,
                FontWeight->"Heavy",
                PrivateFontOptions->{"OperatorSubstitution"->False}], 
               StyleBox[
                RowBox[{
                 StyleBox["GeoSpatialDistanceList", "ResourceFunctionLabel"], 
                 " "}],
                ShowAutoStyles->False,
                ShowStringCharacters->False,
                FontSize->Rational[12, 13] Inherited,
                FontColor->GrayLevel[0.1]]}
             },
             GridBoxSpacings->{"Columns" -> {{0.25}}}],
            Alignment->Left,
            BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
            BaselinePosition->Baseline,
            FrameMargins->{{3, 0}, {0, 0}}], 
           ItemBox[
            PaneBox[
             TogglerBox[Dynamic[Typeset`open], {True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeCloser"],
               ImageSizeCache->{11., {2., 9.}}], False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "IconizeOpener"],
               ImageSizeCache->{11., {2., 9.}}]},
              Appearance->None,
              BaselinePosition->Baseline,
              ContentPadding->False,
              FrameMargins->0],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{1, 1}, {0, 0}}],
            Frame->{{
               RGBColor[
               0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                0.5], False}, {False, False}}]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
         GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}], True->
        GridBox[{
          {GridBox[{
             {
              PaneBox[GridBox[{
                 {
                  StyleBox[
                   AdjustmentBox[
                    
                    StyleBox["\<\"[\[FilledSmallSquare]]\"\>", 
                    "ResourceFunctionIcon",
                    
                    FontColor->RGBColor[
                    0.8745098039215686, 0.2784313725490196, 
                    0.03137254901960784]],
                    BoxBaselineShift->-0.25,
                    BoxMargins->{{0, 0}, {-1, -1}}],
                   ShowStringCharacters->False,
                   FontFamily->"Source Sans Pro Black",
                   FontSize->0.6538461538461539 Inherited,
                   FontWeight->"Heavy",
                   PrivateFontOptions->{"OperatorSubstitution"->False}], 
                  StyleBox[
                   RowBox[{
                    
                    StyleBox["GeoSpatialDistanceList", 
                    "ResourceFunctionLabel"], " "}],
                   ShowAutoStyles->False,
                   ShowStringCharacters->False,
                   FontSize->Rational[12, 13] Inherited,
                   FontColor->GrayLevel[0.1]]}
                },
                GridBoxSpacings->{"Columns" -> {{0.25}}}],
               Alignment->Left,
               BaseStyle->{LineSpacing -> {0, 0}, LineBreakWithin -> False},
               BaselinePosition->Baseline,
               FrameMargins->{{3, 0}, {0, 0}}], 
              ItemBox[
               PaneBox[
                TogglerBox[Dynamic[Typeset`open], {True->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeCloser"]], False->
                 
                 DynamicBox[FEPrivate`FrontEndResource[
                  "FEBitmaps", "IconizeOpener"]]},
                 Appearance->None,
                 BaselinePosition->Baseline,
                 ContentPadding->False,
                 FrameMargins->0],
                Alignment->Left,
                BaselinePosition->Baseline,
                FrameMargins->{{1, 1}, {0, 0}}],
               Frame->{{
                  RGBColor[
                  0.8313725490196079, 0.8470588235294118, 0.8509803921568627, 
                   0.5], False}, {False, False}}]}
            },
            BaselinePosition->{1, 1},
            GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {{0}}, "Rows" -> {{0}}}]},
          {
           StyleBox[
            PaneBox[GridBox[{
               {
                RowBox[{
                 TagBox["\<\"Version (latest): \"\>",
                  "IconizedLabel"], " ", 
                 TagBox["\<\"1.0.0\"\>",
                  "IconizedItem"]}]},
               {
                TagBox[
                 
                 TemplateBox[{
                  "\"Documentation \[RightGuillemet]\"", 
                   "https://resources.wolframcloud.com/FunctionRepository/\
resources/eceee46d-d7cb-4d22-9623-4ab8b817384e/"},
                  "HyperlinkURL"],
                 "IconizedItem"]}
              },
              DefaultBaseStyle->"Column",
              GridBoxAlignment->{"Columns" -> {{Left}}},
              
              GridBoxItemSize->{
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
             Alignment->Left,
             BaselinePosition->Baseline,
             FrameMargins->{{5, 4}, {0, 4}}], "DialogStyle",
            FontFamily->"Roboto",
            FontSize->11]}
         },
         BaselinePosition->{1, 1},
         GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
         GridBoxDividers->{"Columns" -> {{None}}, "Rows" -> {False, {
              GrayLevel[0.8]}, False}},
         GridBoxItemSize->{
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, Dynamic[
        Typeset`open],
        BaselinePosition->Baseline,
        ImageSize->Automatic],
       Background->RGBColor[
        0.9686274509803922, 0.9764705882352941, 0.984313725490196],
       BaselinePosition->Baseline,
       DefaultBaseStyle->{},
       FrameMargins->{{0, 0}, {1, 0}},
       FrameStyle->RGBColor[
        0.8313725490196079, 0.8470588235294118, 0.8509803921568627],
       RoundingRadius->4]],
     #& ,
     TagBoxNote->" "],
    {"FunctionResourceBox", 
     RGBColor[0.8745098039215686, 0.2784313725490196, 0.03137254901960784], 
     "GeoSpatialDistanceList"},
    TagBoxNote->"FunctionResourceBox"],
   ResourceFunction[
    ResourceObject[<|
     "Name" -> "GeoSpatialDistanceList", "ShortName" -> 
      "GeoSpatialDistanceList", "UUID" -> 
      "eceee46d-d7cb-4d22-9623-4ab8b817384e", "ResourceType" -> "Function", 
      "Version" -> "1.0.0", "Description" -> 
      "Get a list of spatial distances between consecutive pairs of \
locations", "RepositoryLocation" -> 
      URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
      "SymbolName" -> 
      "FunctionRepository`$f5baab64247d4d429cefa66b4103a61f`\
GeoSpatialDistanceList", "FunctionLocation" -> 
      CloudObject[
       "https://www.wolframcloud.com/obj/f8a79128-8295-4c52-be61-\
e112e831c145"]|>, ResourceSystemBase -> Automatic]],
   Selectable->False], "[", 
  RowBox[{"GeoPosition", "/@", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"San Francisco\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"SanFrancisco\"", ",", "\"California\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"SanFrancisco\\\", \\\"California\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     TemplateBox[{"\"Chicago\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"Chicago\"", ",", "\"Illinois\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Chicago\\\", \\\"Illinois\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     TemplateBox[{"\"New York City\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"]}], "}"}]}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8967274595454054`*^9, 3.8967274718276296`*^9}, {
   3.8967275032263403`*^9, 3.896727506237856*^9}, 3.8967275690172424`*^9},
 CellLabel->"In[542]:=",
 CellID->420348526,ExpressionUUID->"dfa09e5d-1b2a-4440-b1c3-b97fc96c66d5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"2.9628187419994026`*^6", "\"m\"", "meters", "\"Meters\""},
    "Quantity"], ",", 
   TemplateBox[{"1.1564010486501618`*^6", "\"m\"", "meters", "\"Meters\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{
  3.8967274761834817`*^9, {3.896727506906819*^9, 3.89672752579418*^9}, 
   3.8967275696056795`*^9, 3.896732359039426*^9},
 CellLabel->"Out[542]=",
 CellID->32541561,ExpressionUUID->"51a65837-d67d-474b-b101-3d544335900e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"GeoDistanceList", "[", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"San Francisco\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"SanFrancisco\"", ",", "\"California\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"SanFrancisco\\\", \\\"California\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     TemplateBox[{"\"Chicago\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"Chicago\"", ",", "\"Illinois\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Chicago\\\", \\\"Illinois\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     TemplateBox[{"\"New York City\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"]}], "}"}], "]"}], "//", "Normal"}]], "Input",
 TaggingRules->{},
 CellLabel->"In[543]:=",
 CellID->110166521,ExpressionUUID->"ce4f1e12-f00b-4bd9-9dcb-fd1576e618a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "2990.052569250698`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1157.9863248969507`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967274531987567`*^9, 3.896732361564105*^9},
 CellLabel->"Out[543]=",
 CellID->60173548,ExpressionUUID->"e92aa66d-fe95-43f3-82f9-6c1e64445755"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"TravelDistanceList", "[", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[{"\"San Francisco\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"SanFrancisco\"", ",", "\"California\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"SanFrancisco\\\", \\\"California\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     TemplateBox[{"\"Chicago\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"Chicago\"", ",", "\"Illinois\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Chicago\\\", \\\"Illinois\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     TemplateBox[{"\"New York City\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"NewYork\"", ",", "\"NewYork\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"NewYork\\\", \\\"NewYork\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"]}], "}"}], "]"}], "//", "Normal"}]], "Input",
 TaggingRules->{},
 CellLabel->"In[544]:=",
 CellID->1639121780,ExpressionUUID->"30da70aa-8694-485a-84f0-54ac7d81fc19"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "3435.6596969999996`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1282.4376710000001`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.896727455984833*^9, 3.896732362922672*^9},
 CellLabel->"Out[544]=",
 CellID->392299270,ExpressionUUID->"869182d8-ec0a-4c9a-8c83-766124713d41"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["Possible Issues", "Subsection",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->471245215,ExpressionUUID->"1bf0eab2-adef-4176-8309-d8a61a624877"],

Cell[CellGroupData[{

Cell["Neat Examples", "Subsection",
 TaggingRules->{},
 CellTags->"DefaultContent",
 CellID->303071976,ExpressionUUID->"56577fea-bc26-49af-aae0-580589298501"],

Cell["\<\
Compute the distances between the capitals of members of NATO:\
\>", "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.8967324190834894`*^9, 3.896732454456561*^9}},
 CellID->312720989,ExpressionUUID->"d43d95c6-b306-4578-8323-dbf18c1a2a04"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"NATOCapitals", "=", 
  RowBox[{
   TemplateBox[{"\"North Atlantic Treaty Organization\"", 
     RowBox[{"EntityClass", "[", 
       RowBox[{"\"Country\"", ",", "\"NATO\""}], "]"}], 
     "\"EntityClass[\\\"Country\\\", \\\"NATO\\\"]\"", "\"countries\""},
    "EntityClass"], "[", 
   TemplateBox[{"\"capital city\"", 
     RowBox[{"EntityProperty", "[", 
       RowBox[{"\"Country\"", ",", "\"CapitalCity\""}], "]"}], 
     "\"EntityProperty[\\\"Country\\\", \\\"CapitalCity\\\"]\""},
    "EntityProperty"], "]"}]}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8967324563311796`*^9, 3.8967324745694466`*^9}},
 CellLabel->"In[546]:=",
 CellID->40899146,ExpressionUUID->"7efe784e-76dd-4cc4-b100-652b11fff90e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{"\"Tirana\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Tirana\"", ",", "\"Tirana\"", ",", "\"Albania\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Tirana\\\", \\\"Tirana\\\", \
\\\"Albania\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Brussels\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Brussels\"", ",", "\"Brussels\"", ",", "\"Belgium\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Brussels\\\", \\\"Brussels\\\", \\\"Belgium\
\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Sofia\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Sofia\"", ",", "\"SofijaGrad\"", ",", "\"Bulgaria\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Sofia\\\", \\\"SofijaGrad\\\", \\\"Bulgaria\
\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Ottawa\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Ottawa\"", ",", "\"Ontario\"", ",", "\"Canada\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Ottawa\\\", \\\"Ontario\\\", \
\\\"Canada\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Zagreb\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Zagreb\"", ",", "\"GradZagreb\"", ",", "\"Croatia\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Zagreb\\\", \\\"GradZagreb\\\", \\\"Croatia\
\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Prague\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"Prague\"", ",", "\"Prague\"", ",", 
             "\"CzechRepublic\""}], "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Prague\\\", \\\"Prague\\\", \
\\\"CzechRepublic\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Copenhagen\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"Copenhagen\"", ",", "\"Copenhagen\"", ",", 
             "\"Denmark\""}], "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Copenhagen\\\", \\\"Copenhagen\\\", \
\\\"Denmark\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Tallinn\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Tallinn\"", ",", "\"Harju\"", ",", "\"Estonia\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Tallinn\\\", \\\"Harju\\\", \
\\\"Estonia\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Helsinki\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Helsinki\"", ",", "\"Uusimaa\"", ",", "\"Finland\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Helsinki\\\", \\\"Uusimaa\\\", \
\\\"Finland\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Paris\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Paris\"", ",", "\"IleDeFrance\"", ",", "\"France\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Paris\\\", \\\"IleDeFrance\\\", \
\\\"France\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Berlin\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Berlin\"", ",", "\"Berlin\"", ",", "\"Germany\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Berlin\\\", \\\"Berlin\\\", \
\\\"Germany\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Athens\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Athens\"", ",", "\"Attiki\"", ",", "\"Greece\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Athens\\\", \\\"Attiki\\\", \
\\\"Greece\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Budapest\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Budapest\"", ",", "\"Budapest\"", ",", "\"Hungary\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Budapest\\\", \\\"Budapest\\\", \\\"Hungary\
\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Reykjav\[IAcute]k\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"Reykjavik\"", ",", "\"Hofudhborgarsvaedhi\"", ",", 
             "\"Iceland\""}], "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Reykjavik\\\", \\\"Hofudhborgarsvaedhi\\\", \
\\\"Iceland\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Rome\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Rome\"", ",", "\"Lazio\"", ",", "\"Italy\""}], "}"}]}], 
       "]"}], "\"Entity[\\\"City\\\", {\\\"Rome\\\", \\\"Lazio\\\", \\\"Italy\
\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Riga\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Riga\"", ",", "\"Riga\"", ",", "\"Latvia\""}], "}"}]}], 
       "]"}], "\"Entity[\\\"City\\\", {\\\"Riga\\\", \\\"Riga\\\", \\\"Latvia\
\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Vilnius\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Vilnius\"", ",", "\"Vilniaus\"", ",", "\"Lithuania\""}],
            "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Vilnius\\\", \\\"Vilniaus\\\", \
\\\"Lithuania\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Luxemburg\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"Luxemburg\"", ",", "\"Luxembourg\"", ",", 
             "\"Luxembourg\""}], "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Luxemburg\\\", \\\"Luxembourg\\\", \
\\\"Luxembourg\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Skopje\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Skopje\"", ",", "\"Skopje\"", ",", "\"Macedonia\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Skopje\\\", \\\"Skopje\\\", \\\"Macedonia\\\
\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Podgorica\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"Podgorica\"", ",", "\"Podgorica\"", ",", 
             "\"Montenegro\""}], "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Podgorica\\\", \\\"Podgorica\\\", \
\\\"Montenegro\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Amsterdam\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"Amsterdam\"", ",", "\"NoordHolland\"", ",", 
             "\"Netherlands\""}], "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Amsterdam\\\", \\\"NoordHolland\\\", \
\\\"Netherlands\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Oslo\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Oslo\"", ",", "\"Oslo\"", ",", "\"Norway\""}], "}"}]}], 
       "]"}], "\"Entity[\\\"City\\\", {\\\"Oslo\\\", \\\"Oslo\\\", \\\"Norway\
\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Warsaw\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Warsaw\"", ",", "\"Mazowieckie\"", ",", "\"Poland\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Warsaw\\\", \\\"Mazowieckie\\\", \\\"Poland\
\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Lisbon\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Lisbon\"", ",", "\"Lisboa\"", ",", "\"Portugal\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Lisbon\\\", \\\"Lisboa\\\", \
\\\"Portugal\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Bucharest\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"Bucharest\"", ",", "\"Bucharest\"", ",", 
             "\"Romania\""}], "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Bucharest\\\", \\\"Bucharest\\\", \
\\\"Romania\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Bratislava\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"Bratislava\"", ",", "\"Bratislavsky\"", ",", 
             "\"Slovakia\""}], "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Bratislava\\\", \\\"Bratislavsky\\\", \
\\\"Slovakia\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Ljubljana\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"Ljubljana\"", ",", "\"Osrednjeslovenska\"", ",", 
             "\"Slovenia\""}], "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Ljubljana\\\", \\\"Osrednjeslovenska\\\", \
\\\"Slovenia\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Madrid\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Madrid\"", ",", "\"Madrid\"", ",", "\"Spain\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Madrid\\\", \\\"Madrid\\\", \\\"Spain\\\"}]\
\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Ankara\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           RowBox[{"\"Ankara\"", ",", "\"Ankara\"", ",", "\"Turkey\""}], 
           "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Ankara\\\", \\\"Ankara\\\", \
\\\"Turkey\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"London\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"London\"", ",", "\"GreaterLondon\"", ",", 
             "\"UnitedKingdom\""}], "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"London\\\", \\\"GreaterLondon\\\", \
\\\"UnitedKingdom\\\"}]\"", "\"city\""},
    "Entity"], ",", 
   TemplateBox[{"\"Washington\"", 
     RowBox[{"Entity", "[", 
       RowBox[{"\"City\"", ",", 
         RowBox[{"{", 
           
           RowBox[{"\"Washington\"", ",", "\"DistrictOfColumbia\"", ",", 
             "\"UnitedStates\""}], "}"}]}], "]"}], 
     "\"Entity[\\\"City\\\", {\\\"Washington\\\", \\\"DistrictOfColumbia\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
    "Entity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{{3.8967324665561504`*^9, 3.8967324749784465`*^9}},
 CellLabel->"Out[546]=",
 CellID->368075260,ExpressionUUID->"99c824e4-10c5-4d79-960a-6dd7c79d8dc2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RhumbLineDistanceList", "[", "NATOCapitals", "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.89673247829035*^9, 3.8967324826862016`*^9}},
 CellLabel->"In[547]:=",
 CellID->17385975,ExpressionUUID->"788a598d-19f0-4c64-8807-6663b5649874"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["QuantityArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              
              RasterBox[{{{0.66, 0.66, 0.66}, {0.49, 0.49, 0.49}, {0.74, 0.74,
                0.74}}, {{0.4, 0.4, 0.4}, {0.8, 0.8, 0.8}, {0.52, 0.52, 
               0.52}}, {{0.72, 0.72, 0.72}, {0.59, 0.59, 0.59}, {0.79, 0.79, 
               0.79}}, {{0.58, 0.58, 0.58}, {0.66, 0.66, 0.66}, {0.32, 0.32, 
               0.32}}}, {{-0.25, -0.33}, {1.25, 2.33}}, {0, 1}], {{
               Antialiasing -> False, 
                GrayLevel[0.3], 
                
                LineBox[{{{-0.25, 2.33}, {1.25, 2.33}}, {{-0.25, 1.67}, {1.25,
                  1.67}}, {{-0.25, 1.}, {1.25, 1.}}, {{-0.25, 0.33}, {1.25, 
                 0.33}}, {{-0.25, -0.33}, {1.25, -0.33}}}]}, {
               Antialiasing -> False, 
                GrayLevel[0.3], 
                
                LineBox[{{{-0.25, -0.33}, {-0.25, 2.33}}, {{0.25, -0.33}, {
                 0.25, 2.33}}, {{0.75, -0.33}, {0.75, 2.33}}, {{
                 1.25, -0.33}, {1.25, 2.33}}}]}}}, PlotRangeClipping -> True, 
             Background -> GrayLevel[0.93], 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {None, None}, FrameStyle -> {{
                Directive[
                 GrayLevel[0.2], 
                 AbsoluteThickness[1]], 
                Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]]}, {
                Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], 
                Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]]}}, FrameTicks -> {{{{-0.25, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {0.583, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {1.417, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {2.25, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {0.028, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {0.306, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {0.861, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.139, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.694, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.972, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}}, None}, {
               None, None}}, GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImagePadding -> 2, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
               Automatic}, PlotRangePadding -> {{1, 0}, {0, 0}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "30", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Unit: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"Kilometers\"", Short[#, 2]& ], "SummaryItem"]}]}},
              GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              
              RasterBox[{{{0.66, 0.66, 0.66}, {0.49, 0.49, 0.49}, {0.74, 0.74,
                0.74}}, {{0.4, 0.4, 0.4}, {0.8, 0.8, 0.8}, {0.52, 0.52, 
               0.52}}, {{0.72, 0.72, 0.72}, {0.59, 0.59, 0.59}, {0.79, 0.79, 
               0.79}}, {{0.58, 0.58, 0.58}, {0.66, 0.66, 0.66}, {0.32, 0.32, 
               0.32}}}, {{-0.25, -0.33}, {1.25, 2.33}}, {0, 1}], {{
               Antialiasing -> False, 
                GrayLevel[0.3], 
                
                LineBox[{{{-0.25, 2.33}, {1.25, 2.33}}, {{-0.25, 1.67}, {1.25,
                  1.67}}, {{-0.25, 1.}, {1.25, 1.}}, {{-0.25, 0.33}, {1.25, 
                 0.33}}, {{-0.25, -0.33}, {1.25, -0.33}}}]}, {
               Antialiasing -> False, 
                GrayLevel[0.3], 
                
                LineBox[{{{-0.25, -0.33}, {-0.25, 2.33}}, {{0.25, -0.33}, {
                 0.25, 2.33}}, {{0.75, -0.33}, {0.75, 2.33}}, {{
                 1.25, -0.33}, {1.25, 2.33}}}]}}}, PlotRangeClipping -> True, 
             Background -> GrayLevel[0.93], 
             Frame -> {{True, True}, {True, True}}, 
             FrameLabel -> {None, None}, FrameStyle -> {{
                Directive[
                 GrayLevel[0.2], 
                 AbsoluteThickness[1]], 
                Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]]}, {
                Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]], 
                Directive[
                 Thickness[Tiny], 
                 GrayLevel[0.7]]}}, FrameTicks -> {{{{-0.25, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {0.583, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {1.417, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {2.25, 
                  FormBox["\"\"", TraditionalForm], {0.25, 0}}, {0.028, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {0.306, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {0.861, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.139, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.694, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}, {1.972, 
                  FormBox["\"\"", TraditionalForm], {0.12, 0}}}, None}, {
               None, None}}, GridLinesStyle -> Directive[
               GrayLevel[0.5, 0.4]], ImagePadding -> 2, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "DefaultBoundaryStyle" -> Automatic, "DefaultPlotStyle" -> 
               Automatic}, PlotRangePadding -> {{1, 0}, {0, 0}}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "30", "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Unit: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"Kilometers\"", Short[#, 2]& ], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"MinMax: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{
                    
                    TemplateBox[{
                    "82.09953723417908`", "\"km\"", "kilometers", 
                    "\"Kilometers\""}, "Quantity", SyntaxForm -> Mod], ",", 
                    
                    TemplateBox[{
                    "7938.308733299915`", "\"km\"", "kilometers", 
                    "\"Kilometers\""}, "Quantity", SyntaxForm -> Mod]}], 
                    "}"}], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  QuantityArray[
   StructuredArray`StructuredData[{
    30}, {{1593.8055832345683`, 1705.788232548797, 7938.308733299915, 
     7151.649202195417, 489.5786512298164, 635.6010539771597, 
     839.5578344973839, 82.09953723417908, 1921.6379042351277`, 
     879.5174958421563, 1805.7002576884813`, 1124.6439874292423`, 
     3127.4566680581856`, 3340.497978329649, 1873.2647497913654`, 
     262.6323401635275, 1425.4884693208808`, 1460.9203282269561`, 
     188.16029352646208`, 1542.9132363342076`, 914.5926205149677, 
     1063.4818356321975`, 2782.656718982306, 3003.577793594877, 
     805.0101070746027, 306.65060617545583`, 1605.5350398350108`, 
     3114.467165385327, 2858.6991971277994`, 6165.79943242615}, 
     "Kilometers", {{1}}}]],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967324835965796`*^9},
 CellLabel->"Out[547]=",
 CellID->982287,ExpressionUUID->"d04fd2b0-e2d1-42f5-9003-799dc66cdb40"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "[", 
  RowBox[{"RhumbLineDistanceList", "[", "NATOCapitals", "]"}], "]"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8967324866354485`*^9, 3.896732487658141*^9}},
 CellLabel->"In[548]:=",
 CellID->196169249,ExpressionUUID->"3061e40e-1a72-4ddf-a521-dbc4d0b6fa92"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[{
    "1593.8055832345683`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1705.788232548797`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "7938.308733299915`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "7151.649202195417`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "489.5786512298164`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "635.6010539771597`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "839.5578344973839`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "82.09953723417908`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1921.6379042351277`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "879.5174958421563`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1805.7002576884813`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1124.6439874292423`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "3127.4566680581856`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "3340.497978329649`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1873.2647497913654`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "262.6323401635275`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1425.4884693208808`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1460.9203282269561`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "188.16029352646208`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1542.9132363342076`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "914.5926205149677`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1063.4818356321975`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "2782.656718982306`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "3003.577793594877`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "805.0101070746027`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "306.65060617545583`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "1605.5350398350108`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "3114.467165385327`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{
    "2858.6991971277994`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"], ",", 
   TemplateBox[{"6165.79943242615`", "\"km\"", "kilometers", "\"Kilometers\""},
    "Quantity"]}], "}"}]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967324879970527`*^9},
 CellLabel->"Out[548]=",
 CellID->80894009,ExpressionUUID->"d45cc2ba-1b6d-41b3-8118-fdf61bfbbdb4"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Source & Additional Information", "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Source & Additional Information"},
 CellTags->{"Source & Additional Information", "TemplateSection"},
 CellID->871630328,ExpressionUUID->"5d43d499-3fcc-4339-b363-5bcc933ce88a"],

Cell[CellGroupData[{

Cell[TextData[{
 "Contributed By",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Contributed By", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Enter the name of the person, people or organization that should be \
publicly credited with contributing this function.", "MoreInfoText"], 
        Background -> GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> 
        GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoContributedBy"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "fb92d4d2-7aef-42b4-87f1-36d2d765beff"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Contributed By"},
 DefaultNewCellStyle->"Text",
 CellTags->{"Contributed By", "ContributorInformation", "TemplateCellGroup"},
 CellID->771147648,ExpressionUUID->"2e62a595-55c9-4b0a-aed3-06187ca18512"],

Cell["Peter Cullen Burbery", "Text",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.896732494611371*^9, 3.8967324985466843`*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->855757352,ExpressionUUID->"d4f3058e-4dee-4241-8245-33a6a309f25f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Keywords",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Keywords", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List relevant terms (e.g. functional areas, algorithm names, related \
concepts) that should be used to include the function in search results.", 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoKeywords"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "588adb20-4da6-417e-9714-9f37de5f3c25"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Keywords"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Keywords", "TemplateCellGroup"},
 CellID->854882061,ExpressionUUID->"289a1672-d2d0-4fde-b1aa-112e7c4f7d89"],

Cell["Loxodrome", "Item",
 TaggingRules->{},
 CellID->988165412,ExpressionUUID->"c8bb59bd-a190-4cb3-9715-ae2042b5e5a1"],

Cell["Rhumb Line", "Item",
 TaggingRules->{},
 CellID->405233262,ExpressionUUID->"d109077e-b8ef-4ebc-848b-92f380183278"],

Cell["Mercator Projection", "Item",
 TaggingRules->{},
 CellID->57667937,ExpressionUUID->"0059616c-223c-4a7d-940e-262fac838172"],

Cell["Geodesy", "Item",
 TaggingRules->{},
 CellID->153831528,ExpressionUUID->"8fb9e55d-9973-435f-9e22-97e048f52c01"],

Cell["Spherical Trigonometry", "Item",
 TaggingRules->{},
 CellID->717809246,ExpressionUUID->"6af89013-975b-4f3d-8bc6-080fbb273a36"],

Cell["Navigation", "Item",
 TaggingRules->{},
 CellID->273950045,ExpressionUUID->"bc394b43-324e-4387-911d-d0b6098bdec2"],

Cell["Geography", "Item",
 TaggingRules->{},
 CellID->935370713,ExpressionUUID->"54b5839f-99e8-4266-b040-64fdf662461f"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Categories", "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Categories"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Categories", "TemplateCellGroup"},
 CellID->193940140,ExpressionUUID->"d7b80178-fe82-4a47-aad1-1b187a0958ff"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Cloud & Deployment"}], "\" \"", 
            "\"Cloud & Deployment\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Data Manipulation & Analysis"}], 
            "\" \"", "\"Data Manipulation & Analysis\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "External Interfaces & Connections"}], 
            "\" \"", "\"External Interfaces & Connections\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[
            "Geographic Data & Computation", {
             False, "Geographic Data & Computation"}], "\" \"", 
            "\"Geographic Data & Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Graphs & Networks"}], "\" \"", 
            "\"Graphs & Networks\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Images"}], "\" \"", "\"Images\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[
            False, {False, "Knowledge Representation & Natural Language"}], 
            "\" \"", "\"Knowledge Representation & Natural Language\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Notebook Documents & Presentation"}], 
            "\" \"", "\"Notebook Documents & Presentation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Repository Tools"}], "\" \"", 
            "\"Repository Tools\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Social, Cultural & Linguistic Data"}],
             "\" \"", "\"Social, Cultural & Linguistic Data\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Strings & Text"}], "\" \"", 
            "\"Strings & Text\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "System Operation & Setup"}], "\" \"", 
            "\"System Operation & Setup\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "User Interface Construction"}], 
            "\" \"", "\"User Interface Construction\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Wolfram Physics Project"}], "\" \"", 
            "\"Wolfram Physics Project\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Core Language & Structure"}], "\" \"",
             "\"Core Language & Structure\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Engineering Data & Computation"}], 
            "\" \"", "\"Engineering Data & Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Financial Data & Computation"}], 
            "\" \"", "\"Financial Data & Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Geometry", {False, "Geometry"}], "\" \"", 
            "\"Geometry\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Higher Mathematical Computation"}], 
            "\" \"", "\"Higher Mathematical Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Just For Fun"}], "\" \"", 
            "\"Just For Fun\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Machine Learning"}], "\" \"", 
            "\"Machine Learning\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Programming Utilities"}], "\" \"", 
            "\"Programming Utilities\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[
            False, {False, "Scientific and Medical Data & Computation"}], 
            "\" \"", "\"Scientific and Medical Data & Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Sound & Video"}], "\" \"", 
            "\"Sound & Video\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Symbolic & Numeric Computation"}], 
            "\" \"", "\"Symbolic & Numeric Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Time-Related Computation"}], "\" \"", 
            "\"Time-Related Computation\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Visualization & Graphics"}], "\" \"", 
            "\"Visualization & Graphics\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {"\<\"\"\>"}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxVTlsKwjAQFLHainiTHqJUCwWh0vUCabpqME1CdvOR25sgiH7NMA9mmrKGAjhqhO0Q2A\
WuYdc+Ub5wvq9oc1GUlKJnXIiqJrBdBCtZQ3n11qHnCPtWMD6sV0ipOzhW1tB9/elmHINGKs+\
zYjElVnRCE36N6oQaf518wOqwmP/BY28YvfMpmxegakyEMBGmf4cRyQYv8RYdQtkFI3PmDU1ZTKI=\
"},
 CellChangeTimes->{{3.896732540624319*^9, 3.8967325589432697`*^9}},
 CellTags->{"Categories", "Categories-Checkboxes", "CheckboxCell"},
 CellID->106874216,ExpressionUUID->"1f485f39-5d00-44c9-a653-e630b0babdd5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Related Symbols",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Related Symbols", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List up to twenty documented, system-level Wolfram Language symbols \
related to the function.", "MoreInfoText"], Background -> GrayLevel[0.95], 
        FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5,
         ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoRelatedSymbols"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "e8ff3500-3bd0-47b8-b0d0-de2d2244752f"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Related Symbols"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Related Symbols", "TemplateCellGroup"},
 CellID->525877127,ExpressionUUID->"fe517214-00bb-4c3d-930c-6568b854dd5c"],

Cell["GeoPosition", "Item",
 TaggingRules->{},
 CellID->754833275,ExpressionUUID->"5dc3b4bf-4e0c-426f-ac56-bbbe704db190"],

Cell["GeoPath", "Item",
 TaggingRules->{},
 CellID->822867338,ExpressionUUID->"f1bbd282-cda8-41a9-9a1c-36d00b2a423e"],

Cell["GeoLength", "Item",
 TaggingRules->{},
 CellChangeTimes->{{3.8967253413032928`*^9, 3.8967253413092933`*^9}},
 CellID->93970691,ExpressionUUID->"17c9c9f3-fe7a-4835-bb5d-f834a6f19af0"],

Cell["SphericalDistance", "Item",
 TaggingRules->{},
 CellChangeTimes->{{3.8967253415942926`*^9, 3.89672534447771*^9}},
 CellID->253475246,ExpressionUUID->"334933aa-0271-45c9-9da9-fcccfd018d86"],

Cell["RegionNearestDistance", "Item",
 TaggingRules->{},
 CellChangeTimes->{{3.8967253415942926`*^9, 3.89672534447771*^9}, {
  3.896732576228446*^9, 3.8967325803818693`*^9}},
 CellID->2899768,ExpressionUUID->"54f04c7b-7fd3-4299-b66e-b8c1ce06dcaf"],

Cell["SignedRegionDistance", "Item",
 TaggingRules->{},
 CellChangeTimes->{{3.8967253415942926`*^9, 3.89672534447771*^9}, {
  3.896732576228446*^9, 3.8967325927924023`*^9}},
 CellID->394121893,ExpressionUUID->"feb5ac37-6e6e-405d-a6a8-8496d7d3616f"],

Cell["RegionFarthestDistance", "Item",
 TaggingRules->{},
 CellChangeTimes->{{3.8967253415942926`*^9, 3.89672534447771*^9}, {
  3.896732576228446*^9, 3.896732604090618*^9}},
 CellID->26547206,ExpressionUUID->"fa279b68-a468-44c0-a539-26504b61343d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Related Resource Objects",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Related Resource Objects", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List the names of published resource objects from any Wolfram \
repository that are related to this function.", "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoRelatedResourceObjects"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "d9e1ee1f-a1db-4904-b0fa-1047d56f157b"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Related Resource Objects"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Related Resource Objects", "TemplateCellGroup"},
 CellID->869341850,ExpressionUUID->"5e40a451-4b02-44bf-814a-69fb5e9faef4"],

Cell["WikidataGeoPosition", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.8967326201935396`*^9, 3.8967326245502453`*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->694609509,ExpressionUUID->"f528bd23-f4c9-45c3-8c40-16c10b5a976c"],

Cell["RhumbLineDistance", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.8967326201935396`*^9, 3.8967326295487823`*^9}},
 CellID->801538,ExpressionUUID->"622223cb-4ca7-4de0-a936-0b331baf01f5"],

Cell["GeoSpatialDistance", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.8967326201935396`*^9, 3.8967326328584194`*^9}},
 CellID->160876804,ExpressionUUID->"26aed8fd-e817-41c6-82a3-a1186bbf1ec0"],

Cell["GeoSpatialDistanceList", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.8967326201935396`*^9, 3.896732636571415*^9}},
 CellID->545408684,ExpressionUUID->"15544606-ce8f-41a5-9df0-da2a01989eee"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Source/Reference Citation",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Source/Reference Citation", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Give a bibliographic-style citation for the original source of the \
function and/or its components (e.g. a published paper, algorithm, or code \
repository).", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 
        20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoSourceReferenceCitation"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "93fafd38-3a2a-477e-a8cb-3952b547b961"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Source/Reference Citation"},
 DefaultNewCellStyle->"Text",
 CellTags->{"Source/Reference Citation", "TemplateCellGroup"},
 CellID->788767010,ExpressionUUID->"e1035652-98c5-4547-9970-46a884bf61da"],

Cell["Source, reference or citation information", "Text",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->512303561,ExpressionUUID->"a9ee6453-9eb6-4318-9f9f-0be0263593d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Links",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Links", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "List additional URLs or hyperlinks for external information related \
to the function.", "MoreInfoText"], Background -> GrayLevel[0.95], 
        FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5,
         ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoLinks"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "2efb67df-1531-4e3b-8c4b-b32539937451"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Links"},
 DefaultNewCellStyle->"Item",
 CellTags->{"Links", "TemplateCellGroup"},
 CellID->341958311,ExpressionUUID->"87ab5c0b-683f-491f-aedd-ac8e8f388196"],

Cell["Link to other related material", "Item",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->938599834,ExpressionUUID->"be665c9f-7f94-4970-8e01-010126d145fa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Tests",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"VerificationTests", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Specify an optional list of tests for verifying that the function \
is working properly in any environment. Tests can be specified as \
Input/Output cell pairs or as symbolic ", 
           Cell[
            BoxData[
             StyleBox[
              TagBox[
               ButtonBox[
                StyleBox[
                "VerificationTest", "SymbolsRefLink", ShowStringCharacters -> 
                 True, FontFamily -> "Source Sans Pro"], BaseStyle -> Dynamic[
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                   "Link"}]], ButtonData -> "paclet:ref/VerificationTest", 
                ContentPadding -> False], 
               MouseAppearanceTag["LinkHand"]], ShowStringCharacters -> True, 
              FontFamily -> "Source Sans Pro"]]], 
           " expressions for including additional options."}], 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoVerificationTests"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "6c7725d3-0e39-484d-a7cb-86cccbe5b834"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "VerificationTests"},
 DefaultNewCellStyle->"Input",
 CellTags->{"TemplateCellGroup", "Tests", "VerificationTests"},
 CellID->187055128,ExpressionUUID->"8eb4d656-1c83-4fb3-ae0f-6d6802aec3ce"],

Cell["Testing the usage message:", "Text",
 CellChangeTimes->{{3.8967328224986706`*^9, 3.8967328283390694`*^9}},
 CellID->789703087,ExpressionUUID->"1ba27afe-4946-4a3c-9538-b6b74c60fa37"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"?", "RhumbLineDistanceList"}]], "Input",
 TaggingRules->{},
 CellChangeTimes->{{3.8967328171892233`*^9, 3.8967328201484995`*^9}},
 CellTags->"DefaultContent",
 CellLabel->"In[550]:=",
 CellID->770806,ExpressionUUID->"2461c128-c5ca-498a-9bcf-22ce894378c6"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"RhumbLineDistanceList[{\\!\\(\\*SubscriptBox[\
StyleBox[\\\"loc\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]]\\),\\!\\(\
\\*SubscriptBox[StyleBox[\\\"loc\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\
\\\"]]\\),\\!\\(\\*StyleBox[\\\"\[Ellipsis]\\\", \
\\\"TR\\\"]\\),\\!\\(\\*SubscriptBox[StyleBox[\\\"loc\\\", \\\"TI\\\"], \
StyleBox[\\\"n\\\", \\\"TI\\\"]]\\)}] returns the list of loxodromic \
distances between consecutive pairs of locations.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"RhumbLineDistanceList", "[", 
                    RowBox[{"locs_", ",", 
                    RowBox[{"opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"QuantityArray", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"RhumbLineDistance", "@@@", 
                    RowBox[{"Subsequences", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "&"}], ")"}], "@@", 
                    RowBox[{"GeoPosition", "[", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{"GeoPosition", "@*", "LatitudeLongitude"}], ",", 
                    "locs", ",", 
                    RowBox[{"Most", "/@", 
                    RowBox[{"Position", "[", 
                    RowBox[{"locs", ",", 
                    
                    RowBox[{"GeoPositionXYZ", "|", "GeoGridPosition", "|", 
                    "GeoPositionENU"}]}], "]"}]}]}], "]"}], "]"}]}], 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"UnitSystem", "\[Rule]", "\<\"Metric\"\>"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`RhumbLineDistanceList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"RhumbLineDistanceList[{\\!\\(\\*SubscriptBox[\
StyleBox[\\\"loc\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]]\\),\\!\\(\
\\*SubscriptBox[StyleBox[\\\"loc\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\
\\\"]]\\),\\!\\(\\*StyleBox[\\\"\[Ellipsis]\\\", \
\\\"TR\\\"]\\),\\!\\(\\*SubscriptBox[StyleBox[\\\"loc\\\", \\\"TI\\\"], \
StyleBox[\\\"n\\\", \\\"TI\\\"]]\\)}] returns the list of loxodromic \
distances between consecutive pairs of locations.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "RhumbLineDistanceList[{\!\(\*SubscriptBox[StyleBox[\"loc\", \"TI\"], \
StyleBox[\"1\", \"TR\"]]\),\!\(\*SubscriptBox[StyleBox[\"loc\", \"TI\"], \
StyleBox[\"2\", \"TR\"]]\),\!\(\*StyleBox[\"\[Ellipsis]\", \
\"TR\"]\),\!\(\*SubscriptBox[StyleBox[\"loc\", \"TI\"], StyleBox[\"n\", \
\"TI\"]]\)}] returns the list of loxodromic distances between consecutive \
pairs of locations.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, $CellContext`RhumbLineDistanceList, \
{$CellContext`RhumbLineDistanceList[
         Pattern[$CellContext`locs, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] :> QuantityArray[
         Apply[MapApply[$CellContext`RhumbLineDistance, 
           Subsequences[#, {2}]]& , 
          GeoPosition[
           MapAt[
            Composition[GeoPosition, LatitudeLongitude], $CellContext`locs, 
            Map[Most, 
             Position[$CellContext`locs, 
              Alternatives[
              GeoPositionXYZ, GeoGridPosition, GeoPositionENU]]]]]]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> {UnitSystem -> "Metric"}, 
    "Attributes" -> {}, "FullName" -> "Global`RhumbLineDistanceList"|>, 
   False]]], "Output",
 TaggingRules->{},
 CellChangeTimes->{3.8967328206890993`*^9},
 CellTags->"DefaultContent",
 CellLabel->"Out[550]=",
 CellID->37384874,ExpressionUUID->"fc133eee-c5ec-46c1-8116-5f636390b418"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"??", "RhumbLineDistanceList"}]], "Input",
 CellChangeTimes->{{3.896732830210189*^9, 3.8967328317732315`*^9}},
 CellLabel->"In[551]:=",
 CellID->81314014,ExpressionUUID->"f7c7e6fe-c53e-4d99-a08d-6ee1f5eed6c8"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"RhumbLineDistanceList[{\\!\\(\\*SubscriptBox[\
StyleBox[\\\"loc\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]]\\),\\!\\(\
\\*SubscriptBox[StyleBox[\\\"loc\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\
\\\"]]\\),\\!\\(\\*StyleBox[\\\"\[Ellipsis]\\\", \
\\\"TR\\\"]\\),\\!\\(\\*SubscriptBox[StyleBox[\\\"loc\\\", \\\"TI\\\"], \
StyleBox[\\\"n\\\", \\\"TI\\\"]]\\)}] returns the list of loxodromic \
distances between consecutive pairs of locations.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"RhumbLineDistanceList", "[", 
                    RowBox[{"locs_", ",", 
                    RowBox[{"opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"QuantityArray", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"RhumbLineDistance", "@@@", 
                    RowBox[{"Subsequences", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "&"}], ")"}], "@@", 
                    RowBox[{"GeoPosition", "[", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{"GeoPosition", "@*", "LatitudeLongitude"}], ",", 
                    "locs", ",", 
                    RowBox[{"Most", "/@", 
                    RowBox[{"Position", "[", 
                    RowBox[{"locs", ",", 
                    
                    RowBox[{"GeoPositionXYZ", "|", "GeoGridPosition", "|", 
                    "GeoPositionENU"}]}], "]"}]}]}], "]"}], "]"}]}], 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"UnitSystem", "\[Rule]", "\<\"Metric\"\>"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`RhumbLineDistanceList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"RhumbLineDistanceList[{\\!\\(\\*SubscriptBox[\
StyleBox[\\\"loc\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]]\\),\\!\\(\
\\*SubscriptBox[StyleBox[\\\"loc\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\
\\\"]]\\),\\!\\(\\*StyleBox[\\\"\[Ellipsis]\\\", \
\\\"TR\\\"]\\),\\!\\(\\*SubscriptBox[StyleBox[\\\"loc\\\", \\\"TI\\\"], \
StyleBox[\\\"n\\\", \\\"TI\\\"]]\\)}] returns the list of loxodromic \
distances between consecutive pairs of locations.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "RhumbLineDistanceList[{\!\(\*SubscriptBox[StyleBox[\"loc\", \"TI\"], \
StyleBox[\"1\", \"TR\"]]\),\!\(\*SubscriptBox[StyleBox[\"loc\", \"TI\"], \
StyleBox[\"2\", \"TR\"]]\),\!\(\*StyleBox[\"\[Ellipsis]\", \
\"TR\"]\),\!\(\*SubscriptBox[StyleBox[\"loc\", \"TI\"], StyleBox[\"n\", \
\"TI\"]]\)}] returns the list of loxodromic distances between consecutive \
pairs of locations.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, $CellContext`RhumbLineDistanceList, \
{$CellContext`RhumbLineDistanceList[
         Pattern[$CellContext`locs, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] :> QuantityArray[
         Apply[MapApply[$CellContext`RhumbLineDistance, 
           Subsequences[#, {2}]]& , 
          GeoPosition[
           MapAt[
            Composition[GeoPosition, LatitudeLongitude], $CellContext`locs, 
            Map[Most, 
             Position[$CellContext`locs, 
              Alternatives[
              GeoPositionXYZ, GeoGridPosition, GeoPositionENU]]]]]]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> {UnitSystem -> "Metric"}, 
    "Attributes" -> {}, "FullName" -> "Global`RhumbLineDistanceList"|>, 
   True]]], "Output",
 CellChangeTimes->{3.8967328322077475`*^9},
 CellLabel->"Out[551]=",
 CellID->155230973,ExpressionUUID->"64642938-91dc-49fd-ab91-4accd1dfad45"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Information", "[", "RhumbLineDistanceList", "]"}]], "Input",
 CellChangeTimes->{{3.896732832731849*^9, 3.8967328360892873`*^9}},
 CellLabel->"In[552]:=",
 CellID->32556558,ExpressionUUID->"02fcd821-74e5-4e30-9677-9edaf2385635"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = True, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"RhumbLineDistanceList[{\\!\\(\\*SubscriptBox[\
StyleBox[\\\"loc\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]]\\),\\!\\(\
\\*SubscriptBox[StyleBox[\\\"loc\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\
\\\"]]\\),\\!\\(\\*StyleBox[\\\"\[Ellipsis]\\\", \
\\\"TR\\\"]\\),\\!\\(\\*SubscriptBox[StyleBox[\\\"loc\\\", \\\"TI\\\"], \
StyleBox[\\\"n\\\", \\\"TI\\\"]]\\)}] returns the list of loxodromic \
distances between consecutive pairs of locations.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[
           TagBox[GridBox[{
              {
               StyleBox[
                TagBox[
                 TooltipBox[
                  StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                   StripOnInput->False],
                  "\"Definitions\"",
                  TooltipStyle->"TextStyling"],
                 Annotation[#, "Definitions", "Tooltip"]& ], "DialogStyle",
                StripOnInput->False]},
              {
               TemplateBox[{"\"\[ThinSpace]\"", 
                 GridBox[{{
                    RowBox[{
                    RowBox[{"RhumbLineDistanceList", "[", 
                    RowBox[{"locs_", ",", 
                    RowBox[{"opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"QuantityArray", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"RhumbLineDistance", "@@@", 
                    RowBox[{"Subsequences", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}]}], "&"}], ")"}], "@@", 
                    RowBox[{"GeoPosition", "[", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{"GeoPosition", "@*", "LatitudeLongitude"}], ",", 
                    "locs", ",", 
                    RowBox[{"Most", "/@", 
                    RowBox[{"Position", "[", 
                    RowBox[{"locs", ",", 
                    
                    RowBox[{"GeoPositionXYZ", "|", "GeoGridPosition", "|", 
                    "GeoPositionENU"}]}], "]"}]}]}], "]"}], "]"}]}], 
                    "]"}]}]}, {" "}}, 
                  GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  DefaultBaseStyle -> "Column", 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                "RowDefault"]}
             },
             DefaultBaseStyle->"Column",
             GridBoxAlignment->{"Columns" -> {{Left}}},
             
             GridBoxItemSize->{
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
            "Column"],
           FrameMargins->{{6, 0}, {3, 6}}], "\<\"\"\>"},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"UnitSystem", "\[Rule]", "\<\"Metric\"\>"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"Global`RhumbLineDistanceList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->{{6, 6}, {6, 3}}], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"],
               ImageSizeCache->{10., {3., 7.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"],
               ImageSizeCache->{10., {3., 7.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"RhumbLineDistanceList[{\\!\\(\\*SubscriptBox[\
StyleBox[\\\"loc\\\", \\\"TI\\\"], StyleBox[\\\"1\\\", \\\"TR\\\"]]\\),\\!\\(\
\\*SubscriptBox[StyleBox[\\\"loc\\\", \\\"TI\\\"], StyleBox[\\\"2\\\", \\\"TR\
\\\"]]\\),\\!\\(\\*StyleBox[\\\"\[Ellipsis]\\\", \
\\\"TR\\\"]\\),\\!\\(\\*SubscriptBox[StyleBox[\\\"loc\\\", \\\"TI\\\"], \
StyleBox[\\\"n\\\", \\\"TI\\\"]]\\)}] returns the list of loxodromic \
distances between consecutive pairs of locations.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[<|
   "ObjectType" -> "Symbol", "Usage" -> 
    "RhumbLineDistanceList[{\!\(\*SubscriptBox[StyleBox[\"loc\", \"TI\"], \
StyleBox[\"1\", \"TR\"]]\),\!\(\*SubscriptBox[StyleBox[\"loc\", \"TI\"], \
StyleBox[\"2\", \"TR\"]]\),\!\(\*StyleBox[\"\[Ellipsis]\", \
\"TR\"]\),\!\(\*SubscriptBox[StyleBox[\"loc\", \"TI\"], StyleBox[\"n\", \
\"TI\"]]\)}] returns the list of loxodromic distances between consecutive \
pairs of locations.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, $CellContext`RhumbLineDistanceList, \
{$CellContext`RhumbLineDistanceList[
         Pattern[$CellContext`locs, 
          Blank[]], 
         Pattern[$CellContext`opts, 
          OptionsPattern[]]] :> QuantityArray[
         Apply[MapApply[$CellContext`RhumbLineDistance, 
           Subsequences[#, {2}]]& , 
          GeoPosition[
           MapAt[
            Composition[GeoPosition, LatitudeLongitude], $CellContext`locs, 
            Map[Most, 
             Position[$CellContext`locs, 
              Alternatives[
              GeoPositionXYZ, GeoGridPosition, GeoPositionENU]]]]]]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> {UnitSystem -> "Metric"}, 
    "Attributes" -> {}, "FullName" -> "Global`RhumbLineDistanceList"|>, 
   True]]], "Output",
 CellChangeTimes->{3.896732836457334*^9},
 CellLabel->"Out[552]=",
 CellID->566329091,ExpressionUUID->"72da59e5-e7d3-4175-8485-5b712a6f1d36"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Compatibility",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Compatibility", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Specify any known compatibilities for your function to ensure it is \
discoverable on the correct platforms.", "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibility"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "ac361182-3b6a-44a8-9b46-7a1a915ae2d0"]
}], "Subsection",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Compatibility"},
 CellTags->{"Compatibility", "TemplateCellGroup"},
 CellID->465977791,ExpressionUUID->"4b512213-5143-408a-b27f-9e686dab1555"],

Cell[CellGroupData[{

Cell[TextData[{
 "Wolfram Language Version",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityWolframLanguageVersionRequired", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Enter required Wolfram Language Version (e.g. 12.1+).", 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {
       "SectionMoreInfoCompatibilityWolframLanguageVersionRequired"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "109b0fa1-1f36-44b0-af76-ab8e832241a1"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{
  "TemplateGroupName" -> "CompatibilityWolframLanguageVersionRequired"},
 DefaultNewCellStyle->"Text",
 FontSize->16,
 CellTags->{
  "CompatibilityWolframLanguageVersionRequired", "TemplateCellGroup", 
   "Wolfram Language Version"},
 CellID->267876551,ExpressionUUID->"aba7521a-c0eb-46fc-8c6c-f65126a41b8d"],

Cell["13.3+", "Text",
 TaggingRules->{},
 CellChangeTimes->{3.896732651292366*^9},
 CellTags->{"DefaultContent", "ScrapeDefault"},
 CellID->788185540,ExpressionUUID->"b6918564-bae3-4b21-b910-60718d99cd81"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Operating System",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityOperatingSystem", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Select all operating systems where your function is expected to \
function properly.", "MoreInfoText"], Background -> GrayLevel[0.95], 
        FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5,
         ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityOperatingSystem"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "290aaed9-d906-413c-87eb-5412e1149e56"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityOperatingSystem"},
 DefaultNewCellStyle->"Item",
 FontSize->16,
 CellTags->{
  "CompatibilityOperatingSystem", "Operating System", "TemplateCellGroup"},
 CellID->752514832,ExpressionUUID->"23a6b862-ba77-4a97-b584-a2df73a60522"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Windows", {False, "Windows"}], "\" \"", 
            "\"Windows\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["MacOSX", {False, "MacOSX"}], "\" \"", "\"Mac\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Unix", {False, "Unix"}], "\" \"", "\"Unix\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxNkNuKwkAMhsEerLDsE/gKfQipCoJLF7PL7m0PUQenM8Mkg87bmwot3iX5/\
3w5bIoSMuCoEfI6sAtcwrK6YnfD/pxQelTEsPxTprd3gvyr6Wr4h/\
TXqIc0HhgHmmznBaWnIKDZPgWzkkj/\
BJmLL9iELL69deg5wrqyg2tYtUorjrUUJTEXiCRDZcnasbLmxX6fTsWuV9y0EmX7RhPOwmqLGt+\
V8VKrw2CoSkr4PBhG77xYRjCsNiZCaAnlIx8nJBt8hz/RIRT7YLrR8wRtF2wJ"},
 CellTags->{
  "CheckboxCell", "CompatibilityOperatingSystem", 
   "CompatibilityOperatingSystem-Checkboxes"},
 CellID->470277234,ExpressionUUID->"e5ac682b-f510-46a9-a59f-527cbb72b344"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Required Features",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityFeatures", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{"Choose any other features that are ", 
           Cell[
            BoxData[
             StyleBox[
              StyleBox["required", "TI"], ShowStringCharacters -> True, 
              FontFamily -> "Source Sans Pro"]]], 
           " in order to use your function."}], "MoreInfoText"], Background -> 
        GrayLevel[0.95], FrameMargins -> 20, FrameStyle -> GrayLevel[0.9], 
        RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityFeatures"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "b469e909-da57-43ff-a48c-787113faa04a"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityFeatures"},
 DefaultNewCellStyle->"Item",
 FontSize->16,
 CellTags->{"CompatibilityFeatures", "Required Features", "TemplateCellGroup"},
 CellID->789112653,ExpressionUUID->"6f8e81af-ebe0-4aa6-b7ef-527597b44656"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Notebooks"}], "\" \"", 
            "\"Notebooks\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Parallel Kernels"}], "\" \"", 
            "\"Parallel Kernels\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[False, {False, "Cloud Access"}], "\" \"", 
            "\"Cloud Access\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxlUM1qwzAMHmuzJlDKLrv3BfIQIVugrKyl2gs4jsJMFdtY8sFvP2eDkLHb96cPSU1ZQw\
GSCOHpEsVHqWHXfqG+4zA+8PZsOCvFSXDicfPLx0fe3mKeqD6cYO/cnVdwcZ+vKigipOM7BovE/\
5Ulu2/JxeHYaI3Mf1kN5TU4j0ESvLRu8kpMb8hI6lBJDJgTu4sX4+\
xP33pDLt8GI6rPqOgUMS5G9YqEa2c+21GcLLebGg4nKxh8yJG5GKrGJog9Y37G/\
obsYtD4mTxC2UWr58w3NfBx2Q=="},
 CellTags->{
  "CheckboxCell", "CompatibilityFeatures", "CompatibilityFeatures-Checkboxes"},
 CellID->32088781,ExpressionUUID->"db1a7aa6-c03c-447c-8669-82aa71a19087"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Environments",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityEvaluationEnvironment", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
         TextData[{
          "Select all evaluation environments where your function is expected \
to be compatible. See ", 
           Cell[
            BoxData[
             StyleBox[
              TagBox[
               ButtonBox[
                StyleBox[
                "$EvaluationEnvironment", "SymbolsRefLink", 
                 ShowStringCharacters -> True, FontFamily -> 
                 "Source Sans Pro"], BaseStyle -> Dynamic[
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   "Link", FontColor -> RGBColor[0.8549, 0.39608, 0.1451]}, {
                   "Link"}]], ButtonData -> 
                "paclet:ref/$EvaluationEnvironment", ContentPadding -> False], 
               MouseAppearanceTag["LinkHand"]], ShowStringCharacters -> True, 
              FontFamily -> "Source Sans Pro"]]], " for more details."}], 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityEvaluationEnvironment"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "41123fcf-288a-4fcf-836b-2cdb091c2b05"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityEvaluationEnvironment"},
 DefaultNewCellStyle->"Item",
 FontSize->16,
 CellTags->{
  "CompatibilityEvaluationEnvironment", "Environments", "TemplateCellGroup"},
 CellID->939592672,ExpressionUUID->"a77e76e3-e77f-42f1-b753-c2212f327abf"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Session", {False, "Session"}], "\" \"", 
            
            TemplateBox[{
             "\"Session\"", "\"Local or cloud interactive session\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["WebEvaluation", {False, "WebEvaluation"}], "\" \"", 
            
            TemplateBox[{
             "\"WebEvaluation\"", 
              "\"Cloud evaluation initiated by an HTTP request\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["BatchJob", {False, "BatchJob"}], "\" \"", 
            
            TemplateBox[{"\"BatchJob\"", "\"Remote batch job\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Script", {False, "Script"}], "\" \"", 
            
            TemplateBox[{"\"Script\"", "\"Script run in batch mode\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["WebAPI", {False, "WebAPI"}], "\" \"", 
            
            TemplateBox[{
             "\"WebAPI\"", "\"API called through an HTTP request\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {"\<\"\"\>"}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"], 
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Subkernel", {False, "Subkernel"}], "\" \"", 
            
            TemplateBox[{"\"Subkernel\"", "\"Parallel or grid subkernel\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox["Scheduled", {False, "Scheduled"}], "\" \"", 
            
            TemplateBox[{"\"Scheduled\"", "\"Scheduled task\""}, 
             "PrettyTooltipTemplate"]},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]},
        {"\<\"\"\>"}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxdUdFqwzAMhK1tEtj2EXvPR3RpChmDlmqw58RRialjG0su5O/\
nlMTJ9mRJd9yd5H2awxZ4UAi7k2frOYek6FDcsL0mtPmSxJAAEkmjYQfCScuQgW9u6DQqeP3BprzXy\
tf8YIR2f64CQ3TYeoUtpB81i+7TNMGpYuxp1r0+0eYSKIv+XERkNpzeOF8FWMqI/\
sv0t120p6jTu9KO0ZcyonGb9V7p2RmLjgd4L0xvg08jleRhcS31XTqje9TjgU92nNEouj4EpWUruW5\
CtT3WijAC2QEVrpHxl4zyvabiOYe3SjM66wLlsXG210M4C2Ewe7kgGe8Efg82xD96LUbOL+VQrkA=\
"},
 CellTags->{
  "CheckboxCell", "CompatibilityEvaluationEnvironment", 
   "CompatibilityEvaluationEnvironment-Checkboxes"},
 CellID->360666327,ExpressionUUID->"d6386bf0-91a3-439c-9d88-907846899893"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[{
 "Cloud Support",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"CompatibilityCloudSupport", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Specify whether your function is expected to work in the public \
cloud.", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoCompatibilityCloudSupport"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "ab1d53a0-7449-4c63-b5dd-343cd2feba36"]
}], "Subsubsection",
 Editable->False,
 Deletable->False,
 CellMargins->{{Inherited, Inherited}, {4, 6}},
 TaggingRules->{"TemplateGroupName" -> "CompatibilityCloudSupport"},
 DefaultNewCellStyle->"Text",
 FontSize->16,
 CellTags->{"Cloud Support", "CompatibilityCloudSupport", "TemplateCellGroup"},
 CellID->624931977,ExpressionUUID->"3383d6ec-4b97-47d0-a77c-1dc33a7d5d05"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     TagBox[GridBox[{
        {
         StyleBox[
          TemplateBox[{
            CheckboxBox[True, {False, True}], "\" \"", 
            "\"Supported in cloud\""},
           "RowDefault"],
          StripOnInput->False,
          FontSize->12]}
       },
       DefaultBaseStyle->"Column",
       GridBoxAlignment->{"Columns" -> {{Left}}},
       GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
      "Column"]}
   },
   AutoDelete->False,
   BaseStyle->{"ControlStyle"},
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Top}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
   GridBoxSpacings->{"Columns" -> {{2}}}],
  "Grid"]], "Output",
 Editable->False,
 Deletable->False,
 TaggingRules->{
  "CheckboxData" -> 
   "OEM6eJxNjkEKwkAMRVGqVhAX7tx5gR5Cq0JBqBgvUNsUB6eTYZIsentnQMVdyH/vJ/\
u8gBnIaBHmtYpXKWBRPrF9YddPOLsYFs7uQTFyleDA320/\
5eym0duAek9BsNsZt2stafc18msgj0FG2JY0+EbMw1gjY5mgjxbv1V4MOU6N/\
82cnzojzSNOs3NjGX/B8ogW/5P0NFkdHJeTAtaVEww+RCQVw+\
JAZLFxBaxuyKShxfvoEfKzujYRb6FXWpA="},
 CellTags->{
  "CheckboxCell", "CompatibilityCloudSupport", 
   "CompatibilityCloudSupport-Checkboxes"},
 CellID->818043737,ExpressionUUID->"5b2a4e49-faf2-4814-97df-1c2ad63b7274"]
}, Closed]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Author Notes",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Author Notes", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "This section, when used, will appear near the bottom of the \
published resource. Content displayed in this section can include background, \
possible improvements, additional information and/or implementation details \
that are otherwise beyond the scope of the function documentation.", 
         "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 20, 
        FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoAuthorNotes"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "c97aa092-adc5-423b-a412-3d2dd8774e05"]
}], "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Author Notes"},
 DefaultNewCellStyle->"Text",
 CellTags->{"Author Notes", "TemplateCellGroup"},
 CellID->897529167,ExpressionUUID->"d46a59ce-1bae-4e61-8baa-7ffd81793d1b"],

Cell[TextData[{
 "Ideas for future research including adding support for different distance \
functions including \[OpenCurlyDoubleQuote]Boundary\[CloseCurlyDoubleQuote], \
corresponding to minimum distance between any points in regions, and \
\[OpenCurlyDoubleQuote]SignedBoundary\[CloseCurlyDoubleQuote], corresponding \
to distance to boundary, negative for interior points. I think \
\[OpenCurlyDoubleQuote]Center\[CloseCurlyDoubleQuote] is used by default, \
which corresponds to distance between centers of regions. I tried using \
RegionNearestDistance which as of 13.3 supports ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["region", "TI"], 
   StyleBox["1", "TR"]]],ExpressionUUID->
  "7761f935-c30d-487f-8d35-bac3246f46ba"],
 " and ",
 Cell[BoxData[
  SubscriptBox[
   StyleBox["region", "TI"], 
   StyleBox["2", "TR"]]],ExpressionUUID->
  "c6c710f6-cc6d-4110-a523-b217b5fcbe9c"],
 ", not just a region and a point, but the problem was what function it was \
using to compute the distance. I think it was using the geodesic distance \
over the ellipsoid. The problem was that it differed slightly from \
GeoDistance for some reason."
}], "Text",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.8967315415543737`*^9, 3.896731746596349*^9}, {
  3.896732813161542*^9, 3.8967328132565413`*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->908162033,ExpressionUUID->"9c02f106-6694-48be-a569-e6f95846be61"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"GeoDistance", "[", 
    RowBox[{
     TemplateBox[{"\"Illinois, United States\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"AdministrativeDivision\"", ",", 
           RowBox[{"{", 
             RowBox[{"\"Illinois\"", ",", "\"UnitedStates\""}], "}"}]}], 
         "]"}], "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Illinois\\\", \
\\\"UnitedStates\\\"}]\"", "\"administrative division\""},
      "Entity"], ",", 
     TemplateBox[{"\"Florida, United States\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"AdministrativeDivision\"", ",", 
           RowBox[{"{", 
             RowBox[{"\"Florida\"", ",", "\"UnitedStates\""}], "}"}]}], "]"}],
        "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Florida\\\", \
\\\"UnitedStates\\\"}]\"", "\"administrative division\""},
      "Entity"], ",", 
     RowBox[{"DistanceFunction", "\[Rule]", "\"\<Boundary\>\""}]}], "]"}], 
   " ", 
   RowBox[{"(", 
    TemplateBox[{
     "678.7595598951613`", "\"km\"", "kilometers", "\"Kilometers\""},
     "Quantity"], ")"}], " ", "should", " ", "be", " ", "equivalent", " ", 
   "to", " ", 
   RowBox[{"Quantity", "[", 
    RowBox[{
     RowBox[{"RegionDistance", "[", 
      RowBox[{
       RowBox[{"Region", "[", 
        RowBox[{
         TemplateBox[{"\"Illinois, United States\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"AdministrativeDivision\"", ",", 
               RowBox[{"{", 
                 RowBox[{"\"Illinois\"", ",", "\"UnitedStates\""}], "}"}]}], 
             "]"}], "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Illinois\\\
\", \\\"UnitedStates\\\"}]\"", "\"administrative division\""},
          "Entity"], "[", "\"\<Polygon\>\"", "]"}], "]"}], ",", 
       RowBox[{"Region", "[", 
        RowBox[{
         TemplateBox[{"\"Florida, United States\"", 
           RowBox[{"Entity", "[", 
             RowBox[{"\"AdministrativeDivision\"", ",", 
               RowBox[{"{", 
                 RowBox[{"\"Florida\"", ",", "\"UnitedStates\""}], "}"}]}], 
             "]"}], "\"Entity[\\\"AdministrativeDivision\\\", \
{\\\"Florida\\\", \\\"UnitedStates\\\"}]\"", "\"administrative division\""},
          "Entity"], "[", "\"\<Polygon\>\"", "]"}], "]"}]}], "]"}], ",", 
     "\"\<Meters\>\""}], "]"}], " ", 
   RowBox[{
    RowBox[{"(", 
     TemplateBox[{"678438.2825247926`", "\"m\"", "meters", "\"Meters\""},
      "Quantity"], ")"}], ".", "  ", "The"}], " ", "difference", " ", "is", 
   " ", 
   RowBox[{
    TemplateBox[{"321.2773703687126`", "\"m\"", "meters", "\"Meters\""},
     "Quantity"], ".", " ", "To"}], " ", "make", " ", "this", " ", "work"}], 
  ",", " ", 
  RowBox[{
  "I", " ", "would", " ", "need", " ", "to", " ", "first", " ", "figure", " ",
    "out", " ", "why", " ", "there", " ", "is", " ", "a", " ", "difference", 
   " ", 
   RowBox[{"here", ".", " ", "Then"}], " ", "I", " ", "would", " ", "need", 
   " ", "indicate", " ", "to", " ", "RegionNearestDistance", " ", "I", " ", 
   "am", " ", "using", " ", "not", " ", "the", " ", "geodesic", "  ", 
   "distance", " ", "but", " ", "the", " ", "loxodromic", " ", 
   RowBox[{"distance", ".", " ", "The"}], " ", "function", " ", 
   "SignedRegionDistance", " ", "could", " ", "be", " ", "used", " ", "for", 
   " ", "the", " ", "option", " ", 
   RowBox[{
   "\[OpenCurlyDoubleQuote]", "SignedBoundary", "\[CloseCurlyDoubleQuote]"}], 
   " ", "once", " ", "it", " ", "supports", " ", "two", " ", "regions"}], ",",
   " ", 
  RowBox[{
   RowBox[{
   "and", " ", "not", " ", "just", " ", "a", " ", "region", " ", "and", " ", 
    "a", " ", 
    RowBox[{"point", ".", " ", 
     TemplateBox[{
       Cell[
        TextData["SignedRegionDistance"]], "paclet:ref/SignedRegionDistance"},
      "RefLink",
      BaseStyle->{"InlineFormula"}]}], "is", " ", "effectively", 
    RowBox[{
     TemplateBox[{
       Cell[
        TextData["MinValue"]], "paclet:ref/MinValue"},
      "RefLink",
      BaseStyle->{"InlineFormula"}], "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         TemplateBox[{
           Cell[
            TextData["Norm"]], "paclet:ref/Norm"},
          "RefLink",
          BaseStyle->{"InlineFormula"}], "[", 
         RowBox[{
          StyleBox["p", "TI"], "-", 
          StyleBox["q", "TI"]}], "]"}], ",", 
        RowBox[{
         StyleBox["q", "TI"], "\[Element]", 
         StyleBox["reg", "TI"]}]}], "}"}], ",", 
      StyleBox[
       RowBox[{"q", "\[Element]", "reg"}], "TI"]}], "]"}], "when", 
    StyleBox["p", "TI"], "is", " ", "not", " ", "in", 
    StyleBox["reg", "TI"], "and"}], "-", 
   RowBox[{
    RowBox[{
     TemplateBox[{
       Cell[
        TextData["MinValue"]], "paclet:ref/MinValue"},
      "RefLink",
      BaseStyle->{"InlineFormula"}], "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         TemplateBox[{
           Cell[
            TextData["Norm"]], "paclet:ref/Norm"},
          "RefLink",
          BaseStyle->{"InlineFormula"}], "[", 
         RowBox[{
          StyleBox["p", "TI"], "-", 
          StyleBox["q", "TI"]}], "]"}], ",", 
        RowBox[{
         StyleBox["q", "TI"], "\[NotElement]", 
         StyleBox["reg", "TI"]}]}], "}"}], ",", 
      StyleBox["q", "TI"]}], "]"}], 
    RowBox[{"otherwise", ".", " ", "This"}], " ", "could", " ", "be", " ", 
    "used", " ", "to", " ", "compute", " ", "the", " ", "signed", " ", 
    "region", " ", "distance", " ", "while", " ", "I", " ", "wait", " ", 
    "for", " ", "support", " ", "for", " ", "two", " ", "regions", " ", "to", 
    " ", "be", " ", "introduced"}]}], ",", " ", 
  RowBox[{"but", " ", 
   RowBox[{"there", "'"}], "s", " ", "still", " ", "the", " ", "bug", " ", 
   "and", " ", "the", " ", "problem", " ", "of", " ", "using", " ", "a", " ", 
   "loxodrome", " ", "and", " ", "not", " ", "a", " ", 
   RowBox[{"geodesic", ".", " ", "An"}], " ", "example", " ", "of", " ", 
   "where", " ", "this", " ", "could", " ", "be", " ", "useful", " ", "is", 
   " ", 
   RowBox[{"GeoDistance", "[", 
    RowBox[{
     TemplateBox[{"\"Illinois, United States\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"AdministrativeDivision\"", ",", 
           RowBox[{"{", 
             RowBox[{"\"Illinois\"", ",", "\"UnitedStates\""}], "}"}]}], 
         "]"}], "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Illinois\\\", \
\\\"UnitedStates\\\"}]\"", "\"administrative division\""},
      "Entity"], ",", 
     TemplateBox[{"\"Champaign\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"Champaign\"", ",", "\"Illinois\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Champaign\\\", \\\"Illinois\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"]}], "]"}], " ", 
   RowBox[{"(", 
    TemplateBox[{"0.`", "\"m\"", "meters", "\"Meters\""},
     "Quantity"], ")"}], " ", "and", " ", 
   RowBox[{"GeoDistance", "[", 
    RowBox[{
     TemplateBox[{"\"Illinois, United States\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"AdministrativeDivision\"", ",", 
           RowBox[{"{", 
             RowBox[{"\"Illinois\"", ",", "\"UnitedStates\""}], "}"}]}], 
         "]"}], "\"Entity[\\\"AdministrativeDivision\\\", {\\\"Illinois\\\", \
\\\"UnitedStates\\\"}]\"", "\"administrative division\""},
      "Entity"], ",", 
     TemplateBox[{"\"Champaign\"", 
       RowBox[{"Entity", "[", 
         RowBox[{"\"City\"", ",", 
           RowBox[{"{", 
             
             RowBox[{"\"Champaign\"", ",", "\"Illinois\"", ",", 
               "\"UnitedStates\""}], "}"}]}], "]"}], 
       "\"Entity[\\\"City\\\", {\\\"Champaign\\\", \\\"Illinois\\\", \
\\\"UnitedStates\\\"}]\"", "\"city\""},
      "Entity"], ",", 
     RowBox[{"DistanceFunction", "\[Rule]", "\"\<SignedBoundary\>\""}]}], 
    "]"}], " ", 
   RowBox[{
    RowBox[{"(", 
     TemplateBox[{
       RowBox[{"-", "58.971302789561435`"}], "\"km\"", "kilometers", 
       "\"Kilometers\""},
      "Quantity"], ")"}], "."}]}]}]], "Text",
 TaggingRules->{},
 CellChangeTimes->{{3.896731762322454*^9, 3.896732098268838*^9}},
 CellID->69709608,ExpressionUUID->"d5ff049f-9e03-4254-81fa-975dee3c6a59"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Submission Notes",
 Cell[BoxData[
  PaneSelectorBox[{True->
   TemplateBox[{"Submission Notes", 
     Cell[
      BoxData[
       FrameBox[
        Cell[
        "Enter any additional information that you would like to communicate \
to the reviewer here. This section will not be included in the published \
resource.", "MoreInfoText"], Background -> GrayLevel[0.95], FrameMargins -> 
        20, FrameStyle -> GrayLevel[0.9], RoundingRadius -> 5, ImageSize -> {
          Scaled[0.65], Automatic}]], "MoreInfoText", Deletable -> True, 
      CellTags -> {"SectionMoreInfoSubmissionNotes"}, 
      CellMargins -> {{66, 66}, {15, 15}}]},
    "MoreInfoOpenerButtonTemplate"]}, Dynamic[
    CurrentValue[
     EvaluationNotebook[], {TaggingRules, "ResourceCreateNotebook"}]],
   ImageSize->Automatic]],ExpressionUUID->
  "13d7e2d8-fbba-49d0-b82f-68a5641826b9"]
}], "Section",
 Editable->False,
 Deletable->False,
 TaggingRules->{"TemplateGroupName" -> "Submission Notes"},
 DefaultNewCellStyle->"Text",
 CellTags->{"Submission Notes", "TemplateCellGroup"},
 CellID->321610809,ExpressionUUID->"d2e0a2a3-02f9-438f-8fa6-5db48c260653"],

Cell["I plan to update RhumbLineDistance too.", "Text",
 TaggingRules->{},
 CellEventActions->{Inherited, {"KeyDown", "\t"} :> Replace[SelectionMove[
       SelectedNotebook[], After, Cell]; NotebookFind[
       SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
       WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
       SelectedNotebook[], All, CellContents, AutoScroll -> True]], 
   PassEventsDown -> False, PassEventsUp -> False},
 CellChangeTimes->{{3.896732673443993*^9, 3.8967326805232353`*^9}},
 CellTags->{"DefaultContent", "TabNext"},
 CellID->711457694,ExpressionUUID->"91c8906a-0fa2-41e1-b64b-ee1a80db2f66"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1152, Automatic},
WindowMargins->{{
  Automatic, -5.399999999999864}, {-5.399999999999977, Automatic}},
DockedCells->{
  Cell[
   BoxData[
    TemplateBox[{}, "MainGridTemplate"]], "DockedCell", 
   CellMargins -> {{-10, -10}, {-8, -8}}, CellFrame -> 0, Background -> 
   RGBColor[0.92157, 0.34118, 0.10588], CellTags -> {"MainDockedCell"}, 
   CacheGraphics -> False], 
  Cell[
   BoxData[
    TemplateBox[{}, "ToolsGridTemplate"]], "DockedCell", 
   TaggingRules -> {"Tools" -> True}, CellTags -> {"ToolbarDockedCell"}, 
   CellFrameMargins -> {{0, 0}, {2, 2}}, CellFrame -> {{0, 0}, {1, 0}}, 
   CacheGraphics -> False, CellOpen -> Dynamic[
     CurrentValue[
      EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]]], 
  Cell[
   BoxData[
    StyleBox[
     TagBox[
      GridBox[{{
         OverlayBox[{
           StyleBox[
            TagBox[
             DynamicModuleBox[{Typeset`var$$ = False}, 
              InterpretationBox[
               StyleBox[
                PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    StyleBox[
                    DynamicBox[
                    ToBoxes[
                    DateString[
                    TimeZoneConvert[
                    DateObject[
                    3.8967326967888762`17.343275604782992*^9, TimeZone -> 
                    0]], {"MonthName", " ", "DayShort", ", ", "Year", " ", 
                    "Hour12Short", ":", "Minute", " ", "AMPMLowerCase"}], 
                    StandardForm], SingleEvaluation -> True, Evaluator -> 
                    "System"], FontSlant -> Italic, FontColor -> 
                    GrayLevel[0.5], FontSize -> 0.9 Inherited, StripOnInput -> 
                    False]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    StyleBox[
                    DynamicBox[
                    ToBoxes[
                    DateString[
                    TimeZoneConvert[
                    DateObject[
                    3.8967326967888762`17.343275604782992*^9, TimeZone -> 
                    0]], {"MonthName", " ", "DayShort", ", ", "Year", " ", 
                    "Hour12Short", ":", "Minute", " ", "AMPMLowerCase"}], 
                    StandardForm], SingleEvaluation -> True, Evaluator -> 
                    "System"], FontSlant -> Italic, FontColor -> 
                    GrayLevel[0.5], FontSize -> 0.9 Inherited, StripOnInput -> 
                    False]}, {"", 
                    PaneBox["\"\"", ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                 Dynamic[
                  TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                 Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                 DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                 Baseline], Deployed -> False, StripOnInput -> False], 
               OpenerView[{
                 Style[
                  Dynamic[
                   DateString[
                    TimeZoneConvert[
                    DateObject[
                    3.8967326967888762`17.343275604782992*^9, TimeZone -> 
                    0]], {"MonthName", " ", "DayShort", ", ", "Year", " ", 
                    "Hour12Short", ":", "Minute", " ", "AMPMLowerCase"}], 
                   SingleEvaluation -> True, Evaluator -> "System"], 
                  FontSlant -> Italic, FontColor -> GrayLevel[0.5], FontSize -> 
                  0.9 Inherited], ""}, False]], DynamicModuleValues -> 
              Automatic], Setting[#, {0}]& ], ShowContents -> False, 
            StripOnInput -> False], 
           StyleBox[
            DynamicBox[
             ToBoxes[
              DateString[
               TimeZoneConvert[
                DateObject[
                3.8967326967888762`17.343275604782992*^9, TimeZone -> 0]], {
               "MonthName", " ", "DayShort", ", ", "Year", " ", "Hour12Short",
                 ":", "Minute", " ", "AMPMLowerCase"}], StandardForm], 
             SingleEvaluation -> True, Evaluator -> "System"], FontSlant -> 
            Italic, FontColor -> GrayLevel[0.5], FontSize -> 0.9 Inherited, 
            StripOnInput -> False]}, Alignment -> {Right, Baseline}], 
         "\"   \"", 
         ItemBox[
          StyleBox[
          "\"Found 1 potential issue and 9 suggestions\"", LineBreakWithin -> 
           Automatic, LineIndent -> 0, StripOnInput -> False], ItemSize -> 
          Fit, StripOnInput -> False], 
         StyleBox[
          ActionMenuBox[
           TagBox[
            TagBox[
             GridBox[{{
                TemplateBox[{
                  TagBox[
                   GridBox[{{
                    TemplateBox[{
                    RGBColor[1., 0.4627450980392157, 0.], 
                    RGBColor[1., 1., 1.], 10, {{0, 18}, {-2, 17}}}, 
                    "SuggestionIconTemplate"], 
                    StyleBox[
                    "1", FontColor -> GrayLevel[0.5], FontSize -> 9, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"], 
                  "\"Potential issues found\""}, "PrettyTooltipTemplate"], 
                TemplateBox[{
                  TagBox[
                   GridBox[{{
                    TemplateBox[{
                    RGBColor[
                    0.49019607843137253`, 0.49019607843137253`, 
                    0.49019607843137253`], 
                    RGBColor[1., 1., 1.], 10, {{0, 18}, {-2, 17}}}, 
                    "SuggestionIconTemplate"], 
                    StyleBox[
                    "9", FontColor -> GrayLevel[0.5], FontSize -> 9, 
                    StripOnInput -> False]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"], 
                  "\"Suggestions found\""}, "PrettyTooltipTemplate"], 
                "\"   \""}}, AutoDelete -> False, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
            MouseAppearanceTag["LinkHand"]], {TemplateBox[{
               PaneBox[
                TemplateBox[{
                  RGBColor[
                  0.49019607843137253`, 0.49019607843137253`, 
                   0.49019607843137253`], 
                  RGBColor[1., 1., 1.], 10, {{0, 18}, {-2, 17}}}, 
                 "SuggestionIconTemplate"], ImageSize -> {10, 10}, 
                ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
                Scaled[0.1]], "\" \"", 
               "\"The description should usually start with a capital \
letter\""}, "RowDefault"] :> DefinitionNotebookClient`WithCurrentNotebook[
              EvaluationNotebook[], 
              DefinitionNotebookClient`LoadDefinitionNotebook[
               "Function", DefinitionNotebookClient`$CurrentNotebook]; 
              DefinitionNotebookClient`PackageScope`setHint[
               "Suggestion", "Function", 
                DefinitionNotebookClient`$CurrentNotebook, 
                "751d4372-22ee-4e31-8ece-825608aa7234", 660820806, 
                "DescriptionNotCapitalized", {
                "successive pairwise rhumbline distances between a list of \
geodetic positions"}]; 
              DefinitionNotebookClient`PackageScope`seekAfter[660820806]; 
              Null], TemplateBox[{
               PaneBox[
                TemplateBox[{
                  RGBColor[
                  0.49019607843137253`, 0.49019607843137253`, 
                   0.49019607843137253`], 
                  RGBColor[1., 1., 1.], 10, {{0, 18}, {-2, 17}}}, 
                 "SuggestionIconTemplate"], ImageSize -> {10, 10}, 
                ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
                Scaled[0.1]], "\" \"", 
               "\"Argument names are not formatted as template input\""}, 
              "RowDefault"] :> DefinitionNotebookClient`WithCurrentNotebook[
              EvaluationNotebook[], 
              DefinitionNotebookClient`LoadDefinitionNotebook[
               "Function", DefinitionNotebookClient`$CurrentNotebook]; 
              DefinitionNotebookClient`PackageScope`setHint[
               "Suggestion", "Function", 
                DefinitionNotebookClient`$CurrentNotebook, 
                "cc6015c2-09a7-4b01-97ed-7e0218805fce", 67839508, 
                "UsageMissingFormatting", {}]; 
              DefinitionNotebookClient`PackageScope`seekAfter[67839508]; 
              Null], TemplateBox[{
               PaneBox[
                TemplateBox[{
                  RGBColor[1., 0.4627450980392157, 0.], 
                  RGBColor[1., 1., 1.], 10, {{0, 18}, {-2, 17}}}, 
                 "SuggestionIconTemplate"], ImageSize -> {10, 10}, 
                ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
                Scaled[0.1]], "\" \"", 
               "\"Missing usage for \\\"RhumbLineDistanceList\\\"\""}, 
              "RowDefault"] :> DefinitionNotebookClient`WithCurrentNotebook[
              EvaluationNotebook[], 
              DefinitionNotebookClient`LoadDefinitionNotebook[
               "Function", DefinitionNotebookClient`$CurrentNotebook]; 
              DefinitionNotebookClient`PackageScope`setHint[
               "Warning", "Function", 
                DefinitionNotebookClient`$CurrentNotebook, 
                "b3e55fbd-5e73-44ff-82c9-17f7c9c273dd", 67839508, 
                "UsageMissingSymbol", {"RhumbLineDistanceList"}]; 
              DefinitionNotebookClient`PackageScope`seekAfter[67839508]; 
              Null], TemplateBox[{
               PaneBox[
                TemplateBox[{
                  RGBColor[
                  0.49019607843137253`, 0.49019607843137253`, 
                   0.49019607843137253`], 
                  RGBColor[1., 1., 1.], 10, {{0, 18}, {-2, 17}}}, 
                 "SuggestionIconTemplate"], ImageSize -> {10, 10}, 
                ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
                Scaled[0.1]], "\" \"", 
               "\"\\\"RhumbLineDistanceList\\\" should be formatted with \
template input in this section\""}, "RowDefault"] :> 
            DefinitionNotebookClient`WithCurrentNotebook[
              EvaluationNotebook[], 
              DefinitionNotebookClient`LoadDefinitionNotebook[
               "Function", DefinitionNotebookClient`$CurrentNotebook]; 
              DefinitionNotebookClient`PackageScope`setHint[
               "Suggestion", "Function", 
                DefinitionNotebookClient`$CurrentNotebook, 
                "5507ae73-9a58-46a8-91f5-a06391f19999", 245965071, 
                "UnformattedResourceName", {"RhumbLineDistanceList"}]; 
              DefinitionNotebookClient`PackageScope`seekAfter[245965071]; 
              Null], TemplateBox[{
               PaneBox[
                TemplateBox[{
                  RGBColor[
                  0.49019607843137253`, 0.49019607843137253`, 
                   0.49019607843137253`], 
                  RGBColor[1., 1., 1.], 10, {{0, 18}, {-2, 17}}}, 
                 "SuggestionIconTemplate"], ImageSize -> {10, 10}, 
                ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
                Scaled[0.1]], "\" \"", 
               "\"\\\"Function\\\" appears to be unformatted code\""}, 
              "RowDefault"] :> DefinitionNotebookClient`WithCurrentNotebook[
              EvaluationNotebook[], 
              DefinitionNotebookClient`LoadDefinitionNotebook[
               "Function", DefinitionNotebookClient`$CurrentNotebook]; 
              DefinitionNotebookClient`PackageScope`setHint[
               "Suggestion", "Function", 
                DefinitionNotebookClient`$CurrentNotebook, 
                "d4646116-c459-44fb-987d-a4b10fed8f88", 91022651, 
                "FoundUnformattedCode", {"Function"}]; 
              DefinitionNotebookClient`PackageScope`seekAfter[91022651]; 
              Null], TemplateBox[{
               PaneBox[
                TemplateBox[{
                  RGBColor[
                  0.49019607843137253`, 0.49019607843137253`, 
                   0.49019607843137253`], 
                  RGBColor[1., 1., 1.], 10, {{0, 18}, {-2, 17}}}, 
                 "SuggestionIconTemplate"], ImageSize -> {10, 10}, 
                ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
                Scaled[0.1]], "\" \"", 
               "\"\\\"RhumbLineDistanceList\\\" should be formatted with \
template input in this section\""}, "RowDefault"] :> 
            DefinitionNotebookClient`WithCurrentNotebook[
              EvaluationNotebook[], 
              DefinitionNotebookClient`LoadDefinitionNotebook[
               "Function", DefinitionNotebookClient`$CurrentNotebook]; 
              DefinitionNotebookClient`PackageScope`setHint[
               "Suggestion", "Function", 
                DefinitionNotebookClient`$CurrentNotebook, 
                "4a49dbe9-d8dd-4097-b434-05b72fa71fe1", 1923503837, 
                "UnformattedResourceName", {"RhumbLineDistanceList"}]; 
              DefinitionNotebookClient`PackageScope`seekAfter[1923503837]; 
              Null], TemplateBox[{
               PaneBox[
                TemplateBox[{
                  RGBColor[
                  0.49019607843137253`, 0.49019607843137253`, 
                   0.49019607843137253`], 
                  RGBColor[1., 1., 1.], 10, {{0, 18}, {-2, 17}}}, 
                 "SuggestionIconTemplate"], ImageSize -> {10, 10}, 
                ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
                Scaled[0.1]], "\" \"", 
               "\"No symbol named \\\"RegionNearestDistance\\\" found in \
System`\""}, "RowDefault"] :> DefinitionNotebookClient`WithCurrentNotebook[
              EvaluationNotebook[], 
              DefinitionNotebookClient`LoadDefinitionNotebook[
               "Function", DefinitionNotebookClient`$CurrentNotebook]; 
              DefinitionNotebookClient`PackageScope`setHint[
               "Suggestion", "Function", 
                DefinitionNotebookClient`$CurrentNotebook, 
                "9f92be77-c64f-4efa-b512-4ea8a0380c5c", 2899768, 
                "NotASystemSymbol", {"RegionNearestDistance"}]; 
              DefinitionNotebookClient`PackageScope`seekAfter[2899768]; Null],
             TemplateBox[{
               PaneBox[
                TemplateBox[{
                  RGBColor[
                  0.49019607843137253`, 0.49019607843137253`, 
                   0.49019607843137253`], 
                  RGBColor[1., 1., 1.], 10, {{0, 18}, {-2, 17}}}, 
                 "SuggestionIconTemplate"], ImageSize -> {10, 10}, 
                ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
                Scaled[0.1]], "\" \"", 
               "\"Curly quotes should usually be written as straight \
quotes\""}, "RowDefault"] :> DefinitionNotebookClient`WithCurrentNotebook[
              EvaluationNotebook[], 
              DefinitionNotebookClient`LoadDefinitionNotebook[
               "Function", DefinitionNotebookClient`$CurrentNotebook]; 
              DefinitionNotebookClient`PackageScope`setHint[
               "Suggestion", "Function", 
                DefinitionNotebookClient`$CurrentNotebook, 
                "8e94cba6-7e1c-478f-8f99-6697c8a8e485", 908162033, 
                "CurlyQuotes", {}]; 
              DefinitionNotebookClient`PackageScope`seekAfter[908162033]; 
              Null], TemplateBox[{
               PaneBox[
                TemplateBox[{
                  RGBColor[
                  0.49019607843137253`, 0.49019607843137253`, 
                   0.49019607843137253`], 
                  RGBColor[1., 1., 1.], 10, {{0, 18}, {-2, 17}}}, 
                 "SuggestionIconTemplate"], ImageSize -> {10, 10}, 
                ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
                Scaled[0.1]], "\" \"", 
               "\"\\\"region1, region2\\\" should probably be written with \
subscripts\""}, "RowDefault"] :> DefinitionNotebookClient`WithCurrentNotebook[
              EvaluationNotebook[], 
              DefinitionNotebookClient`LoadDefinitionNotebook[
               "Function", DefinitionNotebookClient`$CurrentNotebook]; 
              DefinitionNotebookClient`PackageScope`setHint[
               "Suggestion", "Function", 
                DefinitionNotebookClient`$CurrentNotebook, 
                "2d757196-a5fd-4709-9e7b-e9fbef8de3c1", 908162033, 
                "MaybeNeedsSubscripts", {
                 Row[{"region1", "region2"}, ", "], "region1", "region2"}]; 
              DefinitionNotebookClient`PackageScope`seekAfter[908162033]; 
              Null], TemplateBox[{
               PaneBox[
                TemplateBox[{
                  RGBColor[
                  0.49019607843137253`, 0.49019607843137253`, 
                   0.49019607843137253`], 
                  RGBColor[1., 1., 1.], 10, {{0, 18}, {-2, 17}}}, 
                 "SuggestionIconTemplate"], ImageSize -> {10, 10}, 
                ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
                Scaled[0.1]], "\" \"", 
               "\"Curly quotes should usually be written as straight \
quotes\""}, "RowDefault"] :> DefinitionNotebookClient`WithCurrentNotebook[
              EvaluationNotebook[], 
              DefinitionNotebookClient`LoadDefinitionNotebook[
               "Function", DefinitionNotebookClient`$CurrentNotebook]; 
              DefinitionNotebookClient`PackageScope`setHint[
               "Suggestion", "Function", 
                DefinitionNotebookClient`$CurrentNotebook, 
                "19f00e16-0d1a-4bbc-b0f5-2cc98b4dda70", 69709608, 
                "CurlyQuotes", {}]; 
              DefinitionNotebookClient`PackageScope`seekAfter[69709608]; Null]
             }, Appearance -> None, Method -> "Queued"], "BoxID" -> 
          "WarningCountButton", StripOnInput -> False], 
         TagBox[
          ButtonBox[
           TagBox[
            PaneSelectorBox[{False -> GraphicsBox[{
                 GrayLevel[
                  NCache[
                   Rational[64, 85], 0.7529411764705882]], 
                 
                 PolygonBox[{{-0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, -0.282842712474619}, {0.282842712474619, 
                  0.42426406871192845`}, {0.42426406871192845`, 
                  0.282842712474619}}], 
                 
                 PolygonBox[{{0.42426406871192845`, -0.282842712474619}, {
                  0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, 0.282842712474619}, {-0.282842712474619, 
                  0.42426406871192845`}}]}, ImageSize -> 18, PlotRangePadding -> 
                0, PlotRange -> 0.7, Background -> None], True -> GraphicsBox[{
                 GrayLevel[
                  NCache[
                   Rational[128, 255], 0.5019607843137255]], 
                 
                 PolygonBox[{{-0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, -0.282842712474619}, {0.282842712474619, 
                  0.42426406871192845`}, {0.42426406871192845`, 
                  0.282842712474619}}], 
                 
                 PolygonBox[{{0.42426406871192845`, -0.282842712474619}, {
                  0.282842712474619, -0.42426406871192845`}, \
{-0.42426406871192845`, 0.282842712474619}, {-0.282842712474619, 
                  0.42426406871192845`}}]}, ImageSize -> 18, PlotRangePadding -> 
                0, PlotRange -> 0.7, Background -> None]}, 
             Dynamic[
              CurrentValue["MouseOver"]], ImageSize -> Automatic, 
             FrameMargins -> 0], 
            MouseAppearanceTag["LinkHand"]], ButtonFunction :> 
           With[{DefinitionNotebookClient`Stripes`PackagePrivate`nbo$ = 
              EvaluationNotebook[]}, 
             CurrentValue[
              DefinitionNotebookClient`Stripes`PackagePrivate`nbo$, 
               DockedCells] = If[
               TrueQ[
                MemberQ[
                 CurrentValue["ModifierKeys"], "Control"]], 
               DeleteCases[
                Flatten[{
                  CurrentValue[
                  DefinitionNotebookClient`Stripes`PackagePrivate`nbo$, 
                   DockedCells]}], 
                Cell[
                 Blank[], "StripeCell", 
                 BlankNullSequence[]]], 
               DeleteCases[
                Flatten[{
                  CurrentValue[
                  DefinitionNotebookClient`Stripes`PackagePrivate`nbo$, 
                   DockedCells]}], 
                Condition[
                 Pattern[DefinitionNotebookClient`Stripes`PackagePrivate`c$, 
                  Blank[Cell]], 
                 Not[
                  FreeQ[
                  DefinitionNotebookClient`Stripes`PackagePrivate`c$, 
                   "a98edd04-a796-4772-bda4-3c83ddd1e2b6"]]]]]], Appearance -> 
           None, BoxID -> "a98edd04-a796-4772-bda4-3c83ddd1e2b6", Evaluator -> 
           Automatic, Method -> "Preemptive"], 
          MouseAppearanceTag["LinkHand"]]}}, 
       GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
       AutoDelete -> False, 
       GridBoxItemSize -> {
        "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
     "Text", FontSize -> 12, FontColor -> GrayLevel[0.25], StripOnInput -> 
     False]], "StripeCell", CellFrameMargins -> {{20, 5}, {2, 2}}, 
   CellFrame -> {{0, 0}, {1, 0}}, CellFrameColor -> GrayLevel[0.75]]},
TaggingRules->{
 "ResourceType" -> "Function", "ResourceCreateNotebook" -> True, 
  "TemplateVersion" -> "1.6.4", "CreationTimestamp" -> 
  3.8967221219347927`17.343274426204076*^9, "UpdatedTimestamp" -> 
  3.8967221219357931`17.343274426204186*^9, "CompatibilityTest" -> 
  HoldComplete[
    BinaryDeserialize[
     BaseDecode[
     "OEM6eJzVWVtT20YUrjEQBhxaMulMkyc98EAyadJpO9NL2iauDcQdIMCa9JW1dGQ0rHeV3RWg\
X9a/17MrydhGciTbTFNPJsja1XfOnut3LH9JPWqJQSgi7u3ehBKUCgT3a2rlJApA+/nLS2qp4+P/\
9Sb38M/K7seIMrW5/QGkWT+KBj2Q0refnbdmB6EDOMGLRiuSErj+QFkE/\
hfq0e4VXlFtnhIaekJc4q7lg0Bp1ejSfj/g/dOIgSKNU1Aiki504xDIcptqimouv+\
cuFGq58icT7qXZlgButwTXcKOPqb7w60UnPwLwFNnJ5JFYaRi0WIBqn7fBD3gwqu757SOOUSp7LG+\
rWj6KGEPFXt5dTAWcQh9VBYma+kE/ktY0w+O+KavUKYRCBVrIOAFMcFQKVLf+\
q6m1PRqwSKJnaurhMXUZ6A5XmjJGvinS0F+\
dxdgzmbXRFWOeWSdaYjz8JQIjr35IQ3uGiLvmSX8lkUyeFBrXKkeVCeuNBIuELNDmNmFCt2qkdk6Wf\
v195MbS63WrPMavIs/KKv/\
cXy6wUp2AkbfeFtfcJoFSv5RFzS7eRxrdCJ5JqHX0NKMuNDGuFgi7YZKuDYzG4CHuxjvBPHQkBiZXf\
5QFPpbBFQKeXyVlYV8CfpPqwRlXaTnIsUa7KjoNQ+DeGb+\
g3GPgtYAxNdUwi5IwxUb4tbKVXITFipcikK0uDPAAGoy4fSmicH5QzN1Gk5krLAdXGNBft3BTX8gA1\
LetC3Ave+IGb2/e3jbSSSNbs982UR6NmLb5zXWOpuTL7BaBJDdzXV26mg0doS674iz08Dqt+\
8VeXgD4mIPreONBlgJr+0z0KDu/MC1t1KLqp7Ji90G/\
CzwPeFKIyqfrHuVu3LoQgQvtgDLRH1WskSomNXZJ7K9YlCm/\
zFOd4uqWXTU9icDHCPDU5FFqAeZlAk+\
wXQzPOy5gBCxrKStdGdnUnrNKVGl22UUWdCkNUd9XVYH3quRYSmUmpY5ZKLPnEVwP7Zlr4yRB1GFVl\
bcjBQfQp27c6XMhk+qU+VotG2/kJ9/rspJycCcSb1oazilmWo1dUqsH+\
KQtjHtV7dYHnZWxcYkLSyVMiQ3UHLAuUgXqPtQtzEak0JY1r5rdnbbJS6ufetDBmt3HSF3rcCss/\
oSR60OtCw6eApeue9mJ1LAz3IHt3Vp7KH5EZk3tVm6DlAseuJQdSxECWsvyuVl1HlE0f4hYSotho6m\
UcAPLvU9Us3Juh6m2JEb144GJobWmJSNdsRg4GyZkk1igQ9DUM/\
NBOoGRtVagkwHkSbLj1Sn4IE10O9nSbXVZjFdGhE6olUxPwxkqGUGXD9Dmd0bPL+zn+\
VucCeYZVqZMEhX4/fNClGqEvhrONAb/YyESDoGXtA/ERYdU4+1nhZhJt8uLg0TYzET+3kROZ/\
YlrVeGz88E9Zmx+OP5vVCB1t+HtFl4/k6hHpPEvjht/ydMfqZqgQDffbJeTVLn1tzOtQz+\
VSHMfVD2YqXHzDMzUX9RiD8fM6+KW5aK/1bOHv8tAZ9Lyc+Idv9ceA7iShpi/ZnMkHl49+\
uS7SqXbc+s6ox0uzPlN/bsx3HMtiicFDuddi8UdpH0ex7nlCTdtbHf2yfeAuUz8R/sZ+etcc9oqyP/\
1LoXgXJ4qqpjqBiVytHC6YHj2i7iOb4UA4c6HK5BOmmHeeEogf8G4Pi4KcIocAY0NkjOtZCIpBy4CT\
F2wHvptIUTi8i5DtSFgdYydmikxQAPizZgseMKjrgaw8/RYwrhboqrgxC39hhk0t/cTg/\
1dHpYy6aH8TlCbaLrk2YjJJVx4TBiHTj5bmz4CqLgfdhDgg6L1CGioG9x+\
xY6tG9AO9zDs2EcDuvRetMalxpasHaEJNB0BOvNVRIPeoKRp8nbn0PKEUyeJ9+Snkce5811pZ/+\
KouXDOV2vNqeXMp9D7QyIujZnSeKiMG4/\
WyabbVsUI30dbWyR5mC4Y6npzAQV7A7CHW8e0ORJGTUV01ufdzMGR2GbTwVmCj3d8A9cd0NNHoiRcl\
98fkvn3IKDA=="]]], "DefinitionNotebookFramework" -> 
  "DefinitionNotebookClient", 
  "RuntimeConfiguration" -> {
   "LoadingMethod" -> "Paclet", "PacletName" -> "FunctionResource", 
    "Contexts" -> {
     "FunctionResource`", "FunctionResource`DefinitionNotebook`"}, 
    "DefaultContentMethod" -> "Legacy"}, "ToolsOpen" -> True, "StatusMessage" -> 
  "", "SubmissionReviewData" -> {"Review" -> False}, "TryRealOnly" -> False, 
  "AutoUpdate" -> True},
CreateCellID->True,
FrontEndVersion->"13.3 for Microsoft Windows (64-bit) (May 18, 2023)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    StyleData[All, "Working"], WindowToolbars -> {}, DockedCells -> {
      Cell[
       BoxData[
        TemplateBox[{}, "MainGridTemplate"]], "DockedCell", 
       CellMargins -> {{-10, -10}, {-8, -8}}, CellFrame -> 0, Background -> 
       RGBColor[0.92157, 0.34118, 0.10588], CellTags -> {"MainDockedCell"}, 
       CacheGraphics -> False], 
      Cell[
       BoxData[
        TemplateBox[{}, "ToolsGridTemplate"]], "DockedCell", 
       TaggingRules -> {"Tools" -> True}, CellTags -> {"ToolbarDockedCell"}, 
       CellFrameMargins -> {{0, 0}, {2, 2}}, CellFrame -> {{0, 0}, {1, 0}}, 
       CacheGraphics -> False, CellOpen -> Dynamic[
         CurrentValue[
          EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]]]}, 
    PrivateNotebookOptions -> {
     "FileOutlineCache" -> False, "SafeFileOpen" -> "IgnoreCache"}, 
    CellLabelAutoDelete -> False, 
    CodeAssistOptions -> {"AutoDetectHyperlinks" -> False}, 
    AutoQuoteCharacters -> {}], 
   Cell["Hint Styles", "Section"], 
   Cell[
    StyleData["MoreInfoText", StyleDefinitions -> StyleData["Text"]], 
    FontColor -> GrayLevel[0.25]], 
   Cell[
    StyleData["ErrorText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, Inherited}, {10, 10}}, 
    CellElementSpacings -> {"CellMinHeight" -> 0, "ClosedCellHeight" -> 0}, 
    FontWeight -> Bold, FontColor -> RGBColor[1, 0, 0]], 
   Cell[
    StyleData["WarningText", StyleDefinitions -> StyleData["Text"]], 
    ShowCellBracket -> False, CellMargins -> {{66, 35}, {0, 0}}, FontSize -> 
    14, GridBoxOptions -> {BaseStyle -> {}}], 
   Cell["Template Boxes", "Section"], 
   Cell[
    StyleData["MoreInfoOpenerIconTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> GraphicsBox[{
            Thickness[0.090909], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYC4oSnF5RuVyo58OlumvteXcIBxj//Pfjx0tky
Dp8u+SYJzFB0kGQJ49MtUnBYIKV/V4UNRis5GHKskYl6AlOnDNUHM0cFaq4I
nD/niMKGogx+OB+oO8X6Phtcf/+hrxox/Qxw80HKftZ9sYfZ/7BKZJ37w1f2
MPfB+DD3w/h+SQIRlluE4foh9vDBzYfQHHD7izMmvq2xZ4K7r9CW6/rigr/2
MPfD+DD/wfgw/8P0w8IHZj4s/GD2w8IX5j708AcA2Xetpg==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 3.25}], 
              Thickness[0.045818], 
              RGBColor[0.62744, 0.62744, 0.62744, 1.]}, StripOnInput -> 
             False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3b48/JRRi4jD3qBpin2m8g5n6j32194VhvNZnvdo
vPUVdoh2sntxM0feQfiT4/m0q0IOQNnSwtvyDmxCIvbHYoQcMhnyG1lUFRyk
eR/oTlAAym/iKVyTjeAf2aiXt/gggt+odqhtubgiXP+k00CLYxXh5mdrf5t+
d7Ii3P5LDPeYOE8pwt33vfTBHMGnig4w98P4j5fOPqJgIArn539oPRlyUBSu
/9OGgOxZ5mJw88sKgS5aKwa3XzOm/9DXF2Jw98H4MPfD+DD/wfTD/A8zHxY+
MPth4QdzHyx80cMfAIsMpwk=
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQXTFnkfJOGwmHsNp125Lq+R1g/G8aMf2HvvI4KP39
VvrgjgAGH6b+c19wicp0IQeBKrPVduICcL6EWjDr4ksCqPLTBeH8211/U7+n
CMH5S+7v45tjLAznX773gHvySwS/qdhtyrc2ETj/04aA7FnfReH8RxHi2y8e
EIPzNUHOzRCH8x8vnX1E4QOCP+/98mPe5RJw/o9goAoWSTj/6vMs7W/TJR0O
X9ZOlVwk4PB2no3OlVsI/jKgcRs+STlonhY4vstCzCFoh1zr64syDkBXssXP
EHO4WvFSzbADwa9JNAo1yJKA82H+gfFh/oXxA29JA7Ug+GY2e4OmJQrB+f83
VX/aMEEQzrerjFhhelYAzofFB3r8AgApYdcE
                "]}]}, {
              FaceForm[
               RGBColor[0.62744, 0.62744, 0.62744, 1.]]}, StripOnInput -> 
             False]}, ImageSize -> {11., 11.}, 
           PlotRange -> {{0., 11.}, {0., 11.}}, AspectRatio -> Automatic], 
         True -> GraphicsBox[{
            Thickness[0.090909], 
            StyleBox[{
              
              JoinedCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYC4oSnF5RuVyo58OlumvteXcIBxj//Pfjx0tky
Dp8u+SYJzFB0kGQJ49MtUnBYIKV/V4UNRis5GHKskYl6AlOnDNUHM0cFaq4I
nD/niMKGogx+OB+oO8X6Phtcf/+hrxox/Qxw80HKftZ9sYfZ/7BKZJ37w1f2
MPfB+DD3w/h+SQIRlluE4foh9vDBzYfQHHD7izMmvq2xZ4K7r9CW6/rigr/2
MPfD+DD/wfgw/8P0w8IHZj4s/GD2w8IX5j708AcA2Xetpg==
               "], CurveClosed -> {1}]}, {
              JoinForm[{"Miter", 3.25}], 
              Thickness[0.045818], 
              RGBColor[0.5, 0.5, 0.5, 1.]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGYC4oSnF5RuVyo58OlumvteXcIBxj//Pfjx0tky
Dp8u+SYJzFB0kGQJ49MtUnBYIKV/V4UNRis5GHKskYl6AlOnDNUHM0cFaq4I
nD/niMKGogx+OB+oO8X6Phtcf/+hrxox/Qxw80HKftZ9sYfZ/7BKZJ37w1f2
MPfB+DD3w/h+SQIRlluE4foh9vDBzYfQHHD7izMmvq2xZ4K7r9CW6/rigr/2
MPfD+DD/wfgw/8P0w8IHZj4s/GD2w8IX5j708AcA2Xetpg==
               "]]}, {
              FaceForm[
               RGBColor[0.5, 0.5, 0.5, 1.]]}, StripOnInput -> False], 
            StyleBox[{
              
              FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBGIQ3b48/JRRi4jD3qBpin2m8g5n6j32194VhvNZnvdo
vPUVdoh2sntxM0feQfiT4/m0q0IOQNnSwtvyDmxCIvbHYoQcMhnyG1lUFRyk
eR/oTlAAym/iKVyTjeAf2aiXt/gggt+odqhtubgiXP+k00CLYxXh5mdrf5t+
d7Ii3P5LDPeYOE8pwt33vfTBHMGnig4w98P4j5fOPqJgIArn539oPRlyUBSu
/9OGgOxZ5mJw88sKgS5aKwa3XzOm/9DXF2Jw98H4MPfD+DD/wfTD/A8zHxY+
MPth4QdzHyx80cMfAIsMpwk=
                "], CompressedData["
1:eJxTTMoPSmViYGCQB2IQXTFnkfJOGwmHsNp125Lq+R1g/G8aMf2HvvI4KP39
VvrgjgAGH6b+c19wicp0IQeBKrPVduICcL6EWjDr4ksCqPLTBeH8211/U7+n
CMH5S+7v45tjLAznX773gHvySwS/qdhtyrc2ETj/04aA7FnfReH8RxHi2y8e
EIPzNUHOzRCH8x8vnX1E4QOCP+/98mPe5RJw/o9goAoWSTj/6vMs7W/TJR0O
X9ZOlVwk4PB2no3OlVsI/jKgcRs+STlonhY4vstCzCFoh1zr64syDkBXssXP
EHO4WvFSzbADwa9JNAo1yJKA82H+gfFh/oXxA29JA7Ug+GY2e4OmJQrB+f83
VX/aMEEQzrerjFhhelYAzofFB3r8AgApYdcE
                "]}]}, {
              FaceForm[
               RGBColor[0.99998, 0.99998, 0.99998, 1.]]}, StripOnInput -> 
             False]}, ImageSize -> {11., 11.}, 
           PlotRange -> {{0., 11.}, {0., 11.}}, AspectRatio -> Automatic]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["MoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        DynamicModuleBox[{
         RSNB`mPosRegion$$, RSNB`attachPos$$, RSNB`offsetPos$$, 
          RSNB`horizontalRegion$$, RSNB`verticalRegion$$, 
          RSNB`chooseAttachLocation$$}, 
         TagBox[
          TemplateBox[{
            TemplateBox[{}, "MoreInfoOpenerIconTemplate"], 
            "\"Click for more information\""}, "PrettyTooltipTemplate"], 
          EventHandlerTag[{"MouseDown" :> AttachCell[
              ParentBox[
               EvaluationBox[]], #2, 
              RSNB`chooseAttachLocation$$[], 
              RemovalConditions -> {"EvaluatorQuit", "MouseClickOutside"}], 
            Method -> "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
            True}]], 
         DynamicModuleValues :> {{DownValues[RSNB`mPosRegion$$] = {HoldPattern[
                RSNB`mPosRegion$$[]] :> RSNB`mPosRegion$$[
                Ceiling[MousePosition["WindowScaled"] 3]], HoldPattern[
                RSNB`mPosRegion$$[
                 Pattern[RSNB`reg, {
                   Blank[Integer], 
                   Blank[Integer]}]]] :> RSNB`reg, HoldPattern[
                RSNB`mPosRegion$$[
                 BlankNullSequence[]]] :> None}}, {
           DownValues[RSNB`attachPos$$] = {HoldPattern[
                RSNB`attachPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[RSNB`h$], 
                RSNB`verticalRegion$$[RSNB`v$]}}}, {
           DownValues[RSNB`offsetPos$$] = {HoldPattern[
                RSNB`offsetPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[4 - RSNB`h$], 
                RSNB`verticalRegion$$[4 - RSNB`v$]}}}, {
           DownValues[RSNB`horizontalRegion$$] = {HoldPattern[
                RSNB`horizontalRegion$$[1]] :> Left, HoldPattern[
                RSNB`horizontalRegion$$[2]] :> Center, HoldPattern[
                RSNB`horizontalRegion$$[3]] :> Right}}, {
           DownValues[RSNB`verticalRegion$$] = {HoldPattern[
                RSNB`verticalRegion$$[1]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[2]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[3]] :> Top}}, {
           DownValues[RSNB`chooseAttachLocation$$] = {HoldPattern[
                RSNB`chooseAttachLocation$$[]] :> 
              With[{RSNB`p$ = RSNB`mPosRegion$$[]}, 
                Apply[Sequence, {
                  RSNB`offsetPos$$[RSNB`p$], {-30, 30}, 
                  RSNB`attachPos$$[RSNB`p$]}]]}}}], BoxBaselineShift -> -0.5, 
        BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["InlineMoreInfoOpenerButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (AdjustmentBox[
        DynamicModuleBox[{
         RSNB`mPosRegion$$, RSNB`attachPos$$, RSNB`offsetPos$$, 
          RSNB`horizontalRegion$$, RSNB`verticalRegion$$, 
          RSNB`chooseAttachLocation$$}, 
         TagBox[
          TemplateBox[{
            TemplateBox[{}, "MoreInfoOpenerIconTemplate"], #4}, 
           "PrettyTooltipTemplate"], 
          EventHandlerTag[{"MouseDown" :> AttachCell[
              ParentBox[
               EvaluationBox[]], #2, 
              RSNB`chooseAttachLocation$$[], 
              RemovalConditions -> {"EvaluatorQuit", "MouseClickOutside"}], 
            Method -> "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
            True}]], 
         DynamicModuleValues :> {{DownValues[RSNB`mPosRegion$$] = {HoldPattern[
                RSNB`mPosRegion$$[]] :> RSNB`mPosRegion$$[
                Ceiling[MousePosition["WindowScaled"] 3]], HoldPattern[
                RSNB`mPosRegion$$[
                 Pattern[RSNB`reg, {
                   Blank[Integer], 
                   Blank[Integer]}]]] :> RSNB`reg, HoldPattern[
                RSNB`mPosRegion$$[
                 BlankNullSequence[]]] :> None}}, {
           DownValues[RSNB`attachPos$$] = {HoldPattern[
                RSNB`attachPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[RSNB`h$], 
                RSNB`verticalRegion$$[RSNB`v$]}}}, {
           DownValues[RSNB`offsetPos$$] = {HoldPattern[
                RSNB`offsetPos$$[{
                  Pattern[RSNB`h$, 
                   Blank[Integer]], 
                  Pattern[RSNB`v$, 
                   Blank[Integer]]}]] :> {
                RSNB`horizontalRegion$$[4 - RSNB`h$], 
                RSNB`verticalRegion$$[4 - RSNB`v$]}}}, {
           DownValues[RSNB`horizontalRegion$$] = {HoldPattern[
                RSNB`horizontalRegion$$[1]] :> Left, HoldPattern[
                RSNB`horizontalRegion$$[2]] :> Center, HoldPattern[
                RSNB`horizontalRegion$$[3]] :> Right}}, {
           DownValues[RSNB`verticalRegion$$] = {HoldPattern[
                RSNB`verticalRegion$$[1]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[2]] :> Top, HoldPattern[
                RSNB`verticalRegion$$[3]] :> Top}}, {
           DownValues[RSNB`chooseAttachLocation$$] = {HoldPattern[
                RSNB`chooseAttachLocation$$[]] :> 
              With[{RSNB`p$ = RSNB`mPosRegion$$[]}, 
                Apply[Sequence, {
                  RSNB`offsetPos$$[RSNB`p$], {-30, 30}, 
                  RSNB`attachPos$$[RSNB`p$]}]]}}}], BoxBaselineShift -> -0.5, 
        BoxMargins -> 0.2]& )}], 
   Cell[
    StyleData["ClickToCopyTemplate"], 
    TemplateBoxOptions -> {
     DisplayFunction -> (PaneSelectorBox[{False -> TagBox[
           GridBox[{{#, 
              ButtonBox[
               GraphicsBox[{
                 GrayLevel[0.85], 
                 Thickness[
                  NCache[2/45, 0.044444]], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                   0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 18.}, {
                   9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 18.}, {12., 
                   18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {16.5, 4.5}, {
                   16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {15.75, 17.25}, {
                   15.75, 5.25}, {6.75, 5.25}, {6.75, 17.25}, {8.25, 17.25}, {
                   8.25, 18.}}, {{9.75, 17.25}, {12.75, 17.25}, {12.75, 
                   16.5}, {9.75, 16.5}}}], 
                 
                 FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                  0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                  0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 14.25}, {
                  14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{8.25, 12.}, {
                  14.25, 12.}, {14.25, 11.25}, {8.25, 11.25}}, {{8.25, 
                  9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25, 9.}}, {{8.25, 
                  7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 6.75}}}]}, 
                ImageSize -> 12], ButtonFunction :> Null, 
               Appearance -> {
                "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
               Evaluator -> Automatic, Method -> "Preemptive"]}}, 
            GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}},
             AutoDelete -> False, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], True -> 
         DynamicModuleBox[{RSNB`clickTime$$ = 0., RSNB`timeout$$ = 3.}, 
           TagBox[
            GridBox[{{#, 
               TagBox[
                ButtonBox[
                 DynamicBox[
                  ToBoxes[
                   Refresh[
                    If[AbsoluteTime[] - RSNB`clickTime$$ > RSNB`timeout$$, 
                    RawBoxes[
                    TemplateBox[{
                    PaneSelectorBox[{False -> GraphicsBox[{
                    GrayLevel[0.65], 
                    Thickness[
                    NCache[2/45, 0.044444]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], True -> GraphicsBox[{
                    RGBColor[0.98824, 0.41961, 0.20392], 
                    Thickness[
                    NCache[2/45, 0.044444]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], "\"Click to copy to the clipboard\""},
                     "PrettyTooltipTemplate"]], 
                    RawBoxes[
                    TemplateBox[{
                    GraphicsBox[{
                    RGBColor[0, 
                    NCache[2/3, 0.66667], 0], 
                    Thickness[
                    NCache[2/45, 0.044444]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 12], "\"Copied\""}, 
                    "PrettyTooltipTemplate"]]], UpdateInterval -> 1, 
                    TrackedSymbols :> {RSNB`clickTime$$}], StandardForm], 
                  Evaluator -> "System"], 
                 ButtonFunction :> (RSNB`clickTime$$ = AbsoluteTime[]; 
                  CopyToClipboard[
                    BinaryDeserialize[
                    BaseDecode[#2], Defer]]), 
                 Appearance -> {
                  "Default" -> None, "Hover" -> None, "Pressed" -> None}, 
                 Method -> "Queued", Evaluator -> "System"], 
                MouseAppearanceTag["LinkHand"]]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
           DynamicModuleValues :> {}]}, 
        Dynamic[
         CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
        0]& )}], 
   Cell[
    StyleData["PrettyTooltipTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        TooltipBox[#, 
         FrameBox[
          
          StyleBox[#2, "Text", FontColor -> 
           RGBColor[0.53725, 0.53725, 0.53725], FontSize -> 12, FontWeight -> 
           "Plain", FontTracking -> "Plain", StripOnInput -> False], 
          Background -> RGBColor[0.96078, 0.96078, 0.96078], FrameStyle -> 
          RGBColor[0.89804, 0.89804, 0.89804], FrameMargins -> 8, 
          StripOnInput -> False], TooltipDelay -> 0.1, 
         TooltipStyle -> {Background -> None, CellFrame -> 0}], Annotation[#, 
         Framed[
          Style[
          RSNB`$$tooltip, "Text", FontColor -> 
           RGBColor[0.53725, 0.53725, 0.53725], FontSize -> 12, FontWeight -> 
           "Plain", FontTracking -> "Plain"], Background -> 
          RGBColor[0.96078, 0.96078, 0.96078], FrameStyle -> 
          RGBColor[0.89804, 0.89804, 0.89804], FrameMargins -> 8], 
         "Tooltip"]& ]& )}], 
   Cell[
    StyleData["ToolsGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Template Input\"", "Text", FontFamily -> "Source Sans Pro",
                  FontSize -> 11, StripOnInput -> False], 
                "\"Format selection automatically using appropriate \
documentation styles\""}, "PrettyTooltipTemplate"], ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    2790153672590285854; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "Template Input"; 
                    DefinitionNotebookClient`TemplateInput[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    2790153672590285854]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> GrayLevel[1], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.82745, 0.20784, 0.], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.95686, 0.80196, 0.75], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchjw5tvzu19maOx1UPSQgCsoEiQHGiDHl4/3Zz
6mVTBlwIKAtUg8eQR8f3XQtUAaq8as/zYkrFxwPrf718DEFANlAEKA6UBaoB
qsRuyMP7EBPuZTj8fHYfa+gBxYGyEHPg7kE2BOILoBqCEQExB+QvVEOAIQbx
BS43oLkH4i9IOMMNAYY8UBDoa4ImQABQJVA9UBeyIcAYBAoCQ49IQ4AqgeqB
uoB6IakRyACmBKAgMBaINASoEuR9D0mIIUBAuSFUccl/6oUJVWKHKumEKimW
WnmHOrmYSuUJwkkUlmykA4IR8Z+40h4AAyMnLQ==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchNw/sODmxYXeazzp7OQgCsoEiQHFiDHny4P7h
2ozl2my4EFAWqAaPIbeP7t/ooQlUuVqP87yn9MMwtU8p+hAEZANFgOJAWaAa
oEqshgDNh5iwx1rwY7Len2wTTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwB
hhjEF7jcgOYeiL8g4Qw3BBjyQEGgrwmaAEFAlUD1QF3IhgBjECgIDD0iDQGq
BKoH6gLqhaRGIAOYEoCCwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8gQOKCzZyADEFOPElPYAYDEc1A==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchr1+//vjx4/fv3//AAJANFAGKE2PI8+fPv3z5
gsfZQFmgGjyGvHr16vfv30CRv9++vFrQ/rAk4Ia3DAQB2UARoDhQFqgGqBKr
IUDzISZ8ObP/pp/CZVMGTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwBhhjE
F7jcgOYeiL8g4Qw3BBjyQAbQ1wRNgCCgSqB6oC5kQ4AxCGQAQ49IQ4AqgeqB
uoB6IakRyACmBCADGAtEGgJUCVQP1AUxBAgoN4QqLqFimFAldqiSTqiSYqmV
d6iSi6lVnsABhSUbGQCPs+GAmNIeAMvulj0=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> GrayLevel[0.9], 
              Method -> "Queued", ImageSize -> {All, 20}, Evaluator -> 
              Automatic], FrameStyle -> Directive[
               GrayLevel[0.9], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Literal Input\"", "Text", FontFamily -> "Source Sans Pro", 
                 FontSize -> 11, StripOnInput -> False], 
                "\"Format selection as literal Wolfram Language code\""}, 
               "PrettyTooltipTemplate"], ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    4138174468017918531; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Literal Input"; 
                    DefinitionNotebookClient`LiteralInput[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    4138174468017918531]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> GrayLevel[1], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.82745, 0.20784, 0.], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.95686, 0.80196, 0.75], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchjw5tvzu19maOx1UPSQgCsoEiQHGiDHl4/3Zz
6mVTBlwIKAtUg8eQR8f3XQtUAaq8as/zYkrFxwPrf718DEFANlAEKA6UBaoB
qsRuyMP7EBPuZTj8fHYfa+gBxYGyEHPg7kE2BOILoBqCEQExB+QvVEOAIQbx
BS43oLkH4i9IOMMNAYY8UBDoa4ImQABQJVA9UBeyIcAYBAoCQ49IQ4AqgeqB
uoB6IakRyACmBKAgMBaINASoEuR9D0mIIUBAuSFUccl/6oUJVWKHKumEKimW
WnmHOrmYSuUJwkkUlmykA4IR8Z+40h4AAyMnLQ==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchNw/sODmxYXeazzp7OQgCsoEiQHFiDHny4P7h
2ozl2my4EFAWqAaPIbeP7t/ooQlUuVqP87yn9MMwtU8p+hAEZANFgOJAWaAa
oEqshgDNh5iwx1rwY7Len2wTTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwB
hhjEF7jcgOYeiL8g4Qw3BBjyQEGgrwmaAEFAlUD1QF3IhgBjECgIDD0iDQGq
BKoH6gLqhaRGIAOYEoCCwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8gQOKCzZyADEFOPElPYAYDEc1A==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchr1+//vjx4/fv3//AAJANFAGKE2PI8+fPv3z5
gsfZQFmgGjyGvHr16vfv30CRv9++vFrQ/rAk4Ia3DAQB2UARoDhQFqgGqBKr
IUDzISZ8ObP/pp/CZVMGTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwBhhjE
F7jcgOYeiL8g4Qw3BBjyQAbQ1wRNgCCgSqB6oC5kQ4AxCGQAQ49IQ4AqgeqB
uoB6IakRyACmBCADGAtEGgJUCVQP1AUxBAgoN4QqLqFimFAldqiSTqiSYqmV
d6iSi6lVnsABhSUbGQCPs+GAmNIeAMvulj0=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> GrayLevel[0.9], 
              Method -> "Queued", ImageSize -> {All, 20}, Evaluator -> 
              Automatic], FrameStyle -> Directive[
               GrayLevel[0.9], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Insert Delimiter\"", "Text", FontFamily -> 
                 "Source Sans Pro", FontSize -> 11, StripOnInput -> False], 
                "\"Insert example delimiter\""}, "PrettyTooltipTemplate"], 
              ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    1887802176716758884; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "Insert Delimiter"; 
                    DefinitionNotebookClient`DelimiterInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    1887802176716758884]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> GrayLevel[1], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.82745, 0.20784, 0.], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.95686, 0.80196, 0.75], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchjw5tvzu19maOx1UPSQgCsoEiQHGiDHl4/3Zz
6mVTBlwIKAtUg8eQR8f3XQtUAaq8as/zYkrFxwPrf718DEFANlAEKA6UBaoB
qsRuyMP7EBPuZTj8fHYfa+gBxYGyEHPg7kE2BOILoBqCEQExB+QvVEOAIQbx
BS43oLkH4i9IOMMNAYY8UBDoa4ImQABQJVA9UBeyIcAYBAoCQ49IQ4AqgeqB
uoB6IakRyACmBKAgMBaINASoEuR9D0mIIUBAuSFUccl/6oUJVWKHKumEKimW
WnmHOrmYSuUJwkkUlmykA4IR8Z+40h4AAyMnLQ==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchNw/sODmxYXeazzp7OQgCsoEiQHFiDHny4P7h
2ozl2my4EFAWqAaPIbeP7t/ooQlUuVqP87yn9MMwtU8p+hAEZANFgOJAWaAa
oEqshgDNh5iwx1rwY7Len2wTTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwB
hhjEF7jcgOYeiL8g4Qw3BBjyQEGgrwmaAEFAlUD1QF3IhgBjECgIDD0iDQGq
BKoH6gLqhaRGIAOYEoCCwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8gQOKCzZyADEFOPElPYAYDEc1A==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchr1+//vjx4/fv3//AAJANFAGKE2PI8+fPv3z5
gsfZQFmgGjyGvHr16vfv30CRv9++vFrQ/rAk4Ia3DAQB2UARoDhQFqgGqBKr
IUDzISZ8ObP/pp/CZVMGTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwBhhjE
F7jcgOYeiL8g4Qw3BBjyQAbQ1wRNgCCgSqB6oC5kQ4AxCGQAQ49IQ4AqgeqB
uoB6IakRyACmBCADGAtEGgJUCVQP1AUxBAgoN4QqLqFimFAldqiSTqiSYqmV
d6iSi6lVnsABhSUbGQCPs+GAmNIeAMvulj0=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> GrayLevel[0.9], 
              Method -> "Queued", ImageSize -> {All, 20}, Evaluator -> 
              Automatic], FrameStyle -> Directive[
               GrayLevel[0.9], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            FrameBox[
             ButtonBox[
              TemplateBox[{
                StyleBox[
                "\"Subscripted Variable\"", "Text", FontFamily -> 
                 "Source Sans Pro", FontSize -> 11, StripOnInput -> False], 
                "\"Insert subscripted variable placeholder\""}, 
               "PrettyTooltipTemplate"], ButtonFunction :> 
              With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3787878858871814623; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = 
                    "Subscripted Variable"; 
                    DefinitionNotebookClient`SubscriptInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3787878858871814623]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
              Dynamic[
                FEPrivate`If[
                 CurrentValue[Enabled], 
                 FEPrivate`If[
                  CurrentValue["MouseOver"], {
                  FontColor -> GrayLevel[1], 
                   TaggingRules -> {"ButtonHovering" -> True}}, {
                  FontColor -> RGBColor[0.82745, 0.20784, 0.], 
                   TaggingRules -> {"ButtonHovering" -> False}}], {
                 FontColor -> RGBColor[0.95686, 0.80196, 0.75], 
                  TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchjw5tvzu19maOx1UPSQgCsoEiQHGiDHl4/3Zz
6mVTBlwIKAtUg8eQR8f3XQtUAaq8as/zYkrFxwPrf718DEFANlAEKA6UBaoB
qsRuyMP7EBPuZTj8fHYfa+gBxYGyEHPg7kE2BOILoBqCEQExB+QvVEOAIQbx
BS43oLkH4i9IOMMNAYY8UBDoa4ImQABQJVA9UBeyIcAYBAoCQ49IQ4AqgeqB
uoB6IakRyACmBKAgMBaINASoEuR9D0mIIUBAuSFUccl/6oUJVWKHKumEKimW
WnmHOrmYSuUJwkkUlmykA4IR8Z+40h4AAyMnLQ==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchNw/sODmxYXeazzp7OQgCsoEiQHFiDHny4P7h
2ozl2my4EFAWqAaPIbeP7t/ooQlUuVqP87yn9MMwtU8p+hAEZANFgOJAWaAa
oEqshgDNh5iwx1rwY7Len2wTTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwB
hhjEF7jcgOYeiL8g4Qw3BBjyQEGgrwmaAEFAlUD1QF3IhgBjECgIDD0iDQGq
BKoH6gLqhaRGIAOYEoCCwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8gQOKCzZyADEFOPElPYAYDEc1A==
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchr1+//vjx4/fv3//AAJANFAGKE2PI8+fPv3z5
gsfZQFmgGjyGvHr16vfv30CRv9++vFrQ/rAk4Ia3DAQB2UARoDhQFqgGqBKr
IUDzISZ8ObP/pp/CZVMGTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwBhhjE
F7jcgOYeiL8g4Qw3BBjyQAbQ1wRNgCCgSqB6oC5kQ4AxCGQAQ49IQ4AqgeqB
uoB6IakRyACmBCADGAtEGgJUCVQP1AUxBAgoN4QqLqFimFAldqiSTqiSYqmV
d6iSi6lVnsABhSUbGQCPs+GAmNIeAMvulj0=
                  "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                  Interleaving -> True]}, Background -> GrayLevel[0.9], 
              Method -> "Queued", ImageSize -> {All, 20}, Evaluator -> 
              Automatic], FrameStyle -> Directive[
               GrayLevel[0.9], 
               AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
             False, StripOnInput -> False], 
            ActionMenuBox[
             FrameBox[
              ButtonBox[
               TemplateBox[{
                 StyleBox[
                  
                  TemplateBox[{
                   "\"Tables\"", 
                    "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\
\[FilledDownTriangle]\""}, "RowDefault"], "Text", FontFamily -> 
                  "Source Sans Pro", FontSize -> 11, StripOnInput -> False], 
                 "\"Table functions\""}, "PrettyTooltipTemplate"], 
               ButtonFunction :> 
               With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                 Quiet[
                  
                  Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                   Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3216557251994556740; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[Null]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3216557251994556740]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                   Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
               Dynamic[
                 FEPrivate`If[
                  CurrentValue[Enabled], 
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   FontColor -> GrayLevel[1], 
                    TaggingRules -> {"ButtonHovering" -> True}}, {
                   FontColor -> RGBColor[0.82745, 0.20784, 0.], 
                    TaggingRules -> {"ButtonHovering" -> False}}], {
                  FontColor -> RGBColor[0.95686, 0.80196, 0.75], 
                   TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                 "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchjw5tvzu19maOx1UPSQgCsoEiQHGiDHl4/3Zz
6mVTBlwIKAtUg8eQR8f3XQtUAaq8as/zYkrFxwPrf718DEFANlAEKA6UBaoB
qsRuyMP7EBPuZTj8fHYfa+gBxYGyEHPg7kE2BOILoBqCEQExB+QvVEOAIQbx
BS43oLkH4i9IOMMNAYY8UBDoa4ImQABQJVA9UBeyIcAYBAoCQ49IQ4AqgeqB
uoB6IakRyACmBKAgMBaINASoEuR9D0mIIUBAuSFUccl/6oUJVWKHKumEKimW
WnmHOrmYSuUJwkkUlmykA4IR8Z+40h4AAyMnLQ==
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchNw/sODmxYXeazzp7OQgCsoEiQHFiDHny4P7h
2ozl2my4EFAWqAaPIbeP7t/ooQlUuVqP87yn9MMwtU8p+hAEZANFgOJAWaAa
oEqshgDNh5iwx1rwY7Len2wTTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwB
hhjEF7jcgOYeiL8g4Qw3BBjyQEGgrwmaAEFAlUD1QF3IhgBjECgIDD0iDQGq
BKoH6gLqhaRGIAOYEoCCwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8gQOKCzZyADEFOPElPYAYDEc1A==
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchr1+//vjx4/fv3//AAJANFAGKE2PI8+fPv3z5
gsfZQFmgGjyGvHr16vfv30CRv9++vFrQ/rAk4Ia3DAQB2UARoDhQFqgGqBKr
IUDzISZ8ObP/pp/CZVMGTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwBhhjE
F7jcgOYeiL8g4Qw3BBjyQAbQ1wRNgCCgSqB6oC5kQ4AxCGQAQ49IQ4AqgeqB
uoB6IakRyACmBCADGAtEGgJUCVQP1AUxBAgoN4QqLqFimFAldqiSTqiSYqmV
d6iSi6lVnsABhSUbGQCPs+GAmNIeAMvulj0=
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True]}, Background -> GrayLevel[0.9], 
               Method -> "Queued", ImageSize -> {All, 20}, Evaluator -> 
               Automatic], FrameStyle -> Directive[
                GrayLevel[0.9], 
                AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
              False, StripOnInput -> False], {
             "\"Insert table with two columns\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    5800166344906378520; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Insert table with two columns"; 
                    DefinitionNotebookClient`TableInsert[2]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    5800166344906378520]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Insert table with three columns\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    533841403879783297; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Insert table with three columns"; 
                    DefinitionNotebookClient`TableInsert[3]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    533841403879783297]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Add a row to the selected table\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    4413051590217973467; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Add a row to the selected table"; 
                    DefinitionNotebookClient`TableRowInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    4413051590217973467]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Sort the selected table\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    9150037060110806081; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Sort the selected table"; 
                    DefinitionNotebookClient`TableSort[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    9150037060110806081]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Merge selected tables\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    2347719643166780208; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Tables"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Merge selected tables"; 
                    DefinitionNotebookClient`TableMerge[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    2347719643166780208]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]]}, Appearance -> None, Method -> "Queued"], 
            ActionMenuBox[
             FrameBox[
              ButtonBox[
               StyleBox[
                
                TemplateBox[{
                 "\"Cells\"", 
                  "\"\[ThinSpace]\[ThinSpace]\[ThinSpace]\[FilledDownTriangle]\
\""}, "RowDefault"], "Text", FontFamily -> "Source Sans Pro", FontSize -> 11, 
                StripOnInput -> False], ButtonFunction :> 
               With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
                 Quiet[
                  
                  Block[{$ContextPath = RSNB`$cp$, 
                    ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                    DefinitionNotebookClient`$ButtonCodeID = None}, 
                   Internal`WithLocalSettings[
                    DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3216557251994556740; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[Null]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3216557251994556740]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                   Null]]], FrameMargins -> {{4, 4}, {0, 0}}, BaseStyle -> 
               Dynamic[
                 FEPrivate`If[
                  CurrentValue[Enabled], 
                  FEPrivate`If[
                   CurrentValue["MouseOver"], {
                   FontColor -> GrayLevel[1], 
                    TaggingRules -> {"ButtonHovering" -> True}}, {
                   FontColor -> RGBColor[0.82745, 0.20784, 0.], 
                    TaggingRules -> {"ButtonHovering" -> False}}], {
                  FontColor -> RGBColor[0.95686, 0.80196, 0.75], 
                   TaggingRules -> {"ButtonHovering" -> False}}], Evaluator -> 
                 "System"], Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchjw5tvzu19maOx1UPSQgCsoEiQHGiDHl4/3Zz
6mVTBlwIKAtUg8eQR8f3XQtUAaq8as/zYkrFxwPrf718DEFANlAEKA6UBaoB
qsRuyMP7EBPuZTj8fHYfa+gBxYGyEHPg7kE2BOILoBqCEQExB+QvVEOAIQbx
BS43oLkH4i9IOMMNAYY8UBDoa4ImQABQJVA9UBeyIcAYBAoCQ49IQ4AqgeqB
uoB6IakRyACmBKAgMBaINASoEuR9D0mIIUBAuSFUccl/6oUJVWKHKumEKimW
WnmHOrmYSuUJwkkUlmykA4IR8Z+40h4AAyMnLQ==
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchNw/sODmxYXeazzp7OQgCsoEiQHFiDHny4P7h
2ozl2my4EFAWqAaPIbeP7t/ooQlUuVqP87yn9MMwtU8p+hAEZANFgOJAWaAa
oEqshgDNh5iwx1rwY7Len2wTTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwB
hhjEF7jcgOYeiL8g4Qw3BBjyQEGgrwmaAEFAlUD1QF3IhgBjECgIDD0iDQGq
BKoH6gLqhaRGIAOYEoCCwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8gQOKCzZyADEFOPElPYAYDEc1A==
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4BllAJchr1+//vjx4/fv3//AAJANFAGKE2PI8+fPv3z5
gsfZQFmgGjyGvHr16vfv30CRv9++vFrQ/rAk4Ia3DAQB2UARoDhQFqgGqBKr
IUDzISZ8ObP/pp/CZVMGTAQUB8pCzIG7B9kQiC+AarBqR0YQc4Dq0QwBhhjE
F7jcgOYeiL8g4Qw3BBjyQAbQ1wRNgCCgSqB6oC5kQ4AxCGQAQ49IQ4AqgeqB
uoB6IakRyACmBCADGAtEGgJUCVQP1AUxBAgoN4QqLqFimFAldqiSTqiSYqmV
d6iSi6lVnsABhSUbGQCPs+GAmNIeAMvulj0=
                   "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
                   Interleaving -> True]}, Background -> GrayLevel[0.9], 
               Method -> "Queued", ImageSize -> {All, 20}, Evaluator -> 
               Automatic], FrameStyle -> Directive[
                GrayLevel[0.9], 
                AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> 
              False, StripOnInput -> False], {
             "\"Insert comment for reviewer\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    2572781756330727330; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Cells"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Insert comment for reviewer"; 
                    DefinitionNotebookClient`CommentInsert[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    2572781756330727330]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Mark/unmark selected cells as comments\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    3646530685697756512; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Cells"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Mark/unmark selected cells as comments"; 
                    DefinitionNotebookClient`CommentToggle[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    3646530685697756512]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]], "\"Mark/unmark selected cells as excluded\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    1866935765212102190; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Cells"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Mark/unmark selected cells as excluded"; 
                    DefinitionNotebookClient`ExclusionToggle[]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    1866935765212102190]], 
                    DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
                  Null]]]}, Appearance -> None, Method -> "Queued"]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Center}}}, 
          AutoDelete -> False, 
          GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
              GrayLevel[0.9]}}, 
          GridBoxFrame -> {
           "Columns" -> False, "RowsIndexed" -> {1 -> GrayLevel[0.9]}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {
           "Columns" -> {5, {0.5}, 5}, "Rows" -> {{Automatic}}}, FrameStyle -> 
          GrayLevel[0.75]], "Grid"], ButtonBoxOptions -> {Enabled -> Dynamic[
            Not[
             TrueQ[DefinitionNotebookClient`$ButtonsDisabled]], 
            TrackedSymbols :> {DefinitionNotebookClient`$ButtonsDisabled}]}, 
        StripOnInput -> False]& )}], 
   Cell[
    StyleData["MainGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            TagBox[
             GridBox[{{
                GraphicsBox[{
                  Thickness[0.022222], {
                   FaceForm[{
                    RGBColor[0.87451, 0.27843, 0.031373], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}}}, {{{45., 22.5}, {45., 10.074}, {34.926, 0.}, {22.5, 
                    0.}, {10.074, 0.}, {0., 10.074}, {0., 22.5}, {0., 
                    34.926}, {10.074, 45.}, {22.5, 45.}, {34.926, 45.}, {45., 
                    34.926}, {45., 22.5}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                    3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 0}, {1, 3, 
                    3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                    3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGAwAWIQLckSxqe7SdlhmnN3zvPblg4w/smyffOl/K0cEp5e
ULq9U9lhT8lkCZZrVg6VL9UMOd4oO1SLrHN/GGXtcLUCKOCh4sDDpN0udtPa
4fnvlR8v8ao6ZIE12ELMrVZzAHLC+HjtHICGz32fruGQC1Zo57BASv+uCpsW
RP9Me4g9YjoQe3gcHICqlx/z1nNgAAEFB4j6Y/oOQMvOfVd2gLhjlgGEz+zg
oBnTf+irhiFEfw/UvDJDiP2+9g7qhhxrZGYZQtS9sHP48vdKxcs2Q4i72u0c
pEHOSTSEuxfsTiFDiPhCWwcXoHd+rzRwWOS67fPfEFuHx0tnH1EoMHDYUJQx
8a2MrUPQDrnW14IGUPfaOnzTAFq0VR8aXrYOoFA6V64HcccvWwfTuF2ePEy6
UPPtHIC+CH68VBvOP70QaNFeLTg/X6j5wKlELYdPl3yTBCLsIP7U0YK49y3U
PR80HQJ6p+cJHbaB88HqZ1jD1QNdUyWSZwWJH2stiHtuWcLdC+ND4lvfwbzT
MeHpBEt4+IPld1lA4p9DH+LuVgu4eeh8sH18hnA+2J6velB3aUHSyxE9iP8U
9aDpBMH3A/rWskQHYt8JBQw+TD0kPpTh5sHSMzgd/0TwYe6B8WHulY1Ksb7f
rwDng+PHSQES31csIPF7UREePgCOg02w
                    "], {{19.051, 14.242}, {19.051, 27.594}, {23.828, 
                    27.594}, {23.828, 26.543}, {21.426, 26.309}, {21.375, 
                    26.258}, {21.375, 24.219}, {21.375, 17.535}, {21.375, 
                    15.602}, {21.426, 15.547}, {23.828, 15.316}, {23.828, 
                    14.242}}, {{24.578, 18.75}, {24.578, 23.078}, {24.578, 
                    23.539}, {24.953, 23.914}, {25.418, 23.91}, {29.746, 
                    23.91}, {30.203, 23.91}, {30.578, 23.539}, {30.578, 
                    23.078}, {30.578, 18.75}, {30.582, 18.289}, {30.207, 
                    17.91}, {29.746, 17.91}, {25.418, 17.91}, {24.953, 
                    17.906}, {24.574, 18.285}, {24.578, 18.75}}, {{31.328, 
                    14.242}, {31.328, 15.316}, {33.684, 15.539}, {33.789, 
                    15.602}, {33.789, 17.641}, {33.789, 24.188}, {33.789, 
                    26.227}, {33.684, 26.281}, {31.328, 26.512}, {31.328, 
                    27.586}, {36.113, 27.586}, {36.113, 14.234}}}]}}, {
                 ImageSize -> {Automatic, 32}, 
                  ImagePadding -> {{5, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.25], AspectRatio -> Automatic, Background -> 
                  RGBColor[0.98824, 0.41961, 0.20392], 
                  ImageSize -> {45., 45.}, 
                  PlotRange -> {{0., 45.}, {0., 45.}}}], 
                StyleBox[
                 TagBox[
                  GridBox[{{
                    StyleBox[
                    "\"Function Resource\"", FontFamily -> "Source Sans Pro", 
                    FontWeight -> "SemiBold", StripOnInput -> False], 
                    StyleBox[
                    "\"DEFINITION NOTEBOOK\"", FontFamily -> 
                    "Source Sans Pro", FontTracking -> "SemiCondensed", 
                    FontVariations -> {"CapsType" -> "AllSmallCaps"}, 
                    StripOnInput -> False]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                   AutoDelete -> False, 
                   GridBoxDividers -> {
                    "ColumnsIndexed" -> {2 -> RGBColor[1., 1., 1.]}, 
                    "Rows" -> {{None}}}, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                  "Grid"], FontSize -> 24, FontColor -> RGBColor[1., 1., 1.], 
                 StripOnInput -> False]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], "Grid"],
             "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
            "\[SpanFromLeft]", "\[SpanFromLeft]", "\[SpanFromLeft]", 
            "\[SpanFromLeft]", 
            TemplateBox[{
              StyleBox[
               
               TemplateBox[{
                "\"Function Repository\"", "\" \[RightGuillemet]  \""}, 
                "RowDefault"], "Text", FontColor -> RGBColor[1., 1., 1.], 
               StripOnInput -> False], 
              "https://resources.wolframcloud.com/FunctionRepository"}, 
             "HyperlinkURL"]}, {
            TemplateBox[{
              
              TemplateBox[{
               "\"Open Sample\"", 
                "\"View a completed sample definition notebook\""}, 
               "PrettyTooltipTemplate"], Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 4393071033038384034; (
                DefinitionNotebookClient`$ClickedButton = "Open Sample"; 
                DefinitionNotebookClient`ViewExampleNotebook[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[4393071033038384034]]& , 
              "\"View a completed sample definition notebook\"", False}, 
             "OrangeButtonTemplate"], 
            TemplateBox[{
              
              TemplateBox[{
               "\"Style Guidelines\"", 
                "\"View general guidelines for authoring resource \
functions\""}, "PrettyTooltipTemplate"], Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 5906117565281445171; (
                DefinitionNotebookClient`$ClickedButton = "Style Guidelines"; 
                DefinitionNotebookClient`ViewStyleGuidelines[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[5906117565281445171]]& , 
              "\"View general guidelines for authoring resource functions\"", 
              False}, "OrangeButtonTemplate"], 
            TemplateBox[{
              TemplateBox[{
                TagBox[
                 GridBox[{{"\"Tools\"", 
                    PaneSelectorBox[{False -> GraphicsBox[{
                    RGBColor[1., 1., 1.], 
                    AbsoluteThickness[1.], 
                    LineBox[{{0, 0}, {0, 10}, {10, 10}, {10, 0}, {0, 0}}], 
                    LineBox[{{5, 2.5}, {5, 7.5}}], 
                    LineBox[{{2.5, 5}, {7.5, 5}}]}, ImageSize -> 9, 
                    PlotRangePadding -> 1.5], True -> GraphicsBox[{
                    RGBColor[1., 1., 1.], 
                    AbsoluteThickness[1.], 
                    LineBox[{{0, 0}, {0, 10}, {10, 10}, {10, 0}, {0, 0}}], 
                    LineBox[{{2.5, 5}, {7.5, 5}}]}, ImageSize -> 9, 
                    PlotRangePadding -> 1.5]}, 
                    Dynamic[
                    CurrentValue[
                    EvaluationNotebook[], {TaggingRules, "ToolsOpen"}, True]],
                     BaselinePosition -> Scaled[0]]}}, 
                  GridBoxAlignment -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Baseline}}}, 
                  AutoDelete -> False, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                  GridBoxSpacings -> {"Columns" -> {{0.35}}}], "Grid"], 
                "\"Toggle documentation toolbar\""}, "PrettyTooltipTemplate"],
               Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 5074018684552945401; (
                DefinitionNotebookClient`$ClickedButton = "Tools"; 
                DefinitionNotebookClient`ToggleToolbar[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[5074018684552945401]]& , 
              "\"Toggle documentation toolbar\"", False}, 
             "OrangeButtonTemplate"], 
            TagBox[
             
             GridBox[{{"\"\"", "\"\""}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
              False, GridBoxDividers -> {
               "ColumnsIndexed" -> {2 -> True}, "Rows" -> {{False}}}, 
              GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{2}}}, 
              GridBoxSpacings -> {"Columns" -> {{0.5}}}, FrameStyle -> 
              RGBColor[0.99412, 0.7098, 0.60196]], "Grid"], 
            TemplateBox[{
              
              TemplateBox[{
               "\"Check\"", "\"Check notebook for potential errors\""}, 
               "PrettyTooltipTemplate"], Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 7891204313296928191; (
                DefinitionNotebookClient`$ClickedButton = "Check"; 
                DefinitionNotebookClient`CheckDefinitionNotebook[
                  ButtonNotebook[]]), 
               DefinitionNotebookClient`ButtonCodeID[7891204313296928191]]& , 
              "\"Check notebook for potential errors\"", False}, 
             "OrangeButtonTemplate"], 
            TemplateBox[{
              
              TemplateBox[{"\"Preview\"", "\"Generate a preview notebook\""}, 
               "PrettyTooltipTemplate"], Annotation[
              DefinitionNotebookClient`$ButtonCodeID = 4299709568580201021; (
                DefinitionNotebookClient`$ClickedButton = "Preview"; 
                DefinitionNotebookClient`PreviewResource[
                  ButtonNotebook[], "Notebook"]), 
               DefinitionNotebookClient`ButtonCodeID[4299709568580201021]]& , 
              "\"Generate a preview notebook\"", True}, 
             "OrangeButtonTemplate"], 
            ActionMenuBox[
             TemplateBox[{
               TemplateBox[{"\"Deploy\"", 
                 TemplateBox[{5}, "Spacer1"], "\"\[FilledDownTriangle]\""}, 
                "RowDefault"], Annotation[
               DefinitionNotebookClient`$ButtonCodeID = 1898445052439169298; 
                Null, 
                DefinitionNotebookClient`ButtonCodeID[1898445052439169298]]& ,
                "\"\"", True}, "OrangeButtonTemplate"], {
             "\"Locally on this computer\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    8714502586816766511; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Locally on this computer"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "Local"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    8714502586816766511]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], "\"For my cloud account\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    1389539917011878958; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "For my cloud account"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "CloudPrivate"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    1389539917011878958]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], "\"Publicly in the cloud\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    5593410685219912767; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "Publicly in the cloud"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "CloudPublic"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    5593410685219912767]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]], 
              "\"In this session only (without documentation)\"" :> 
              With[{RSNB`nb$ = InputNotebook[], RSNB`$cp$ = $ContextPath}, 
                Quiet[
                 
                 Block[{$ContextPath = RSNB`$cp$, 
                   ResourceSystemClient`$\
AsyncronousResourceInformationUpdates = False, 
                   DefinitionNotebookClient`$SuppressDynamicEvents = True, 
                   DefinitionNotebookClient`$ButtonCodeID = None}, 
                  Internal`WithLocalSettings[
                   DefinitionNotebookClient`$ButtonsDisabled = True; 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ProgressIndicator[Appearance -> "Necklace"]; Once[
                    ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                    "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                    Annotation[
                    DefinitionNotebookClient`$ButtonCodeID = 
                    8586347731213964380; 
                    DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = 
                    HoldForm[
                    DefinitionNotebookClient`$ClickedButton = "Deploy"; 
                    DefinitionNotebookClient`$ClickedAction = 
                    "In this session only (without documentation)"; 
                    DefinitionNotebookClient`DisplayStripe[
                    ButtonNotebook[], 
                    DefinitionNotebookClient`DeployResource[
                    ButtonNotebook[], "KernelSession"]]]]], 
                    DefinitionNotebookClient`ButtonCodeID[
                    8586347731213964380]], 
                    CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
                    ""; DefinitionNotebookClient`$ButtonsDisabled = False; 
                    Null]; Null]]]}, Appearance -> None, Method -> "Queued"], 
            ItemBox[
             StyleBox[
              DynamicBox[
               ToBoxes[
                CurrentValue[
                 EvaluationNotebook[], {TaggingRules, "StatusMessage"}, ""], 
                StandardForm], Initialization :> (CurrentValue[
                  EvaluationNotebook[], {TaggingRules, "StatusMessage"}] = 
                "")], "Text", 
              GrayLevel[1], StripOnInput -> False], ItemSize -> Fit, 
             StripOnInput -> False], 
            DynamicBox[
             ToBoxes[
              If[
               CurrentValue[
                EvaluationNotebook[], {
                TaggingRules, "SubmissionReviewData", "Review"}, False], 
               RawBoxes[
                TemplateBox[{
                  TemplateBox[{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Thickness[0.06349], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBWIWIGZigIEX9mCqQd8Bwv+Bnc/A54CiHs5HV6/ngJUP
p2HmwdTp4FCHTvOhqYfZrw2lhdDk0fno6tHcD1PPwOSAnY+uns8BAE8cGz4=

                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgB2IWIGZigAEJBwjNB6EblHHwX9ijqofxoeoYhKC0Bg4+
Hw4apk4Uap8aDr4QDhqqDu4uVRx8URw0TJ001D5lHHwJHDRUHYMclFbCwZfG
QUPVNSjgp+HmIWgAG/wcEg==
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10EEKgCAQhWGpFtEyEAYGggQj6RKeoSMErbuCR0/IWfTgCcPwy7fR9XrO
u3fOTXWGOp2zM+ZvH2170nv+e2sFH0ijt45/XxJp9NgRPHYAb63kHhu9tf2H
eU8aPfbS9kxawAvxnrSCx3c3XzbS6JX4RFrAS34B53ckaw==
                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False]}, 
                    ImageSize -> 15, PlotRange -> {{0., 15.75}, {0., 16.5}}, 
                    AspectRatio -> 1.15], "\"Submit Update\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, "ColumnsIndexed" -> {2 -> 0.5}, 
                    "Rows" -> {{0}}}], "Grid"], 
                    "\"Submit changes to update your function submission\""}, 
                   "PrettyTooltipTemplate"], Annotation[
                  DefinitionNotebookClient`$ButtonCodeID = 
                    3196298050911436087; (
                    DefinitionNotebookClient`$ClickedButton = "SubmitUpdate"; 
                    With[{RSNB`nb = ButtonNotebook[]}, 
                    DefinitionNotebookClient`DisplayStripe[RSNB`nb, 
                    DefinitionNotebookClient`SubmitRepositoryUpdate[RSNB`nb], 
                    "ShowProgress" -> True]]), 
                   DefinitionNotebookClient`ButtonCodeID[
                   3196298050911436087]]& , 
                  "\"Submit changes to update your function submission\"", 
                  True}, "OrangeButtonTemplate"]], 
               RawBoxes[
                TemplateBox[{
                  TemplateBox[{
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    Thickness[0.06349], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBWIWIGZigIEX9mCqQd8Bwv+Bnc/A54CiHs5HV6/ngJUP
p2HmwdTp4FCHTvOhqYfZrw2lhdDk0fno6tHcD1PPwOSAnY+uns8BAE8cGz4=

                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False], 
                    StyleBox[{
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgB2IWIGZigAEJBwjNB6EblHHwX9ijqofxoeoYhKC0Bg4+
Hw4apk4Uap8aDr4QDhqqDu4uVRx8URw0TJ001D5lHHwJHDRUHYMclFbCwZfG
QUPVNSjgp+HmIWgAG/wcEg==
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1,
                     0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                    2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 
                    1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0,
                     1, 0}, {0, 1, 0}}}, CompressedData["
1:eJx10EEKgCAQhWGpFtEyEAYGggQj6RKeoSMErbuCR0/IWfTgCcPwy7fR9XrO
u3fOTXWGOp2zM+ZvH2170nv+e2sFH0ijt45/XxJp9NgRPHYAb63kHhu9tf2H
eU8aPfbS9kxawAvxnrSCx3c3XzbS6JX4RFrAS34B53ckaw==
                    "]]}, {
                    FaceForm[
                    RGBColor[1., 1., 1.]]}, StripOnInput -> False]}, 
                    ImageSize -> 15, PlotRange -> {{0., 15.75}, {0., 16.5}}, 
                    AspectRatio -> 1.15], "\"Submit to Repository\""}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0}}, "ColumnsIndexed" -> {2 -> 0.5}, 
                    "Rows" -> {{0}}}], "Grid"], 
                    "\"Submit your function to the Wolfram Function \
Repository\""}, "PrettyTooltipTemplate"], Annotation[
                  DefinitionNotebookClient`$ButtonCodeID = 
                    3704832848557640569; (
                    DefinitionNotebookClient`$ClickedButton = "Submit"; 
                    With[{RSNB`nb = ButtonNotebook[]}, 
                    DefinitionNotebookClient`DisplayStripe[RSNB`nb, 
                    DefinitionNotebookClient`SubmitRepository[RSNB`nb], 
                    "ShowProgress" -> True]]), 
                   DefinitionNotebookClient`ButtonCodeID[
                   3704832848557640569]]& , 
                  "\"Submit your function to the Wolfram Function \
Repository\"", True}, "OrangeButtonTemplate"]]], StandardForm], Evaluator -> 
             "System", SingleEvaluation -> True]}}, 
          GridBoxAlignment -> {
           "Columns" -> {{Left}}, "ColumnsIndexed" -> {-1 -> Right}, 
            "Rows" -> {{Center}}}, AutoDelete -> False, 
          GridBoxBackground -> {"Columns" -> {{None}}, "Rows" -> {
              RGBColor[0.98824, 0.41961, 0.20392], 
              RGBColor[0.92157, 0.34118, 0.10588]}}, 
          GridBoxFrame -> {
           "Columns" -> False, 
            "RowsIndexed" -> {
             1 -> RGBColor[0.98824, 0.41961, 0.20392], 2 -> 
              RGBColor[0.92157, 0.34118, 0.10588]}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {
           "Columns" -> {5, {0.9}, 5}, 
            "RowsIndexed" -> {1 -> 1.1, 2 -> 1.3, 3 -> 0.25}}, FrameStyle -> 
          RGBColor[0.98824, 0.41961, 0.20392]], "Grid"], 
        ButtonBoxOptions -> {Enabled -> Dynamic[
            Not[
             TrueQ[DefinitionNotebookClient`$ButtonsDisabled]], 
            TrackedSymbols :> {DefinitionNotebookClient`$ButtonsDisabled}]}, 
        StripOnInput -> False]& )}], 
   Cell[
    StyleData["ReviewerCommentLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TagBox[
        GridBox[{{#, 
           TemplateBox[{
             GraphicsBox[{
               Thickness[0.022222], {
                FaceForm[{
                  RGBColor[0.87451, 0.27843, 0.031373], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}}}, {{{45., 22.5}, {45., 10.074}, {34.926, 0.}, {22.5, 
                 0.}, {10.074, 0.}, {0., 10.074}, {0., 22.5}, {0., 34.926}, {
                 10.074, 45.}, {22.5, 45.}, {34.926, 45.}, {45., 34.926}, {
                 45., 22.5}}}]}, {
                FaceForm[{
                  RGBColor[1., 1., 1.], 
                  Opacity[1.]}], 
                
                FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                  1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
                   3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                  0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                  1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 
                  2, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                  3}, {0, 1, 0}}, {{0, 2, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                  3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 
                  0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                  0, 1, 0}}}, {CompressedData["
1:eJxTTMoPSmViYGAwAWIQLckSxqe7SdlhmnN3zvPblg4w/smyffOl/K0cEp5e
ULq9U9lhT8lkCZZrVg6VL9UMOd4oO1SLrHN/GGXtcLUCKOCh4sDDpN0udtPa
4fnvlR8v8ao6ZIE12ELMrVZzAHLC+HjtHICGz32fruGQC1Zo57BASv+uCpsW
RP9Me4g9YjoQe3gcHICqlx/z1nNgAAEFB4j6Y/oOQMvOfVd2gLhjlgGEz+zg
oBnTf+irhiFEfw/UvDJDiP2+9g7qhhxrZGYZQtS9sHP48vdKxcs2Q4i72u0c
pEHOSTSEuxfsTiFDiPhCWwcXoHd+rzRwWOS67fPfEFuHx0tnH1EoMHDYUJQx
8a2MrUPQDrnW14IGUPfaOnzTAFq0VR8aXrYOoFA6V64HcccvWwfTuF2ePEy6
UPPtHIC+CH68VBvOP70QaNFeLTg/X6j5wKlELYdPl3yTBCLsIP7U0YK49y3U
PR80HQJ6p+cJHbaB88HqZ1jD1QNdUyWSZwWJH2stiHtuWcLdC+ND4lvfwbzT
MeHpBEt4+IPld1lA4p9DH+LuVgu4eeh8sH18hnA+2J6velB3aUHSyxE9iP8U
9aDpBMH3A/rWskQHYt8JBQw+TD0kPpTh5sHSMzgd/0TwYe6B8WHulY1Ksb7f
rwDng+PHSQES31csIPF7UREePgCOg02w
                  "], {{19.051, 14.242}, {19.051, 27.594}, {23.828, 27.594}, {
                  23.828, 26.543}, {21.426, 26.309}, {21.375, 26.258}, {
                  21.375, 24.219}, {21.375, 17.535}, {21.375, 15.602}, {
                  21.426, 15.547}, {23.828, 15.316}, {23.828, 14.242}}, {{
                  24.578, 18.75}, {24.578, 23.078}, {24.578, 23.539}, {24.953,
                   23.914}, {25.418, 23.91}, {29.746, 23.91}, {30.203, 
                  23.91}, {30.578, 23.539}, {30.578, 23.078}, {30.578, 
                  18.75}, {30.582, 18.289}, {30.207, 17.91}, {29.746, 
                  17.91}, {25.418, 17.91}, {24.953, 17.906}, {24.574, 
                  18.285}, {24.578, 18.75}}, {{31.328, 14.242}, {31.328, 
                  15.316}, {33.684, 15.539}, {33.789, 15.602}, {33.789, 
                  17.641}, {33.789, 24.188}, {33.789, 26.227}, {33.684, 
                  26.281}, {31.328, 26.512}, {31.328, 27.586}, {36.113, 
                  27.586}, {36.113, 14.234}}}]}}, {
              ImageSize -> 12, AspectRatio -> Automatic, Background -> None, 
               ImageSize -> {45., 45.}, PlotRange -> {{0., 45.}, {0., 45.}}}],
              "Wolfram Function Repository Reviewer"}, 
            "PrettyTooltipTemplate"]}}, 
         GridBoxAlignment -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Center}}}, AutoDelete -> 
         False, GridBoxItemSize -> {
          "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
         GridBoxSpacings -> {"Columns" -> {{0.25}}}], "Grid"]& )}], 
   Cell[
    StyleData["CommentCellLabelTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        TagBox[
         GridBox[{{
            StyleBox[#, FontSize -> 11]}, {
            StyleBox[
             DynamicBox[
              ToBoxes[
               DateString[
                TimeZoneConvert[
                 DateObject[#2, TimeZone -> 0]], {
                "Month", "/", "Day", "/", "Year", " ", "Hour24", ":", 
                 "Minute"}], StandardForm], SingleEvaluation -> True], 
             FontSize -> 9]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}], 
         "Grid"], "CommentLabel", ShowStringCharacters -> False]& )}], 
   Cell[
    StyleData["OrangeButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (FrameBox[
        ButtonBox[
         StyleBox[#, "Text", FontFamily -> "Source Sans Pro", FontWeight -> 
          "SemiBold", FontTracking -> "Condensed", FontSize -> 13, FontColor -> 
          Dynamic[
            FEPrivate`If[
             CurrentValue[Enabled], 
             GrayLevel[1], 
             RGBColor[0.95686, 0.80196, 0.75]], Evaluator -> "System"], 
          StripOnInput -> False], ButtonFunction :> 
         With[{RSNB`nb$ = ButtonNotebook[]}, 
           If[#4, CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = 
             ProgressIndicator[Appearance -> "Necklace"]]; 
           With[{RSNB`$cp$ = $ContextPath}, 
             Quiet[
              
              Block[{$ContextPath = RSNB`$cp$, 
                ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
                False, DefinitionNotebookClient`$ButtonCodeID = None}, 
               Internal`WithLocalSettings[
                DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                   ReleaseHold[
                    CurrentValue[
                    RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                   "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                 Annotation[
                 DefinitionNotebookClient`$ButtonCodeID = 3145484069433207908; 
                  DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                    ReleaseHold[
                    DefinitionNotebookClient`$ButtonCode = HoldForm[
                    #2[]]]], 
                  DefinitionNotebookClient`ButtonCodeID[3145484069433207908]],
                  DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
               Null]]]; 
           CurrentValue[RSNB`nb$, {TaggingRules, "StatusMessage"}] = ""; 
           Null], FrameMargins -> {{5, 5}, {0, 0}}, 
         Appearance -> {"Default" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4HW4NCUIlyHPAkQfuPPftue4ZskMQUA2UAQoTpQhYVJ3
XXgumzLgQkBZoBo8hjwLFLtuzQJSbIbDELA4UA1QJXZDwqSgJhCBgCrh7kE2
BL8vsPsL1RBgiOHzBQ5/QcIZbggw5ElyBgQBdSEbAoxBMgwB6gLqhaRGIAOY
EsgwBKgLYggQUG4IVVxCxTChSuxQJZ1QJcVSK+9QJxdTqTyhWslGbhmLHxBT
2gMAMUz3Hw==
             "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
             Interleaving -> True], "Hover" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4HW4NCUIlyF3/cTOOAvtteRZb8ABQUA2UAQoTowhL0Ol
jtrxL9dmw4WAskA1eAy57y++yYgTjwkQBFQDVInVEKD5xJgANwfuHmRD8PsC
q7/QDAGGGEkmQBAknOGGAEOeDEOAupANAcYgGYYAdQH1QlIjkAFMCWQYAtQF
MQQIKDeEKi6hYphQJXaokk6okmKplXeokoupVZ5Qq2Qju4zFD4gp7QFpR8IT

             "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
             Interleaving -> True], "Pressed" -> Image[CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBAkBOaF5xZnpeaopnXklqemqRRRIz
UFAcikHs/4QAMWqA4HW4NCUIlyHvKz2/LG7+eWr737fPIAjIBooAxYkx5E2M
0rets/E4GygLVIPHkHclTn+e3gaK/P76+drsrsN5IRudFCEIyAaKAMWBskA1
QJVYDQGaDzHh5amDm9xUl2uzYSKgOFAWYg7cPciGQHwBVINVOzKCmANUj2YI
MMQgvsDlBjT3QPwFCWe4IcCQBzKAviZoAgQBVQLVA3UhGwKMQSADGHpEGgJU
CVQP1AXUC0mNQAYwJQAZwFgg0hCgSqB6oC6IIUBAuSFUcQkVw4QqsUOVdEKV
FEutvEOVXEyt8oRaJRvZZSx+QExpDwAxBaHa
             "], "Byte", ColorSpace -> "RGB", ImageResolution -> 144, 
             Interleaving -> True]}, Background -> 
         RGBColor[0.92157, 0.34118, 0.10588], Method -> "Queued", 
         ImageSize -> {All, 23}, Evaluator -> Automatic], FrameStyle -> 
        Directive[
          RGBColor[0.92157, 0.34118, 0.10588], 
          AbsoluteThickness[2]], FrameMargins -> -1, ContentPadding -> False, 
        StripOnInput -> False]& )}], 
   Cell[
    StyleData["SuggestionGridTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (StyleBox[
        FrameBox[
         AdjustmentBox[
          TagBox[
           GridBox[{{
              
              TemplateBox[{#2, #3, {16., 16.}, {{1., 17.}, {1., 17.}}}, 
               "SuggestionIconTemplate"], 
              
              PaneBox[#, ImageSizeAction -> "ShrinkToFit", BaselinePosition -> 
               Baseline, ImageSize -> Full], 
              RowBox[{
                AdjustmentBox[
                 TemplateBox[{
                   ActionMenuBox[
                    TagBox[
                    PaneSelectorBox[{False -> GraphicsBox[{
                    EdgeForm[
                    Directive[
                    GrayLevel[1, 0], 
                    Thickness[0.025]]], 
                    FaceForm[#4], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], #5, 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0], True -> 
                    GraphicsBox[{
                    EdgeForm[
                    Directive[#5, 
                    Thickness[0.025]]], 
                    FaceForm[#2], 
                    
                    RectangleBox[{-1.75, -2}, {1.75, 2}, RoundingRadius -> 
                    0.2], 
                    Thickness[0.15], 
                    GrayLevel[1], 
                    LineBox[{{-0.5, -1.}, {0.5, 0.}, {-0.5, 1.}}]}, 
                    ImageSize -> {Automatic, 15}, ImageMargins -> 0]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], ImageSize -> Automatic, 
                    FrameMargins -> 0], 
                    MouseAppearanceTag["LinkHand"]], #6, Appearance -> None, 
                    Method -> "Queued"], "\"View suggestions\""}, 
                  "PrettyTooltipTemplate"], BoxBaselineShift -> -0.5], 
                " "}]}}, 
            GridBoxAlignment -> {
             "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, AutoDelete -> 
            False, GridBoxItemSize -> {
             "Columns" -> {Automatic, Automatic, Fit}, 
              "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {{0.4}}}], "Grid"], 
          BoxMargins -> {{0.25, -0.5}, {0.15, -0.15}}], 
         RoundingRadius -> {13, 75}, Background -> #4, FrameStyle -> None, 
         FrameMargins -> {{0, 8}, {0, 0}}, ImageMargins -> {{0, 0}, {5, 5}}, 
         StripOnInput -> False], "Text", FontColor -> #5, FontSize -> 14, 
        FontFamily -> "Source Sans Pro", FontWeight -> "SemiBold", 
        FontTracking -> "Plain", 
        PrivateFontOptions -> {"OperatorSubstitution" -> False}, 
        LineBreakWithin -> False]& )}], 
   Cell[
    StyleData["SuggestionIconTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (GraphicsBox[{
         Thickness[0.055556], 
         StyleBox[{
           
           FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3,
             3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGJJIGZigIIGAwcIQ8kBxk94ekHp9k9Vh8qXaoYcOfoO
m+a+X37stKZDTP+hrxpzdOA0TBymDqYPl7n2pnG7PHlk4Pw5RxQ2FGWIwPWD
jI3p54WbLxuVYn3fnwluD8S8H/Yo9gD5KPYA+TB7YPph9sDMh9EwcZg6FPdh
MRfdXpi7YPph7oaZD/MXzB5c4QCzBwA/Dn+d
            "]]}, 
          FaceForm[#]], 
         StyleBox[{
           
           FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1,
              0}, {0, 1, 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
              3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, {{{8.1753, 7.4169}, {
             7.7969, 11.308}, {7.7969, 13.38}, {10.12, 13.38}, {10.12, 
             11.308}, {9.7415, 7.4169}, {8.1753, 7.4169}}, CompressedData["
1:eJxTTMoPSmViYGCQBGIQDQFKDg+rRNa5P+RzKPOXE8vSVYTz8z+0ngxpVHCA
qBNwmPd++THv7/IO8q2vA3fICTpUvlQz5Hgj52DLdX1xga2QQxoYyDmcYLed
HTpfGM6/k8GQ3+giCue7M1dwq7wQg+vnmbyyKdBTAm6+tsTUK5wZknD7Pec2
qB1qk4K772Y8iCXtAHM/jP/bquBcxyUEfyJ/ldnqOmW4/qw9JZMlWFTg5tfa
m8bt6lSB23/2DAiowN0H48PcD+PD/AfTD/M/zHxY+MDsh4UfzH2w8EUPfwD5
N5G6
             "]}]}, 
          FaceForm[#2]]}, ImageSize -> #3, PlotRange -> #4, AspectRatio -> 
        Automatic, BaselinePosition -> Scaled[0.1]]& )}], 
   Cell[
    StyleData["FormEditValuesButtonTemplate"], 
    TemplateBoxOptions -> {DisplayFunction -> (TemplateBox[{
         TagBox[
          PaneBox[
           PaneSelectorBox[{False -> GraphicsBox[
               TagBox[
                RasterBox[CompressedData["
1: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
N3kqZvY=
                 "], {{0, 50.}, {50., 0}}, {0, 255}, ColorFunction -> 
                 GrayLevel], 
                BoxForm`ImageTag[
                "Byte", ColorSpace -> "Grayscale", Interleaving -> True], 
                Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
               ImageSizeRaw -> {50., 50.}, PlotRange -> {{0, 50.}, {0, 50.}}],
              True -> GraphicsBox[
               TagBox[
                RasterBox[CompressedData["
1:eJzNWG1MU1cY7m1vS4GWttBLy0dLWyhl5aultrT0C2QzM5rMIWgyluDHkMwf
YgBF9gc1cWpijDNuRNFsv2Rmuqmb/NjIYIFkG2qyAYnAljidODfdmItu+AHs
Xi6n59x7D3LH9mPnRJLzvB/Pue95z3nfat3UWLVFKpFImpX0n6qNrRVNTRvb
1mrpRc225tcbttW/tnJbS31DfZN/k4wGS+b/MSb/jxFvt7QX95R86TytXyMh
WEztye1w97v7c97SBAG2tEHIqRpXX/ksnPlnCVIiMTWXz0DMN5rZSGqX4l+u
t+wp+wn1z05Lu7ZCiIYfOjoTnf+MQfd8aFLoiZmRR4FbeEl02tQsnkFpCT/E
+1lsUtViOezHOJYzhZdSVqVt5vvLe0/ldpzk7mbZN2I5vEPAJnjPdlBpnQOJ
4s9Qb2V3SB0Dk9rM7b4xiJNJ4jigjSINiaAV3TO1FjEgSr+PWRjFcRR+AiyS
X0RxqjrnCDtNO1Bcpga5HJp8tud4m/2Yd9g3WvixZxBmqpg96SqBfmDCeXrZ
t6XjzjOaMEbvhfADYZ4UdYvhMLfhcsy8k6sl1+PvQ8EFMRymJnwm6ypRLcse
nI7rc1kC1xshk+sVRmkcn8V2AGvfi1jKy24vxhBvs+71XI4+Zm9M6XhuR5J/
cZaE54CcqoH3IS49eaWlvai74AJkIHWOE9GnQg/FPQl5kMW6zz2QfSh1nTKr
qBto2I8CKXxbbQeF0VYVB27i4828hanrhRYpq4E8dF+WOBcFe8xmZv5OcxhC
9xdiYKexjm9DSP0/AGl6A4NYdoN14SW+NqnjfkPkT++QZzD0G4pFH6u9fDvz
LiD1XGHWxT1gnbKKr+s4AX35rxtqpfHsPrXl7n4o8Y4wlQsditTIIyBl1iVf
gVXaZm7djLfBk3b1cWsdIcs5DFkMr3A5NKHg3RgH7dN5BsmUT9ETse6F34Cp
pkTBedxNkKno2hCrxZG/GIyq4mTKA1hnPJdj+6wVMEiYlzg6PX8mT2UqFlMV
cU/Q0cnuJ/8ciuYcAdGYv3H0SbPnIByuL4BVUoBFjBtQX74xeQrwZmmHZwQ4
5PrYmQ7hGSSS3HeADt0XCTicXWwdY4duOewEAIfCEMu/wYU44LmDCEOOyFTG
VphDdL+EiZU0DkQ7NEks0FIWXgRWuuW4WOV/QDCNqSTJh6Lls7DGlY4DTFuO
YyCTYPVVGFgseQX3Zct6Yy6mxyFSdget0zDa7n52P9wB31rvMERVLs9VxOPP
DOYeAOu8d9Ezor/Qj0TwML+vpapBLOlvb0ElBGlujUzF7iCHQ+Xm7xS+M3RN
/AjeTzLJth8yBH/hdzxSZfBXlMN+NHZfTvI5EvLQfic67eqzH8s+VHiRW/uF
N9RYB2SBm8xaEwTr8EPhi5G6npsRwml/m29Dv4FfA6llNxs+3yhAMrcL9Y11
4L7jGYTZoC6JffmTuHQWy2wEmG+MvvRqXaW5zdSE2Hi9Izj/wbuGV6EWVWN7
U/8S0yc6TsXux1kgJbUw6nRXOf9m2g5Ae4I01Lp60cz3jphaSA3UMNSCHPDf
gDmlrYAajk7cPlEWZsjUmjL9y1SNrhLcOCEDOn3X0HxPdOJ0ymet+4TnIxxU
Dd46fQtXj/tmgekeEMNh24+zLTgvfOWoau8wIwv9HpgAetmHxHDo1wB92nbu
/S67bW7j13gwSI0ila6+XcAmdR0qVRUZN7AzeQWKK9KAfuAW8wbwTws32O9h
pjILojIVrKLRJyoXahH4EUjE/oqGv6OKulNWg6hyfyV6roJYqEscp2C2yilx
HM73UW/+6+ZdckoTQn/3M9PcKlUa62DnNBerCXEMTHfEz5HII9gvxbCp4D0+
Zm4Vy0H3kjtx2Qh8LyShs1UunoPpIly9OD/OroytONx3La1+oar/rJHotB8N
/4F6Kv1Onkz3hx+iWPRp/jm6Y/gX//sjU6U3eK4wvsIPcjvYzCRkph3sLy//
DcvuuIyle//vxt/PCE6d
                 "], {{0, 50.}, {50., 0}}, {0, 255}, ColorFunction -> 
                 GrayLevel], 
                BoxForm`ImageTag[
                "Byte", ColorSpace -> "Grayscale", Interleaving -> True], 
                Selectable -> False], DefaultBaseStyle -> "ImageGraphics", 
               ImageSizeRaw -> {50., 50.}, 
               PlotRange -> {{0, 50.}, {0, 50.}}]}, 
            Dynamic[
             CurrentValue["MouseOver"]], ImageSize -> Automatic, FrameMargins -> 
            0], ImageSize -> {Automatic, 15}, ImageSizeAction -> 
           "ResizeToFit"], 
          MouseAppearanceTag["LinkHand"]], "\"Edit values\""}, 
        "PrettyTooltipTemplate"]& )}], 
   Cell["Documentation", "Section"], 
   Cell["Usage", "Subsection"], 
   Cell[
    StyleData["UsageInputs", StyleDefinitions -> StyleData["Input"]], 
    CellMargins -> {{66, 10}, {0, 8}}, 
    StyleKeyMapping -> {"Tab" -> "UsageDescription"}, Evaluatable -> False, 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb$ = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb$, 
          Cell["", "UsageDescription"], All]; 
        SelectionMove[RSNB`nb$, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoStyles -> False, ShowCodeAssist -> False, 
    CodeAssistOptions -> {"DynamicHighlighting" -> False}, 
    LineSpacing -> {1, 3}, TabSpacings -> {2.5}, CounterIncrements -> "Text", 
    FontFamily -> "Source Sans Pro", FontSize -> 15, FontWeight -> "Plain"], 
   Cell[
    StyleData["UsageDescription", StyleDefinitions -> StyleData["Text"]], 
    CellMargins -> {{86, 10}, {7, 0}}, 
    StyleKeyMapping -> {"Backspace" -> "UsageInputs"}, CellGroupingRules -> 
    "OutputGrouping", 
    CellEventActions -> {"ReturnKeyDown" :> With[{RSNB`nb$ = Notebooks[
           EvaluationCell[]]}, SelectionMove[
          EvaluationCell[], After, Cell]; NotebookWrite[RSNB`nb$, 
          Cell[
           BoxData[""], "UsageInputs", FontFamily -> "Source Sans Pro"], All]; 
        SelectionMove[RSNB`nb$, Before, CellContents]], {"KeyDown", "\t"} :> 
      Replace[SelectionMove[
          SelectedNotebook[], After, Cell]; NotebookFind[
          SelectedNotebook[], "TabNext", Next, CellTags, AutoScroll -> True, 
          WrapAround -> True], Blank[NotebookSelection] :> SelectionMove[
          SelectedNotebook[], All, CellContents, AutoScroll -> True]]}, 
    ShowAutoSpellCheck -> False], 
   Cell["Details & Options", "Subsection"], 
   Cell[
    StyleData["Notes", StyleDefinitions -> StyleData["Item"]], CellDingbat -> 
    StyleBox["\[FilledVerySmallSquare]", FontColor -> GrayLevel[0.6]], 
    CellMargins -> {{66, 24}, {9, 7}}, ReturnCreatesNewCell -> False, 
    StyleKeyMapping -> {}, DefaultNewCellStyle -> "Notes", ShowAutoSpellCheck -> 
    False, GridBoxOptions -> {BaseStyle -> "TableNotes"}], 
   Cell[
    StyleData["TableNotes", StyleDefinitions -> StyleData["Notes"]], 
    CellDingbat -> None, CellFrameColor -> RGBColor[0.749, 0.694, 0.553], 
    StyleMenuListing -> None, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    GridBoxOptions -> {
     FrameStyle -> GrayLevel[0.906], 
      GridBoxAlignment -> {
       "Columns" -> {{Left}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
        "RowsIndexed" -> {}}, 
      GridBoxDividers -> {"Columns" -> {{None}}, "Rows" -> {{True}}}, 
      GridDefaultElement -> Cell["\[Placeholder]", "TableText"]}], 
   Cell[
    StyleData["TableText"], DefaultInlineFormatType -> 
    "DefaultInputInlineFormatType", AutoQuoteCharacters -> {}, 
    StyleMenuListing -> None], 
   Cell["Examples", "Subsection"], 
   Cell[
    StyleData["ExampleDelimiter"], Selectable -> False, ShowCellBracket -> 
    Automatic, CellMargins -> {{66, 14}, {5, 10}}, Evaluatable -> True, 
    CellGroupingRules -> {"SectionGrouping", 58}, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False, 
    CellLabelAutoDelete -> True, TabFilling -> 
    "\[LongDash]\[NegativeThickSpace]", TabSpacings -> {100}, 
    StyleMenuListing -> None, FontFamily -> "Verdana", FontWeight -> Bold, 
    FontSlant -> "Plain", FontColor -> GrayLevel[0.906]], 
   Cell[
    StyleData["ExampleText", StyleDefinitions -> StyleData["Text"]]], 
   Cell[
    StyleData["PageBreak", StyleDefinitions -> StyleData["ExampleDelimiter"]],
     Selectable -> False, CellFrame -> {{0, 0}, {1, 0}}, 
    CellMargins -> {{66, 14}, {15, -5}}, 
    CellElementSpacings -> {"CellMinHeight" -> 1}, Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), CellFrameColor -> 
    GrayLevel[
      Rational[77, 85]]], 
   Cell[
    StyleData["Subsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   Cell[
    StyleData["Subsubsection"], Evaluatable -> True, 
    CellEvaluationFunction -> (($Line = 0; Null)& ), ShowCellLabel -> False], 
   Cell[
    StyleData["ExampleImage"], PageWidth :> 650, 
    CellMargins -> {{66, 66}, {16, 5}}, Evaluatable -> False, ShowCellLabel -> 
    False, MenuSortingValue -> 10000, 
    RasterBoxOptions -> {ImageEditMode -> False}], 
   Cell["Links", "Section"], 
   Cell[
    StyleData["Link"], FontFamily -> "Source Sans Pro", FontColor -> Dynamic[
      If[
       CurrentValue["MouseOver"], 
       RGBColor[0.855, 0.396, 0.145], 
       RGBColor[0.02, 0.286, 0.651]]]], 
   Cell[
    StyleData["StringTypeLink", StyleDefinitions -> StyleData["Link"]], 
    FontColor -> Dynamic[
      If[
       CurrentValue["MouseOver"], 
       RGBColor[0.969, 0.467, 0.], 
       GrayLevel[0.467]]]], 
   Cell[
    StyleData["CharactersRefLink"], ShowSpecialCharacters -> False], 
   Cell["Annotation", "Section"], 
   Cell[
    StyleData["Excluded"], 
    CellBracketOptions -> {
     "Color" -> RGBColor[0.9, 0.4, 0.4], "Thickness" -> 2}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Excluded"}, 
      "Message" -> {"Message", "MSG", "Excluded"}, 
      "Output" -> {"Output", "Excluded"}, "Print" -> {"Print", "Excluded"}, 
      "PrintTemporary" -> {"PrintTemporary", "Excluded"}}, CellFrameMargins -> 
    4, CellFrameLabels -> {{None, 
       Cell[
        BoxData[
         TemplateBox[{
           StyleBox[
           "\"excluded\"", "ExcludedCellLabel", StripOnInput -> False], 
           "\"Excluded cells will not appear anywhere in the published \
resource except for the definition notebook\""}, "PrettyTooltipTemplate"]], 
        "ExcludedCellLabel"]}, {None, None}}, StyleMenuListing -> None, 
    Background -> RGBColor[1, 0.95, 0.95]], 
   Cell[
    StyleData["ExcludedCellLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontFamily -> "Source Sans Pro", FontSize -> 
    9, FontWeight -> Plain, FontSlant -> Italic, FontColor -> 
    RGBColor[0.9, 0.4, 0.4, 0.5], Background -> None], 
   Cell[
    StyleData["Comment", StyleDefinitions -> StyleData["Text"]], 
    CellFrame -> {{3, 0}, {0, 0}}, CellMargins -> {{66, 0}, {1, 0}}, 
    CellElementSpacings -> {"ClosedCellHeight" -> 0}, 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "Comment"}, 
      "Message" -> {"Message", "MSG", "Comment"}, 
      "Output" -> {"Output", "Comment"}, "Print" -> {"Print", "Comment"}, 
      "PrintTemporary" -> {"PrintTemporary", "Comment"}}, CellFrameColor -> 
    RGBColor[0.88072, 0.61104, 0.14205], 
    CellFrameLabelMargins -> {{0, 10}, {0, 0}}, FontColor -> GrayLevel[0.25], 
    Background -> RGBColor[0.982, 0.942, 0.871]], 
   Cell[
    StyleData["AuthorComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "AuthorComment"}, 
      "Message" -> {"Message", "MSG", "AuthorComment"}, 
      "Output" -> {"Output", "AuthorComment"}, 
      "Print" -> {"Print", "AuthorComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "AuthorComment"}}, 
    CellFrameColor -> RGBColor[0.36842, 0.50678, 0.7098], Background -> 
    RGBColor[0.905, 0.926, 0.956]], 
   Cell[
    StyleData["ReviewerComment", StyleDefinitions -> StyleData["Comment"]], 
    GeneratedCellStyles -> {
     "Graphics" -> {"Graphics", "ReviewerComment"}, 
      "Message" -> {"Message", "MSG", "ReviewerComment"}, 
      "Output" -> {"Output", "ReviewerComment"}, 
      "Print" -> {"Print", "ReviewerComment"}, 
      "PrintTemporary" -> {"PrintTemporary", "ReviewerComment"}}, 
    CellFrameColor -> RGBColor[0.56018, 0.69157, 0.19488], Background -> 
    RGBColor[0.934, 0.954, 0.879]], 
   Cell[
    StyleData["CommentLabel", StyleDefinitions -> StyleData["Text"]], 
    ShowStringCharacters -> False, FontSlant -> "Italic", FontColor -> 
    GrayLevel[0.5]], 
   Cell["Special Input", "Section"], 
   Cell[
    StyleData["FormObjectCell"], CellMargins -> {{66, 66}, {16, 5}}], 
   Cell[
    StyleData["LocalFileInput", StyleDefinitions -> StyleData["Input"]], 
    CellFrameLabels -> {{None, 
       Cell[
        BoxData[
         ButtonBox[
         "\"Choose\"", FrameMargins -> {{5, 5}, {0, 0}}, 
          BaseStyle -> {"Panel", FontSize -> 12}, Evaluator -> Automatic, 
          Method -> "Queued", ButtonFunction :> 
          With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
            Quiet[
             
             Block[{$ContextPath = RSNB`$cp$, 
               ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
               False, DefinitionNotebookClient`$ButtonCodeID = None}, 
              Internal`WithLocalSettings[
               DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                  ReleaseHold[
                   CurrentValue[
                   RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                  "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                Annotation[
                DefinitionNotebookClient`$ButtonCodeID = 1053094956087266899; 
                 DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                   ReleaseHold[DefinitionNotebookClient`$ButtonCode = HoldForm[
                    If[$VersionNumber >= 13., 
                    DefinitionNotebookClient`LocalFileInputDialog["Function", 
                    ParentCell[
                    EvaluationCell[]], "Type" -> "FileOpen"], 
                    MessageDialog[
                    "This feature requires Wolfram Language version 13 or \
later."]]]]], 
                 DefinitionNotebookClient`ButtonCodeID[1053094956087266899]], 
                DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
              Null]]], Appearance :> 
          FEPrivate`FrontEndResource[
           "FEExpressions", "GrayButtonNinePatchAppearance"]]]]}, {
      None, None}}], 
   Cell[
    StyleData["LocalDirectoryInput", StyleDefinitions -> StyleData["Input"]], 
    CellFrameLabels -> {{None, 
       Cell[
        BoxData[
         ButtonBox[
         "\"Choose\"", FrameMargins -> {{5, 5}, {0, 0}}, 
          BaseStyle -> {"Panel", FontSize -> 12}, Evaluator -> Automatic, 
          Method -> "Queued", ButtonFunction :> 
          With[{RSNB`nb$ = ButtonNotebook[], RSNB`$cp$ = $ContextPath}, 
            Quiet[
             
             Block[{$ContextPath = RSNB`$cp$, 
               ResourceSystemClient`$AsyncronousResourceInformationUpdates = 
               False, DefinitionNotebookClient`$ButtonCodeID = None}, 
              Internal`WithLocalSettings[
               DefinitionNotebookClient`$ButtonsDisabled = True; Once[
                  ReleaseHold[
                   CurrentValue[
                   RSNB`nb$, {TaggingRules, "CompatibilityTest"}]], 
                  "KernelSession"]; Needs["DefinitionNotebookClient`"], 
                Annotation[
                DefinitionNotebookClient`$ButtonCodeID = 4898876371082581810; 
                 DefinitionNotebookClient`CheckForUpdates[RSNB`nb$, 
                   ReleaseHold[DefinitionNotebookClient`$ButtonCode = HoldForm[
                    If[$VersionNumber >= 13., 
                    DefinitionNotebookClient`LocalFileInputDialog["Function", 
                    ParentCell[
                    EvaluationCell[]], "Type" -> "Directory"], 
                    MessageDialog[
                    "This feature requires Wolfram Language version 13 or \
later."]]]]], 
                 DefinitionNotebookClient`ButtonCodeID[4898876371082581810]], 
                DefinitionNotebookClient`$ButtonsDisabled = False; Null]; 
              Null]]], Appearance :> 
          FEPrivate`FrontEndResource[
           "FEExpressions", "GrayButtonNinePatchAppearance"]]]]}, {None, None}
      }], 
   Cell["Misc", "Section"], 
   Cell[
    StyleData["Item"], DefaultNewCellStyle -> "Item"], 
   Cell[
    StyleData["ButtonText"], FontFamily -> "Sans Serif", FontSize -> 11, 
    FontWeight -> Bold, FontColor -> RGBColor[0.459, 0.459, 0.459]], 
   Cell[
    StyleData["InlineFormula"], 
    HyphenationOptions -> {"HyphenationCharacter" -> "\[Continuation]"}, 
    LanguageCategory -> "Formula", AutoSpacing -> True, ScriptLevel -> 1, 
    SingleLetterItalics -> False, SpanMaxSize -> 1, StyleMenuListing -> None, 
    FontFamily -> "Source Sans Pro", FontSize -> 1. Inherited, 
    ButtonBoxOptions -> {Appearance -> {Automatic, None}}, 
    FractionBoxOptions -> {BaseStyle -> {SpanMaxSize -> Automatic}}, 
    GridBoxOptions -> {
     GridBoxItemSize -> {
       "Columns" -> {{Automatic}}, "ColumnsIndexed" -> {}, "Rows" -> {{1.}}, 
        "RowsIndexed" -> {}}}], 
   Cell[
    StyleData["DockedCell"], CellFrameColor -> GrayLevel[0.75], Background -> 
    GrayLevel[0.9]]}, Visible -> False, FrontEndVersion -> 
  "13.3 for Microsoft Windows (64-bit) (May 18, 2023)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"ea77c31a-88cf-44cd-815f-a16b9f7defeb"
]

